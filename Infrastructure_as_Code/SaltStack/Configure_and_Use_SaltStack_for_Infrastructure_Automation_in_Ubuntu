

install saltstack liner:

sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install -y curl && curl -fsSL https://repo.saltproject.io/py3/ubuntu/20.04/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add - && echo "deb http://repo.saltproject.io/py3/ubuntu/20.04/amd64/latest focal main" | sudo tee /etc/apt/sources.list.d/saltstack.list && sudo apt-get update && sudo apt-get install -y salt-master salt-minion && sudo sed -i 's/#interface: 0.0.0.0/interface: 127.0.0.1/' /etc/salt/master && sudo systemctl restart salt-master && sudo systemctl enable salt-master && sudo sed -i 's/#master: salt/master: 127.0.0.1/' /etc/salt/minion && sudo systemctl restart salt-minion && sudo systemctl enable salt-minion



Accept the Minion Key on the Master
Check for the minion's key on the Salt Master:

sudo salt-key -L
Accept the minion's key:


sudo salt-key -A
Verify the Minion Connection
Test the connection between the master and minion:

sudo salt '*' test.ping
You should see a response from your minion like this:


minion-id:
    True


Use SaltStack for Infrastructure Automation
Create a state file:

sudo mkdir -p /srv/salt
sudo nano /srv/salt/example.sls
Add some example states to the file:

install_apache:
  pkg.installed:
    - name: apache2

start_apache:
  service.running:
    - name: apache2
    - enable: True
Apply the state to your minion:


sudo salt '*' state.apply example
This will install and start Apache on the minion.

 Extend and Customize
Learn more about SaltStack modules and states to automate various tasks.
Create more state files for different configurations and services.
Use SaltStack pillars to manage sensitive data and configuration across multiple environments.
By following these steps, you can configure and use SaltStack for infrastructure automation on your Ubuntu server using localhost as the IP address. For more advanced usage, refer to the official SaltStack documentation.
