Secure API Endpoints in Ubuntu: Step-by-Step Guide
This tutorial will guide you through the process of setting up and securing API endpoints in Ubuntu using Node.js, Express, HTTPS, and JWT authentication.

Step 1: Install Prerequisites
First, ensure Node.js and npm (Node Package Manager) are installed on your Ubuntu system.

 
 
sudo apt update
sudo apt install nodejs npm
Verify the installation:

 
 
node -v
npm -v
Step 2: Create a Node.js Project
Create a new directory for your project and initialize a new Node.js project:

 
 
mkdir secure-api
cd secure-api
npm init -y
Step 3: Install Necessary Packages
Install the necessary packages for your API, including Express (for creating the server), JWT (for authentication), and other security-related packages:

 
 
npm install express jsonwebtoken bcryptjs helmet cors dotenv
Step 4: Set Up Environment Variables
Create a .env file in the root of your project to store your environment variables securely:

 
 
touch .env
Add the following variables to your .env file:

 
 
PORT=3000
SECRET_KEY=your_secret_key
Replace your_secret_key with a strong secret key of your choice.

Step 5: Create the Server
Create a file named server.js and set up a basic Express server with HTTPS support:

javascript
 
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const helmet = require('helmet');
const cors = require('cors');
const https = require('https');
const fs = require('fs');
require('dotenv').config();

const app = express();

app.use(helmet());
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const SECRET_KEY = process.env.SECRET_KEY;

// Middleware to protect routes
const authenticateToken = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Example unprotected route
app.get('/', (req, res) => {
  res.send('Welcome to the secure API!');
});

// Example protected route
app.get('/protected', authenticateToken, (req, res) => {
  res.send('This is a protected route');
});

// User registration
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  // Save user to database (pseudo code)
  // db.saveUser({ username, password: hashedPassword });
  res.send('User registered successfully');
});

// User login
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  // Fetch user from database (pseudo code)
  // const user = db.getUserByUsername(username);
  const user = { username: 'test', password: '$2a$10$KIXaIvoT9zy8zC/o5PqihOLbVJxW9Yd4ePNL8A2NSl/KxHS9n9uX.' }; // Sample user for demo
  if (!user) return res.sendStatus(404);

  const validPassword = await bcrypt.compare(password, user.password);
  if (!validPassword) return res.sendStatus(403);

  const token = jwt.sign({ username: user.username }, SECRET_KEY, { expiresIn: '1h' });
  res.json({ token });
});

// SSL certificates
const key = fs.readFileSync('./ssl/server.key');
const cert = fs.readFileSync('./ssl/server.cert');

const server = https.createServer({ key, cert }, app);

server.listen(PORT, () => {
  console.log(`Secure server running on port ${PORT}`);
});
Step 6: Generate SSL Certificates
Generate a self-signed SSL certificate (for development purposes):

 
 
mkdir ssl
cd ssl
openssl req -nodes -new -x509 -keyout server.key -out server.cert
cd ..
Step 7: Start Your Server
Start your server using the following command:

 
 
node server.js
Step 8: Test Your API
Access your API endpoints using a tool like Postman:

Unprotected route: https://localhost:3000/
Protected route: https://localhost:3000/protected (requires JWT token)
User registration: https://localhost:3000/register
User login: https://localhost:3000/login
For the protected route, include the JWT token in the Authorization header.

Step 9: Deploy Your API (Optional)
For deployment, consider using a cloud provider like AWS, Google Cloud, or DigitalOcean. Ensure your environment variables are set securely and your SSL certificates are properly configured.

Conclusion
By following these steps, you can secure your API endpoints in an Ubuntu environment using HTTPS and JWT authentication. Always follow best practices for security and keep your dependencies up to date.
