### 404. Sum of Left Leaves

**Solution:**

```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def sumOfLeftLeaves(self, root: TreeNode) -> int:
        def is_leaf(node):
            return node and not node.left and not node.right
        
        def dfs(node, is_left):
            if not node:
                return 0
            if is_leaf(node) and is_left:
                return node.val
            return dfs(node.left, True) + dfs(node.right, False)
        
        return dfs(root, False)
```

### Explanation:

1. **Check if Node is a Leaf:**
   - The `is_leaf` function checks if a node is a leaf (a node with no children).

2. **Depth-First Search (DFS):**
   - The `dfs` function performs a depth-first search on the binary tree.
   - It takes a node and a boolean `is_left` which indicates if the node is a left child.
   - If the current node is a leaf and is a left child, return the node's value.
   - Recursively call `dfs` for the left child (with `is_left` set to `True`) and the right child (with `is_left` set to `False`).

3. **Initial Call:**
   - Start the DFS from the root with `is_left` set to `False` (since the root is not a left child).

### Example Walkthrough:

1. **Example 1:**
   - Input: `root = [3,9,20,null,null,15,7]`
   - Explanation:
     - The tree structure is:
       ```
         3
        / \
       9  20
          / \
         15  7
       ```
     - The left leaves are `9` and `15`.
     - Output: `24` (since 9 + 15 = 24)

2. **Example 2:**
   - Input: `root = [1]`
   - Explanation:
     - The tree has only one node and no leaves.
     - Output: `0`

### Constraints:

- The number of nodes in the tree is in the range [1, 1000].
- `-1000 <= Node.val <= 1000`

The solution uses a DFS approach to traverse the tree and sum up the values of left leaves. This approach ensures all nodes are visited, making it efficient with a time complexity of \(O(n)\), where \(n\) is the number of nodes in the tree.
