### 458. Poor Pigs

This problem can be approached by understanding the number of states each pig can represent given the time constraints. A pig can die (indicating the poison was in one of the buckets it drank from) or survive (indicating none of the buckets it drank from contained poison).

To solve this problem, we need to determine how many states (combinations of outcomes) we can get with a certain number of pigs, and how to distribute the testing time effectively to maximize our ability to pinpoint the poisoned bucket.

#### Solution:

```python
class Solution:
    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:
        states = minutesToTest // minutesToDie + 1
        pigs = 0
        while states ** pigs < buckets:
            pigs += 1
        return pigs
```

### Explanation:

1. **Understanding the States:**
   - Each pig can represent `states` number of states, where `states` is the number of times a pig can be tested plus one (either it dies or survives).
   - This is calculated as `states = minutesToTest // minutesToDie + 1`, which accounts for the number of testing rounds plus the initial state.

2. **Calculate the Minimum Number of Pigs:**
   - We need enough pigs to cover all `buckets` possible outcomes.
   - The total number of states we can represent with `pigs` pigs is `states ** pigs`.
   - We increment the number of pigs until `states ** pigs` is at least `buckets`.

3. **Return the Number of Pigs:**
   - The smallest number of pigs that can represent all possible outcomes for the given number of buckets is returned.

### Example Walkthrough:

1. **Example 1:**
   - Input: `buckets = 4`, `minutesToDie = 15`, `minutesToTest = 15`
   - Steps:
     - `states = 15 // 15 + 1 = 2` (each pig can test twice: alive or dead after one test)
     - With 1 pig, `states ** pigs = 2 ** 1 = 2` (not enough for 4 buckets)
     - With 2 pigs, `states ** pigs = 2 ** 2 = 4` (sufficient for 4 buckets)
   - Output: `2`

2. **Example 2:**
   - Input: `buckets = 4`, `minutesToDie = 15`, `minutesToTest = 30`
   - Steps:
     - `states = 30 // 15 + 1 = 3` (each pig can test three times: alive or dead after two tests)
     - With 1 pig, `states ** pigs = 3 ** 1 = 3` (not enough for 4 buckets)
     - With 2 pigs, `states ** pigs = 3 ** 2 = 9` (sufficient for 4 buckets)
   - Output: `2`

### Constraints:

- `1 <= buckets <= 1000`
- `1 <= minutesToDie <= minutesToTest <= 100`

This approach leverages the power of combinations to minimize the number of pigs needed by optimizing the testing process through multiple rounds, ensuring that all buckets can be tested within the given time constraints.
