### Problem: 480. Sliding Window Median

### Solution

To solve this problem, we can use a combination of two heaps (a max-heap and a min-heap) to maintain the current sliding window of size `k`. The max-heap will hold the smaller half of the numbers, while the min-heap will hold the larger half. This allows us to efficiently find the median of the current window.

### Steps

1. **Use Two Heaps**:
   - Use a max-heap (left) to store the smaller half of the elements.
   - Use a min-heap (right) to store the larger half of the elements.

2. **Balance Heaps**:
   - Ensure that the heaps are balanced such that the number of elements in the max-heap is equal to or one more than the number of elements in the min-heap.

3. **Get Median**:
   - If the number of elements is odd, the median is the top of the max-heap.
   - If the number of elements is even, the median is the average of the tops of both heaps.

4. **Sliding Window**:
   - Add the new element from the right end of the window.
   - Remove the old element from the left end of the window.
   - Balance the heaps after each addition and removal.

5. **Efficiency**:
   - Using heaps allows for efficient insertion, removal, and median retrieval, each operation being O(log k), where k is the size of the window.

### Code Implementation

```python
from heapq import *

class Solution:
    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:
        def add(num, max_heap, min_heap):
            heappush(max_heap, -num)
            heappush(min_heap, -heappop(max_heap))
            if len(min_heap) > len(max_heap):
                heappush(max_heap, -heappop(min_heap))
        
        def remove(num, max_heap, min_heap):
            if num <= -max_heap[0]:
                max_heap.remove(-num)
                heapify(max_heap)
            else:
                min_heap.remove(num)
                heapify(min_heap)
            if len(min_heap) > len(max_heap):
                heappush(max_heap, -heappop(min_heap))
            elif len(max_heap) > len(min_heap) + 1:
                heappush(min_heap, -heappop(max_heap))

        def get_median(max_heap, min_heap, k):
            if k % 2 == 1:
                return float(-max_heap[0])
            else:
                return (-max_heap[0] + min_heap[0]) / 2.0
        
        max_heap, min_heap = [], []
        result = []
        
        for i in range(k):
            add(nums[i], max_heap, min_heap)
        
        result.append(get_median(max_heap, min_heap, k))
        
        for i in range(k, len(nums)):
            add(nums[i], max_heap, min_heap)
            remove(nums[i - k], max_heap, min_heap)
            result.append(get_median(max_heap, min_heap, k))
        
        return result

# Example usage:
solution = Solution()
print(solution.medianSlidingWindow([1,3,-1,-3,5,3,6,7], 3))  # Output: [1.0,-1.0,-1.0,3.0,5.0,6.0]
print(solution.medianSlidingWindow([1,2,3,4,2,3,1,4,2], 3))  # Output: [2.0,3.0,3.0,3.0,2.0,3.0,2.0]
```

### Explanation of the Code

1. **Helper Functions**:
   - `add(num, max_heap, min_heap)`: Adds a number to the appropriate heap and balances the heaps.
   - `remove(num, max_heap, min_heap)`: Removes a number from the appropriate heap and balances the heaps.
   - `get_median(max_heap, min_heap, k)`: Retrieves the median from the heaps.

2. **Initialization**:
   - Initialize two heaps, `max_heap` and `min_heap`.
   - Populate the heaps with the first `k` elements.

3. **Sliding Window**:
   - For each new element added to the window, add it to the heaps and remove the element that is sliding out of the window.
   - Retrieve and store the median after each adjustment.

4. **Efficiency**:
   - The use of heaps ensures that each operation (add, remove, get_median) is efficient, making the overall solution scalable to large input sizes.

This approach effectively handles the problem constraints and ensures that the solution is both optimal and easy to understand.
