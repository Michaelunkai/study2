## 174. Dungeon Game

### Problem Statement (Explained Like You're 12):

Imagine you're a knight trapped in a dungeon. The dungeon is like a big grid with rooms, and each room has a number. This number can be positive (good) or negative (bad). If it's positive, you get health points when you enter the room. If it's negative, you lose health points. Your goal is to start at the top-left corner and get to the bottom-right corner to save the princess. You need to figure out the minimum amount of health you need to start with so that you can save the princess without dying along the way. You can only move right or down.

### Python Solution:

```python
from typing import List

class Solution:
    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
        if not dungeon or not dungeon[0]:
            return 1

        m, n = len(dungeon), len(dungeon[0])
        dp = [[0] * n for _ in range(m)]

        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])

        for i in range(m - 2, -1, -1):
            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])

        for j in range(n - 2, -1, -1):
            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])

        for i in range(m - 2, -1, -1):
            for j in range(n - 2, -1, -1):
                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])

        return dp[0][0]
```

### Explanation of the Code:

1. **Initialization**:
    - We first check if the dungeon grid is empty. If it is, we return 1 since the knight needs at least 1 health point to start with.
    - We initialize a 2D list `dp` of the same size as the dungeon grid to keep track of the minimum health required to reach each cell.

2. **Setting the Goal Cell**:
    - The bottom-right cell (`dp[-1][-1]`) is the goal where the princess is. The knight needs at least `1 - dungeon[-1][-1]` health to survive in that cell. If `dungeon[-1][-1]` is positive or zero, we need at least 1 health point, hence the `max(1, 1 - dungeon[-1][-1])`.

3. **Filling the Last Row and Last Column**:
    - For the last column, we fill the values from bottom to top. Each cell in the last column depends on the cell below it.
    - For the last row, we fill the values from right to left. Each cell in the last row depends on the cell to its right.

4. **Filling the Rest of the Grid**:
    - We fill the rest of the grid from bottom-right to top-left.
    - For each cell, the minimum health required is determined by the minimum of the health required for the cell to the right and the cell below. We subtract the dungeon value of the current cell from this minimum and ensure that the knight has at least 1 health point to survive.

5. **Returning the Result**:
    - The value in the top-left cell (`dp[0][0]`) is the minimum health the knight needs to start with to save the princess.

### Summary:

1. **Initialize** a 2D list `dp` to keep track of the minimum health needed for each cell.
2. **Set** the health needed for the goal cell (bottom-right corner).
3. **Fill** the last row and column.
4. **Fill** the rest of the grid from bottom-right to top-left, calculating the minimum health needed for each cell.
5. **Return** the value in the top-left cell (`dp[0][0]`) as the minimum health needed to start.
