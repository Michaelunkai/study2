To solve the problem of assigning ranks to athletes based on their scores, we can follow these steps:

1. **Sort the Scores with Indices**: First, pair each score with its index in the original array. This will allow us to assign ranks back to the original indices after sorting.
2. **Sort by Scores in Descending Order**: Sort the paired list by scores in descending order to determine the ranks.
3. **Assign Ranks**: Iterate over the sorted list and assign the appropriate rank to each athlete based on their sorted position. The top three athletes get special ranks ("Gold Medal", "Silver Medal", "Bronze Medal"), and the rest get their corresponding position numbers.

Here's the Python code implementing the above logic:

```python
class Solution:
    def findRelativeRanks(self, score: List[int]) -> List[str]:
        # Pair each score with its index
        score_with_index = [(s, i) for i, s in enumerate(score)]
        
        # Sort the list by score in descending order
        score_with_index.sort(reverse=True, key=lambda x: x[0])
        
        # Create a result list with the same length as score
        result = [""] * len(score)
        
        # Assign ranks
        for rank, (s, i) in enumerate(score_with_index):
            if rank == 0:
                result[i] = "Gold Medal"
            elif rank == 1:
                result[i] = "Silver Medal"
            elif rank == 2:
                result[i] = "Bronze Medal"
            else:
                result[i] = str(rank + 1)
        
        return result

# Example usage:
solution = Solution()
print(solution.findRelativeRanks([5, 4, 3, 2, 1]))  # Output: ["Gold Medal","Silver Medal","Bronze Medal","4","5"]
print(solution.findRelativeRanks([10, 3, 8, 9, 4]))  # Output: ["Gold Medal","5","Bronze Medal","Silver Medal","4"]
```

### Explanation:
1. **Pairing Scores with Indices**:
   - We create a list of tuples where each tuple contains a score and its original index.
   - Example: `score = [5, 4, 3, 2, 1]` becomes `[(5, 0), (4, 1), (3, 2), (2, 3), (1, 4)]`.

2. **Sorting**:
   - We sort the list of tuples in descending order based on the scores using `sort(reverse=True, key=lambda x: x[0])`.
   - After sorting: `[(5, 0), (4, 1), (3, 2), (2, 3), (1, 4)]` (no change as it was already in descending order).

3. **Assigning Ranks**:
   - We iterate through the sorted list and assign ranks based on the position in the sorted list.
   - The first position (index 0) gets "Gold Medal", the second "Silver Medal", the third "Bronze Medal", and the rest get their 1-based rank as strings.

This method ensures that the solution is both efficient and straightforward, adhering to the constraints and requirements of the problem.
