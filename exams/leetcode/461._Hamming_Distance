### Solution for LeetCode Problem: 461. Hamming Distance

The Hamming distance between two integers is defined as the number of positions at which the corresponding bits are different. To solve this problem, we can use the bitwise XOR operation, which will give us a number where each bit is set to 1 if the corresponding bits of the two numbers are different.

Here's a step-by-step solution:

1. **Perform XOR Operation**: Perform an XOR operation on the two numbers `x` and `y`. This will result in a number where each bit is 1 if the corresponding bits of `x` and `y` differ.
2. **Count the Number of 1s**: Count the number of 1s in the result from the XOR operation. This count represents the Hamming distance.

Let's implement this in Python:

```python
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        # Perform XOR operation
        xor_result = x ^ y
        
        # Count the number of 1s in the binary representation of the xor_result
        hamming_distance = 0
        while xor_result:
            hamming_distance += xor_result & 1
            xor_result >>= 1
        
        return hamming_distance
```

### Explanation:

1. **XOR Operation (`x ^ y`)**:
    - `1 ^ 4` results in `5` because:
        - `1` in binary is `0001`
        - `4` in binary is `0100`
        - `0001 XOR 0100` gives `0101`, which is `5` in decimal.

2. **Counting 1s**:
    - We use a loop to count the number of 1s in the binary representation of the XOR result.
    - `& 1` checks if the least significant bit is 1.
    - `>>= 1` shifts the bits to the right by one position.

### Example Walkthrough:

For `x = 1` and `y = 4`:
- XOR result: `1 ^ 4 = 5` (binary `0101`)
- Counting the number of 1s: `5` has two 1s in its binary representation (`0101`), so the Hamming distance is `2`.

For `x = 3` and `y = 1`:
- XOR result: `3 ^ 1 = 2` (binary `0010`)
- Counting the number of 1s: `2` has one 1 in its binary representation (`0010`), so the Hamming distance is `1`.

This solution is efficient with a time complexity of O(log n), where n is the maximum number of bits in the numbers x and y (32 bits for 32-bit integers). The space complexity is O(1) since we are only using a few extra variables.
