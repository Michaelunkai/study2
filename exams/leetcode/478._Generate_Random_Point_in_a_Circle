### Problem: 478. Generate Random Point in a Circle

### Solution

To generate a random point uniformly inside a circle, we can use polar coordinates. We generate a random angle and a random radius. To ensure uniform distribution, the radius must be chosen such that the area covered is proportional to the radius squared.

### Steps

1. **Generate a Random Angle**:
   - The angle can be uniformly distributed between `0` and `2π`.

2. **Generate a Random Radius**:
   - To ensure uniform distribution, generate a random value `r` between `0` and `1` and take the square root of `r` times the radius. This accounts for the area of the circle, ensuring uniform distribution.
   
3. **Convert Polar Coordinates to Cartesian Coordinates**:
   - Use the formulas `x = r * cos(angle)` and `y = r * sin(angle)` to convert the polar coordinates to Cartesian coordinates.

### Code Implementation

```python
import random
import math

class Solution:

    def __init__(self, radius: float, x_center: float, y_center: float):
        self.radius = radius
        self.x_center = x_center
        self.y_center = y_center

    def randPoint(self) -> [float, float]:
        # Generate a random angle between 0 and 2π
        angle = random.uniform(0, 2 * math.pi)
        
        # Generate a random radius with square root transformation
        r = self.radius * math.sqrt(random.uniform(0, 1))
        
        # Convert polar coordinates to Cartesian coordinates
        x = self.x_center + r * math.cos(angle)
        y = self.y_center + r * math.sin(angle)
        
        return [x, y]

# Example usage:
# solution = Solution(1.0, 0.0, 0.0)
# print(solution.randPoint())  # Example output: [-0.02493, -0.38077]
```

### Explanation of the Code

1. **Initialization**:
   - The constructor `__init__` initializes the `radius`, `x_center`, and `y_center` of the circle.

2. **Random Point Generation**:
   - `angle` is a random angle uniformly distributed between `0` and `2π`.
   - `r` is a random radius ensuring uniform distribution within the circle by taking the square root of a uniformly distributed random number multiplied by the radius.
   - Convert the polar coordinates `(r, angle)` to Cartesian coordinates `(x, y)` using the center coordinates of the circle.

3. **Return**:
   - The method `randPoint` returns the generated random point as a list `[x, y]`.

### Examples

- **Example 1**:
  ```plaintext
  Input:
  ["Solution", "randPoint", "randPoint", "randPoint"]
  [[1.0, 0.0, 0.0], [], [], []]
  Output:
  [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]
  ```

This solution ensures uniform random distribution of points within the circle and is efficient with an average time complexity of `O(1)` for generating each point.
