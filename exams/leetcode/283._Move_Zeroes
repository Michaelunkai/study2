### 283. Move Zeroes

**Problem Description:**

Given an integer array `nums`, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
```
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
```

**Example 2:**
```
Input: nums = [0]
Output: [0]
```

**Constraints:**
- `1 <= nums.length <= 10^4`
- `-2^31 <= nums[i] <= 2^31 - 1`

**Follow up:**
Could you minimize the total number of operations done?

### Explanation (Like I'm 12):

Imagine you have a bunch of toys in a line. Some of these toys are zeroes and you want to move all the zero toys to the end of the line, but you don't want to mess up the order of the other toys. You can't pick up all the toys and put them in a new line; you have to move them around where they are.

### Solution:

We can solve this problem using two pointers. One pointer (`non_zero_index`) will keep track of where the next non-zero number should go, and the other pointer (`i`) will go through each element in the array.

1. **Initialize the Pointer:**
   - Set `non_zero_index` to 0. This pointer will keep track of the position where the next non-zero number should be placed.

2. **Move Non-Zero Elements:**
   - Loop through the array using the pointer `i`.
   - If `nums[i]` is not zero, place it at `nums[non_zero_index]` and increment `non_zero_index`.

3. **Fill Remaining Positions with Zeroes:**
   - After placing all non-zero elements, fill the rest of the array with zeroes from the position `non_zero_index`.

### Python Code:

```python
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        non_zero_index = 0
        
        # First pass: move all non-zero elements to the front
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[non_zero_index] = nums[i]
                non_zero_index += 1
        
        # Second pass: fill the rest of the array with zeroes
        for i in range(non_zero_index, len(nums)):
            nums[i] = 0
```

### Explanation of the Solution:

1. **Initialize Pointer:**
   - `non_zero_index` is set to 0. It will keep track of where the next non-zero element should go.

2. **First Pass:**
   - We loop through each element in `nums`.
   - If `nums[i]` is not zero, we place it at the `non_zero_index` position and then increment `non_zero_index`.

3. **Second Pass:**
   - After moving all non-zero elements to the front, we fill the remaining positions in `nums` with zeroes starting from `non_zero_index` to the end of the array.

### Example Walkthrough:

Let's take the example `nums = [0,1,0,3,12]`:

- Initial array: `[0,1,0,3,12]`
- `non_zero_index` starts at 0.

**First Pass:**
- `i = 0`: `nums[0]` is `0`, so do nothing.
- `i = 1`: `nums[1]` is `1`, place it at `nums[0]` and increment `non_zero_index` to 1.
  - Array becomes: `[1,1,0,3,12]`
- `i = 2`: `nums[2]` is `0`, so do nothing.
- `i = 3`: `nums[3]` is `3`, place it at `nums[1]` and increment `non_zero_index` to 2.
  - Array becomes: `[1,3,0,3,12]`
- `i = 4`: `nums[4]` is `12`, place it at `nums[2]` and increment `non_zero_index` to 3.
  - Array becomes: `[1,3,12,3,12]`

**Second Pass:**
- From `non_zero_index = 3` to the end, fill the array with `0`.
  - Array becomes: `[1,3,12,0,0]`

This method ensures that all zeroes are moved to the end while maintaining the order of non-zero elements, and it does so with a minimal number of operations.
