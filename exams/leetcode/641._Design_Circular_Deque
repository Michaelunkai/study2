To implement a circular double-ended queue (deque), we can use a list to store the elements and maintain two pointers, `front` and `rear`, to manage the positions for insertion and deletion. We also need a variable to keep track of the current size of the deque.

Here's the implementation of the `MyCircularDeque` class:

```python
class MyCircularDeque:

    def __init__(self, k: int):
        self.k = k
        self.deque = [0] * k
        self.front = 0
        self.rear = -1
        self.size = 0

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        self.front = (self.front - 1) % self.k
        self.deque[self.front] = value
        self.size += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        self.rear = (self.rear + 1) % self.k
        self.deque[self.rear] = value
        self.size += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.k
        self.size -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False
        self.rear = (self.rear - 1) % self.k
        self.size -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[self.front]

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[self.rear]

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.k
```

### Explanation of the Code:

1. **Initialization (`__init__`)**:
   - `self.k` stores the maximum size of the deque.
   - `self.deque` is a list of size `k` initialized to zero.
   - `self.front` and `self.rear` are pointers initialized to the front and rear of the deque.
   - `self.size` keeps track of the current number of elements in the deque.

2. **Insert at Front (`insertFront`)**:
   - Check if the deque is full. If so, return `False`.
   - Update the `front` pointer circularly using modulo operation and insert the value.
   - Increment the size and return `True`.

3. **Insert at Rear (`insertLast`)**:
   - Check if the deque is full. If so, return `False`.
   - Update the `rear` pointer circularly using modulo operation and insert the value.
   - Increment the size and return `True`.

4. **Delete from Front (`deleteFront`)**:
   - Check if the deque is empty. If so, return `False`.
   - Update the `front` pointer circularly using modulo operation.
   - Decrement the size and return `True`.

5. **Delete from Rear (`deleteLast`)**:
   - Check if the deque is empty. If so, return `False`.
   - Update the `rear` pointer circularly using modulo operation.
   - Decrement the size and return `True`.

6. **Get Front Element (`getFront`)**:
   - Check if the deque is empty. If so, return `-1`.
   - Return the element at the `front` pointer.

7. **Get Rear Element (`getRear`)**:
   - Check if the deque is empty. If so, return `-1`.
   - Return the element at the `rear` pointer.

8. **Check if Empty (`isEmpty`)**:
   - Return `True` if the size is zero, otherwise `False`.

9. **Check if Full (`isFull`)**:
   - Return `True` if the size is equal to the maximum capacity `k`, otherwise `False`.

This implementation ensures all operations are performed in constant time, making it efficient for real-time use cases.
