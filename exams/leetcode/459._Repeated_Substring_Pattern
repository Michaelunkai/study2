### 459. Repeated Substring Pattern

To determine if a given string can be constructed by repeating a substring, we can use a straightforward approach involving string manipulation. Hereâ€™s how to solve it:

**Solution:**

```python
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        return (s + s)[1:-1].find(s) != -1
```

### Explanation:

1. **Concatenate the String:**
   - Concatenate the string `s` with itself to form a new string `ss`. This new string will have the repeated substring patterns if any exist in the original string `s`.

2. **Slice the Concatenated String:**
   - Remove the first and the last characters from the concatenated string `ss`. This is done to avoid false positives where the original string `s` matches the beginning or end of `ss`.

3. **Check for the Original String:**
   - Check if the original string `s` is a substring of the sliced string. If it is, this means that `s` can be constructed by repeating a substring.

4. **Return the Result:**
   - If the find method does not return `-1`, it means the substring exists and hence the original string `s` can be constructed by repeating a substring.

### Example Walkthrough:

1. **Example 1:**
   - Input: `s = "abab"`
   - Steps:
     - Concatenate: `"abab" + "abab" = "abababab"`
     - Slice: `"abababab"[1:-1] = "bababa"`
     - Check: `"bababa".find("abab")` returns `1` (substring found).
   - Output: `True`

2. **Example 2:**
   - Input: `s = "aba"`
   - Steps:
     - Concatenate: `"aba" + "aba" = "abaaba"`
     - Slice: `"abaaba"[1:-1] = "baab"`
     - Check: `"baab".find("aba")` returns `-1` (substring not found).
   - Output: `False`

3. **Example 3:**
   - Input: `s = "abcabcabcabc"`
   - Steps:
     - Concatenate: `"abcabcabcabc" + "abcabcabcabc" = "abcabcabcabcabcabcabcabc"`
     - Slice: `"abcabcabcabcabcabcabcabc"[1:-1] = "bcabcabcabcabcabcabcab"`
     - Check: `"bcabcabcabcabcabcabcab".find("abcabcabcabc")` returns `1` (substring found).
   - Output: `True`

### Constraints:

- `1 <= s.length <= 10^4`
- `s` consists of lowercase English letters.

This approach ensures a linear time complexity solution with \(O(n)\) space complexity due to the string manipulation. It effectively checks for repeated patterns without using complex algorithms or additional data structures.
