To solve the problem of calculating the exclusive time of each function from the given logs, we need to keep track of the execution time for each function considering the nested function calls. Here's a step-by-step approach to achieve this:

1. **Parse Logs**: Each log entry provides a function ID, whether the function is starting or ending, and the timestamp.
2. **Use a Stack**: Use a stack to keep track of the currently executing function calls. The stack helps manage the nested nature of function calls.
3. **Track Execution Time**: Maintain an array to track the exclusive time for each function.
4. **Update Times**: When processing each log entry:
   - If it's a start log, push the function onto the stack.
   - If it's an end log, pop the function from the stack, and calculate its execution time. Update the exclusive time for the function and adjust the start time for the next function on the stack.

Here's the Python code implementing this logic:

```python
class Solution:
    def exclusiveTime(self, n: int, logs: list[str]) -> list[int]:
        # Initialize the result array with zeroes
        result = [0] * n
        # Stack to keep track of active function calls
        stack = []
        # Previous timestamp to calculate time differences
        prev_time = 0
        
        for log in logs:
            func_id, type, time = log.split(':')
            func_id, time = int(func_id), int(time)
            
            if type == 'start':
                if stack:
                    # Add the time difference to the function currently on top of the stack
                    result[stack[-1]] += time - prev_time
                stack.append(func_id)
                prev_time = time
            else:
                # Add the time difference including the end time for the current function
                result[stack.pop()] += time - prev_time + 1
                prev_time = time + 1
        
        return result

# Example usage:
# solution = Solution()
# print(solution.exclusiveTime(2, ["0:start:0","1:start:2","1:end:5","0:end:6"]))  # Output: [3, 4]
```

### Explanation:
1. **Initialization**:
   - `result`: An array to store the exclusive time for each function, initialized to zeros.
   - `stack`: A stack to keep track of function calls currently being executed.
   - `prev_time`: Tracks the previous timestamp to calculate the duration of execution for the current function.

2. **Processing Logs**:
   - For each log, parse the `func_id`, `type` (start or end), and `time`.
   - If the log type is "start":
     - If there's an active function on the stack, add the time elapsed since `prev_time` to the result of the function at the top of the stack.
     - Push the current function ID onto the stack.
     - Update `prev_time` to the current time.
   - If the log type is "end":
     - Pop the function from the stack.
     - Add the time elapsed (including the current time) to the result for the popped function.
     - Update `prev_time` to `time + 1` to account for the ending of the current function.

### Edge Cases:
- Functions starting or ending at the same time are handled by the constraints ensuring no two start or end events happen at the same timestamp.
- The solution handles nested and consecutive function calls efficiently using the stack and timestamp management.

This approach ensures that each function's exclusive execution time is calculated correctly even with nested calls, as required by the problem constraints.
