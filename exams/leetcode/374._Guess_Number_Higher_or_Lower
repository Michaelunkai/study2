### 374. Guess Number Higher or Lower

**Solution:**

```python
# The guess API is already defined for you.
# def guess(num: int) -> int:

class Solution:
    def guessNumber(self, n: int) -> int:
        left, right = 1, n
        while left <= right:
            mid = left + (right - left) // 2
            result = guess(mid)
            if result == 0:
                return mid
            elif result == -1:
                right = mid - 1
            else:
                left = mid + 1
        return -1  # This line should never be reached
```

### Explanation:

1. **Initialization:**
   - Initialize two pointers, `left` and `right`, to 1 and `n` respectively.

2. **Binary Search Loop:**
   - While `left` is less than or equal to `right`:
     - Calculate the middle point `mid`.
     - Call the `guess` API with `mid` as the argument.
     - If `guess(mid)` returns `0`, it means we have found the correct number, so return `mid`.
     - If `guess(mid)` returns `-1`, it means the picked number is lower than `mid`, so adjust `right` to `mid - 1`.
     - If `guess(mid)` returns `1`, it means the picked number is higher than `mid`, so adjust `left` to `mid + 1`.

3. **Return Statement:**
   - The return statement `return -1` at the end is just a placeholder and should never be reached if the inputs are valid.

### Example Walkthrough:

1. **Example 1:**
   - Input: `n = 10`, `pick = 6`
   - The binary search will find `6` as the correct number.

2. **Example 2:**
   - Input: `n = 1`, `pick = 1`
   - The binary search will find `1` as the correct number since it's the only number in the range.

3. **Example 3:**
   - Input: `n = 2`, `pick = 1`
   - The binary search will find `1` as the correct number.

This approach efficiently finds the correct number using binary search, which ensures a time complexity of \(O(\log n)\).
