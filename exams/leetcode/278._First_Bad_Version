### 278. First Bad Version

**Problem Description:**

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API `bool isBadVersion(version)` which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

**Example 1:**
```
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
```

**Example 2:**
```
Input: n = 1, bad = 1
Output: 1
```

**Constraints:**
- `1 <= bad <= n <= 2^31 - 1`

### Explanation (Like I'm 12):

Imagine you have a line of toys, each one numbered from 1 to `n`. One of these toys is broken, and all the toys after it are broken too. You have a way to check if a toy is broken. We want to find the first broken toy as quickly as possible.

We can do this by checking the toys one by one, but that would be slow. Instead, we can use a smart method called binary search to find the first broken toy faster.

### Solution:

Binary search is a technique that allows us to repeatedly divide the range of possible answers in half until we find the correct one. 

Here's how we can use binary search to solve this problem:

1. **Set the Range:**
   - Start with the full range of versions from 1 to `n`.

2. **Check the Middle:**
   - Check the middle version in the current range.
   - If the middle version is bad, then the first bad version must be in the first half of the range (including the middle version itself).
   - If the middle version is not bad, then the first bad version must be in the second half of the range.

3. **Narrow Down the Range:**
   - Repeat the process, each time narrowing down the range based on whether the middle version is bad or not.

4. **Find the First Bad Version:**
   - When the range narrows down to a single version, that's the first bad version.

### Python Code:

```python
# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 1, n
        while left < right:
            mid = left + (right - left) // 2
            if isBadVersion(mid):
                right = mid  # Narrow down to the left part
            else:
                left = mid + 1  # Narrow down to the right part
        return left
```

### Explanation of the Solution:

1. **Initialize Variables:**
   - `left` is set to 1 (the first version).
   - `right` is set to `n` (the last version).

2. **Binary Search Loop:**
   - Continue the loop while `left` is less than `right`.
   - Calculate the middle version `mid`.

3. **Check Middle Version:**
   - If `isBadVersion(mid)` returns `true`, it means the first bad version is either `mid` or before it. So, we set `right` to `mid`.
   - If `isBadVersion(mid)` returns `false`, it means the first bad version is after `mid`. So, we set `left` to `mid + 1`.

4. **Return the Result:**
   - When `left` equals `right`, the loop ends, and `left` (or `right`) is the first bad version.

### Example Walkthrough:

Let's take the example `n = 5, bad = 4`:

- Initial range: `left = 1`, `right = 5`
- First check: `mid = 3`
  - `isBadVersion(3)` -> `false`
  - So, `left = 4`
- Second check: `mid = 4`
  - `isBadVersion(4)` -> `true`
  - So, `right = 4`
- Now `left == right`, so the first bad version is `4`.

This approach efficiently finds the first bad version with a minimal number of API calls.
