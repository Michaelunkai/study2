### 474. Ones and Zeroes

Here is the solution for the problem "474. Ones and Zeroes":

```python
from typing import List

class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        # Initialize the DP array
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        # Iterate over each string in strs
        for s in strs:
            zeros = s.count('0')
            ones = s.count('1')
            
            # Update the DP array from bottom right to top left
            for i in range(m, zeros - 1, -1):
                for j in range(n, ones - 1, -1):
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1)
        
        return dp[m][n]

# Example usage:
strs = ["10", "0001", "111001", "1", "0"]
m = 5
n = 3
solution = Solution()
print(solution.findMaxForm(strs, m, n))  # Output: 4
```

### Explanation:

1. **DP Array Initialization**: `dp[i][j]` represents the maximum size of the subset with at most `i` `0`s and `j` `1`s.
2. **Counting Zeros and Ones**: For each string, count the number of `0`s and `1`s.
3. **Updating DP Array**: Update the DP array in reverse order to ensure each string is only used once.

This solution uses dynamic programming to efficiently compute the size of the largest subset that meets the given constraints.
