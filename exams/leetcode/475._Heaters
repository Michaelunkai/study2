### Problem: 475. Heaters

### Solution

To solve this problem, we need to determine the minimum radius required for heaters such that all houses are covered. We can use a combination of sorting and binary search to achieve an efficient solution.

### Steps to Solve the Problem

1. **Sort the Houses and Heaters**:
   - First, sort the `houses` and `heaters` arrays to facilitate binary search and ensure correct distance calculations.

2. **Calculate Minimum Radius for Each House**:
   - For each house, determine the closest heater. This can be efficiently done using binary search.
   - Calculate the distance from the house to this closest heater.
   - Keep track of the maximum of these minimum distances. This maximum distance will be the required radius.

3. **Binary Search to Find the Closest Heater**:
   - For each house, perform a binary search on the sorted `heaters` array to find the closest heater.
   - Compute the distance to the nearest heater either to the left or right of the current house.

### Code Implementation

```python
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        # Sort both houses and heaters
        houses.sort()
        heaters.sort()
        
        def find_closest_heater(house):
            # Use binary search to find the closest heater
            left, right = 0, len(heaters) - 1
            while left < right:
                mid = (left + right) // 2
                if heaters[mid] < house:
                    left = mid + 1
                else:
                    right = mid
            # At the end of the while loop, left == right
            # Check both left and left-1 to find the closest heater
            # left-1 might be the closest if it is within the range
            closest_dist = abs(heaters[left] - house)
            if left > 0:
                closest_dist = min(closest_dist, abs(heaters[left - 1] - house))
            return closest_dist
        
        # Calculate the minimum radius required
        min_radius = 0
        for house in houses:
            min_radius = max(min_radius, find_closest_heater(house))
        
        return min_radius
```

### Explanation of the Code

1. **Sorting**:
   - Both `houses` and `heaters` arrays are sorted to facilitate the binary search.

2. **find_closest_heater Function**:
   - This function uses binary search to find the closest heater for a given house.
   - The binary search adjusts `left` and `right` pointers until they converge, ensuring the closest heater is found.
   - After the binary search, it checks the closest heater to the current house by comparing distances to the heater at the `left` pointer and potentially the one just before it (`left - 1`).

3. **Calculate Minimum Radius**:
   - For each house, the closest heater distance is determined.
   - The maximum of these distances across all houses is the minimum radius required to ensure all houses are covered.

### Examples

- **Example 1**:
  ```plaintext
  Input: houses = [1,2,3], heaters = [2]
  Output: 1
  ```

- **Example 2**:
  ```plaintext
  Input: houses = [1,2,3,4], heaters = [1,4]
  Output: 1
  ```

- **Example 3**:
  ```plaintext
  Input: houses = [1,5], heaters = [2]
  Output: 3
  ```

The solution efficiently finds the minimum radius required using sorting and binary search, ensuring it works well even for large inputs.
