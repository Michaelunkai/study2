### 367. Valid Perfect Square

**Problem Description:**

Given a positive integer `num`, return `true` if `num` is a perfect square, or `false` otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

You must not use any built-in library function, such as `sqrt`.

**Example 1:**
```
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
```

**Example 2:**
```
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.
```

**Constraints:**
- `1 <= num <= 2^31 - 1`

### Explanation (Like I'm 12):

Imagine you have a number and you want to check if you can make a perfect square out of it. A perfect square is like arranging marbles into a square shape, such as 1, 4, 9, 16, etc. We need to find a way to check if our number can be arranged this way without directly using the square root function.

### Solution:

We can solve this problem using a binary search. Binary search is a method to efficiently search for a target value within a sorted array (or range in this case).

### Steps:

1. Set the initial range for potential square roots to be from `1` to `num`.
2. Check the middle value of the current range.
3. Square the middle value and compare it to `num`.
4. If the squared value equals `num`, return `true`.
5. If the squared value is less than `num`, search in the higher half.
6. If the squared value is more than `num`, search in the lower half.
7. If the search range is exhausted, return `false`.

### Python Code:

```python
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        if num < 1:
            return False
        
        left, right = 1, num
        while left <= right:
            mid = left + (right - left) // 2
            square = mid * mid
            
            if square == num:
                return True
            elif square < num:
                left = mid + 1
            else:
                right = mid - 1
        
        return False
```

### Explanation of the Solution:

1. **Initialize Range:**
   - `left` is initialized to `1` and `right` is initialized to `num`.

2. **Binary Search Loop:**
   - Continue the loop while `left` is less than or equal to `right`.
   - Calculate the middle value `mid` of the current range.
   - Calculate `square` as `mid * mid`.

3. **Comparison:**
   - If `square` is equal to `num`, return `true` since we found the perfect square.
   - If `square` is less than `num`, adjust `left` to search the higher half (`mid + 1`).
   - If `square` is more than `num`, adjust `right` to search the lower half (`mid - 1`).

4. **Return False:**
   - If the loop completes without finding a perfect square, return `false`.

### Example Walkthrough:

Let's take the example `num = 16`:

- Initial range: `left = 1`, `right = 16`
- First check:
  - `mid = (1 + 16) // 2 = 8`
  - `square = 8 * 8 = 64` (too high, adjust range to `left = 1`, `right = 7`)
- Second check:
  - `mid = (1 + 7) // 2 = 4`
  - `square = 4 * 4 = 16` (found perfect square, return `true`)

For `num = 14`:

- Initial range: `left = 1`, `right = 14`
- First check:
  - `mid = (1 + 14) // 2 = 7`
  - `square = 7 * 7 = 49` (too high, adjust range to `left = 1`, `right = 6`)
- Second check:
  - `mid = (1 + 6) // 2 = 3`
  - `square = 3 * 3 = 9` (too low, adjust range to `left = 4`, `right = 6`)
- Third check:
  - `mid = (4 + 6) // 2 = 5`
  - `square = 5 * 5 = 25` (too high, adjust range to `left = 4`, `right = 4`)
- Fourth check:
  - `mid = (4 + 4) // 2 = 4`
  - `square = 4 * 4 = 16` (too high, adjust range to `left = 4`, `right = 3`)

Since `left` is now greater than `right`, the loop exits and returns `false`.
