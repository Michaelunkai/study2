To solve the problem of adding a new row to a binary tree at a given depth, we can follow these steps:

1. **Special Case for Depth 1**:
   - If the given depth is 1, create a new root with the given value, and make the original tree the left subtree of this new root.

2. **Breadth-First Search (BFS)**:
   - Use BFS to traverse the tree level by level until reaching the level just before the given depth.
   - At each node at this level, create new nodes with the given value and reassign the original left and right subtrees accordingly.

Here's the implementation of this approach:

```python
from collections import deque

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def addOneRow(self, root: TreeNode, val: int, depth: int) -> TreeNode:
        if depth == 1:
            new_root = TreeNode(val)
            new_root.left = root
            return new_root
        
        queue = deque([root])
        current_depth = 1
        
        # Traverse the tree until reaching the level just before the desired depth
        while queue and current_depth < depth - 1:
            level_size = len(queue)
            for _ in range(level_size):
                node = queue.popleft()
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            current_depth += 1
        
        # Now we are at the level just before the desired depth
        while queue:
            node = queue.popleft()
            new_left = TreeNode(val)
            new_right = TreeNode(val)
            
            new_left.left = node.left
            new_right.right = node.right
            
            node.left = new_left
            node.right = new_right
        
        return root

# Example usage:
# root = TreeNode(4)
# root.left = TreeNode(2, TreeNode(3), TreeNode(1))
# root.right = TreeNode(6, TreeNode(5))
# sol = Solution()
# new_root = sol.addOneRow(root, 1, 2)
```

### Explanation:

1. **Special Case for Depth 1**:
   - When `depth` is 1, we create a new `TreeNode` with the given value `val`, set its left child to the original `root`, and return this new node as the new root of the tree.

2. **Breadth-First Search (BFS)**:
   - We use a queue to perform BFS, starting from the `root`.
   - We traverse the tree level by level until we reach the level just before the given `depth`.
   - At each node at this level, we create two new nodes with the given value `val` and attach them as the left and right children of the current node, respectively. The original left and right subtrees are then attached to the newly created nodes.

This solution ensures that the new row is added correctly at the specified depth while maintaining the structure of the existing tree.
