### 456. 132 Pattern

To solve the problem of finding a 132 pattern in an array, we can use a stack-based approach to efficiently check for the required pattern. The goal is to find a subsequence of three integers \( nums[i], nums[j], nums[k] \) such that \( i < j < k \) and \( nums[i] < nums[k] < nums[j] \).

**Solution:**

```python
class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        
        stack = []
        third = float('-inf')
        
        for num in reversed(nums):
            if num < third:
                return True
            while stack and num > stack[-1]:
                third = stack.pop()
            stack.append(num)
        
        return False
```

### Explanation:

1. **Initialize Variables:**
   - `third` keeps track of the "3" element in the 132 pattern. Initially, it is set to negative infinity.
   - `stack` is used to keep potential candidates for the "2" element in the 132 pattern.

2. **Iterate from Right to Left:**
   - Iterate through the array from right to left. This helps in finding the "1" element while maintaining potential "3" and "2" elements.
   
3. **Check for 132 Pattern:**
   - For each element, check if it is less than `third`. If true, it means we have found a valid 132 pattern.
   
4. **Update Stack and `third`:**
   - While the current element is greater than the top of the stack, pop elements from the stack and update `third` to be the value of the popped element. This ensures `third` is the largest possible "2" element that is still less than the current element.
   - Push the current element onto the stack as a potential candidate for the "2" element in the future.

5. **Return Result:**
   - If no 132 pattern is found during the iteration, return `False`.

### Example Walkthrough:

1. **Example 1:**
   - Input: `nums = [1,2,3,4]`
   - Steps:
     - Iterate from right to left: `[4, 3, 2, 1]`
     - No valid 132 pattern found.
   - Output: `False`

2. **Example 2:**
   - Input: `nums = [3,1,4,2]`
   - Steps:
     - Iterate from right to left: `[2, 4, 1, 3]`
     - `third` is updated to `2` when processing `4`.
     - `1` is less than `2` (current `third`), so 132 pattern found.
   - Output: `True`

3. **Example 3:**
   - Input: `nums = [-1,3,2,0]`
   - Steps:
     - Iterate from right to left: `[0, 2, 3, -1]`
     - `third` is updated to `0` when processing `2`.
     - `2` is greater than `0`, `third` updated to `2`.
     - `3` is greater than `2`, `third` updated to `2`.
     - `-1` is less than `2` (current `third`), so 132 pattern found.
   - Output: `True`

### Constraints:

- `n == nums.length`
- `1 <= n <= 2 * 10^5`
- `-10^9 <= nums[i] <= 10^9`

This solution ensures that we efficiently find the 132 pattern with a time complexity of \(O(n)\) and space complexity of \(O(n)\).
