To solve the problem of finding the next greater element for each element in `nums1` from the array `nums2`, we can use a stack-based approach that processes elements in `nums2` efficiently. The goal is to find the next greater element for each number in `nums2` and then map the results to the elements in `nums1`.

Hereâ€™s the step-by-step approach:

1. **Create a dictionary** `next_greater` to store the next greater element for each element in `nums2`.
2. **Use a stack** to keep track of elements for which we haven't found the next greater element yet.
3. **Iterate through nums2**:
   - For each element, pop elements from the stack until the stack is empty or the top of the stack is greater than the current element.
   - For each popped element, set its next greater element in the dictionary to the current element.
   - Push the current element onto the stack.
4. **For the remaining elements in the stack** (which have no greater element to their right), set their next greater element to `-1`.
5. **Build the result** for `nums1` using the `next_greater` dictionary.

Here's the Python code to implement this approach:

```python
class Solution:
    def nextGreaterElement(self, nums1: [int], nums2: [int]) -> [int]:
        next_greater = {}
        stack = []
        
        for num in nums2:
            while stack and stack[-1] < num:
                next_greater[stack.pop()] = num
            stack.append(num)
        
        while stack:
            next_greater[stack.pop()] = -1
        
        return [next_greater[num] for num in nums1]

# Example usage:
solution = Solution()
print(solution.nextGreaterElement([4,1,2], [1,3,4,2]))  # Output: [-1, 3, -1]
print(solution.nextGreaterElement([2,4], [1,2,3,4]))    # Output: [3, -1]
```

### Explanation:

1. **Initialization**:
   - `next_greater` dictionary to store the next greater element for each number.
   - `stack` to keep track of the numbers for which we need to find the next greater element.

2. **Processing `nums2`**:
   - Iterate through each number in `nums2`.
   - Use a while loop to find and record the next greater element for the numbers in the stack.
   - Push the current number onto the stack.

3. **Handling remaining elements**:
   - After processing all numbers in `nums2`, the remaining numbers in the stack have no next greater element. Hence, we set their next greater element to `-1`.

4. **Result construction**:
   - Use a list comprehension to build the result for `nums1` based on the `next_greater` dictionary.

This approach ensures that we process each element of `nums2` exactly once, leading to an overall time complexity of \(O(n)\), where \(n\) is the length of `nums2`. This is efficient given the problem constraints.
