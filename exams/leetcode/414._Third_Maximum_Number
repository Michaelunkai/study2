### 414. Third Maximum Number

**Solution:**

```python
class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        # Use a set to store distinct numbers
        distinct_nums = set(nums)
        
        # If there are less than 3 distinct numbers, return the maximum
        if len(distinct_nums) < 3:
            return max(distinct_nums)
        
        # Remove the largest number twice to find the third maximum
        distinct_nums.remove(max(distinct_nums))
        distinct_nums.remove(max(distinct_nums))
        
        return max(distinct_nums)
```

### Explanation:

1. **Use a Set for Distinct Numbers:**
   - Convert the list `nums` to a set `distinct_nums` to remove duplicates and keep only distinct numbers.

2. **Check Number of Distinct Elements:**
   - If there are fewer than 3 distinct numbers, return the maximum number from `distinct_nums`.

3. **Remove the Largest Numbers:**
   - Remove the largest number from `distinct_nums`.
   - Remove the new largest number (which is the second largest in the original list).
   
4. **Return the Third Largest Number:**
   - After removing the two largest numbers, the maximum of the remaining numbers in `distinct_nums` is the third maximum number.

### Example Walkthrough:

1. **Example 1:**
   - Input: `nums = [3,2,1]`
   - `distinct_nums = {3, 2, 1}`
   - After removing the largest (3): `distinct_nums = {2, 1}`
   - After removing the next largest (2): `distinct_nums = {1}`
   - The maximum of the remaining set is `1`.
   - Output: `1`

2. **Example 2:**
   - Input: `nums = [1,2]`
   - `distinct_nums = {1, 2}`
   - Since there are fewer than 3 distinct numbers, return the maximum: `2`.
   - Output: `2`

3. **Example 3:**
   - Input: `nums = [2,2,3,1]`
   - `distinct_nums = {1, 2, 3}`
   - After removing the largest (3): `distinct_nums = {1, 2}`
   - After removing the next largest (2): `distinct_nums = {1}`
   - The maximum of the remaining set is `1`.
   - Output: `1`

### Constraints:

- `1 <= nums.length <= 10^4`
- `-2^31 <= nums[i] <= 2^31 - 1`

This solution efficiently finds the third distinct maximum number in the list by leveraging a set to handle duplicates and directly removing the largest elements to get the third maximum.
