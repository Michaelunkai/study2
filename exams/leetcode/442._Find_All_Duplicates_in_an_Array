### 442. Find All Duplicates in an Array

**Solution:**

```python
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        result = []
        
        for num in nums:
            index = abs(num) - 1
            if nums[index] < 0:
                result.append(abs(num))
            else:
                nums[index] = -nums[index]
        
        return result
```

### Explanation:

1. **Using Negation for Marking:**
   - The idea is to use the input array itself for marking. Since the numbers are in the range `[1, n]`, we can use each number as an index to mark the presence of numbers.

2. **Marking the Presence:**
   - Iterate over each number in the array.
   - For each number `num`, calculate the index `index = abs(num) - 1` (use the absolute value because the number might have been negated already).
   - If `nums[index]` is negative, it means the number `abs(num)` has already been seen before, so add it to the result.
   - Otherwise, negate the value at `nums[index]` to mark it as seen.

3. **Return the Result:**
   - After iterating through the array, return the `result` list which contains all numbers that appeared twice.

### Example Walkthrough:

1. **Example 1:**
   - Input: `nums = [4,3,2,7,8,2,3,1]`
   - Steps:
     - 4: Mark index 3 -> `nums = [4, 3, 2, -7, 8, 2, 3, 1]`
     - 3: Mark index 2 -> `nums = [4, 3, -2, -7, 8, 2, 3, 1]`
     - 2: Mark index 1 -> `nums = [4, -3, -2, -7, 8, 2, 3, 1]`
     - -7: Mark index 6 -> `nums = [4, -3, -2, -7, 8, 2, -3, 1]`
     - 8: Mark index 7 -> `nums = [4, -3, -2, -7, 8, 2, -3, -1]`
     - 2: Index 1 is already negative, append 2 -> `result = [2]`
     - -3: Index 2 is already negative, append 3 -> `result = [2, 3]`
     - -1: Mark index 0 -> `nums = [-4, -3, -2, -7, 8, 2, -3, -1]`
   - Output: `[2, 3]`

2. **Example 2:**
   - Input: `nums = [1,1,2]`
   - Steps:
     - 1: Mark index 0 -> `nums = [-1, 1, 2]`
     - 1: Index 0 is already negative, append 1 -> `result = [1]`
     - 2: Mark index 1 -> `nums = [-1, -1, 2]`
   - Output: `[1]`

3. **Example 3:**
   - Input: `nums = [1]`
   - Steps:
     - 1: Mark index 0 -> `nums = [-1]`
   - Output: `[]`

### Constraints:

- `n == nums.length`
- `1 <= n <= 10^5`
- `1 <= nums[i] <= n`
- Each element in `nums` appears once or twice.

This solution runs in \(O(n)\) time and uses \(O(1)\) extra space, making it efficient and meeting the problem's constraints.
