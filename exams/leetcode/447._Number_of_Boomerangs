### 447. Number of Boomerangs

**Solution:**

To solve this problem, we need to count the number of boomerangs in the given set of points. A boomerang is defined as a tuple of points `(i, j, k)` such that the distance between `i` and `j` is equal to the distance between `i` and `k`.

We'll use a hash map to store the frequency of each distance from a given point and then calculate the number of boomerangs that can be formed based on these frequencies.

Here's the implementation:

```python
class Solution:
    def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def get_distance(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2

        count = 0
        for i in range(len(points)):
            distances = defaultdict(int)
            for j in range(len(points)):
                if i != j:
                    d = get_distance(points[i], points[j])
                    distances[d] += 1
            
            for freq in distances.values():
                if freq > 1:
                    count += freq * (freq - 1)
        
        return count
```

### Explanation:

1. **Distance Calculation:**
   - We use a helper function `get_distance` to calculate the squared distance between two points. The squared distance is used to avoid dealing with floating-point precision issues.

2. **Main Logic:**
   - Iterate over each point `i` and use a hash map `distances` to store the frequency of each distance from point `i` to every other point `j`.
   - For each point `j` (where `i` is not equal to `j`), calculate the distance `d` from point `i` to `j` and increment the count of `d` in the `distances` hash map.

3. **Count Boomerangs:**
   - For each unique distance `d` in the hash map, if the frequency of `d` is greater than 1, it means there are multiple points at this distance from point `i`.
   - The number of boomerangs that can be formed with this distance is given by the combination formula `freq * (freq - 1)`, where `freq` is the frequency of the distance `d`.

4. **Return Result:**
   - Sum up all the possible boomerangs for each point and return the total count.

### Example Walkthrough:

1. **Example 1:**
   - Input: `points = [[0,0],[1,0],[2,0]]`
   - Steps:
     - For point `[0, 0]`, the distances to `[1, 0]` and `[2, 0]` are `1` and `4`, respectively.
     - For point `[1, 0]`, the distances to `[0, 0]` and `[2, 0]` are `1` and `1`, respectively (2 points at distance 1).
     - For point `[2, 0]`, the distances to `[0, 0]` and `[1, 0]` are `4` and `1`, respectively.
     - Boomerangs: `[[1,0],[0,0],[2,0]]` and `[[1,0],[2,0],[0,0]]`
   - Output: `2`

2. **Example 2:**
   - Input: `points = [[1,1],[2,2],[3,3]]`
   - Steps:
     - Similar calculations lead to 2 boomerangs.
   - Output: `2`

3. **Example 3:**
   - Input: `points = [[1,1]]`
   - Steps:
     - Only one point, no boomerangs possible.
   - Output: `0`

This solution efficiently counts the number of boomerangs by leveraging hash maps to track distances, ensuring that the time complexity is manageable even for larger inputs.
