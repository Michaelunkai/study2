You're given a number rowIndex. You need to generate the rowIndex-th row of Pascal's Triangle. In Pascal's Triangle, each number is the sum of the two numbers directly above it. The rows are 0-indexed, meaning the first row is row 0.

For example, here are the first few rows of Pascal's Triangle:

sql
Copy code
    1       <- row 0
   1 1      <- row 1
  1 2 1     <- row 2
 1 3 3 1    <- row 3
If rowIndex is 3, you need to return [1, 3, 3, 1].

C# Solution:
csharp
Copy code
public class Solution {
    public IList<int> GetRow(int rowIndex) {
        var row = new List<int> { 1 };

        for (int i = 1; i <= rowIndex; i++) {
            for (int j = row.Count - 1; j > 0; j--) {
                row[j] = row[j] + row[j - 1];
            }
            row.Add(1);
        }

        return row;
    }
}
Explanation of the Code:
Function Signature:

csharp
Copy code
public IList<int> GetRow(int rowIndex) {
Initialization:

csharp
Copy code
var row = new List<int> { 1 };
Initialize a list with the first element of Pascal's Triangle row, which is always [1].
Generate Row:

csharp
Copy code
for (int i = 1; i <= rowIndex; i++) {
    for (int j = row.Count - 1; j > 0; j--) {
        row[j] = row[j] + row[j - 1];
    }
    row.Add(1);
}
Loop from 1 to rowIndex to build each row.
For each iteration:
Loop from the end of the current row to the beginning (except the first element).
Update each element by adding the element directly above and to the left.
Add 1 to the end of the row after updating the elements.
Return the Result:

csharp
Copy code
return row;
Return the list representing the rowIndex-th row of Pascal's Triangle.
Summary:
Start with the first row [1].
For each row from 1 to rowIndex, update the elements of the current row by summing up the two numbers directly above.
Add 1 at the end of the row.
Return the resulting row.
