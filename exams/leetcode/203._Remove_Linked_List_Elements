### 203. Remove Linked List Elements

**Problem Description:**

Given the head of a linked list and an integer `val`, remove all the nodes of the linked list that have `Node.val == val`, and return the new head.

**Example 1:**
```
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
```

**Example 2:**
```
Input: head = [], val = 1
Output: []
```

**Example 3:**
```
Input: head = [7,7,7,7], val = 7
Output: []
```

**Constraints:**
- The number of nodes in the list is in the range `[0, 10‚Å¥]`.
- `1 <= Node.val <= 50`
- `0 <= val <= 50`

### Explanation (Like I'm 12):

Imagine you have a chain of beads, and each bead has a number on it. You want to take out all the beads that have a specific number. For example, if your chain looks like this:
- 1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6

And you want to remove all the beads with the number 6, you would end up with:
- 1 -> 2 -> 3 -> 4 -> 5

We'll start from the beginning of the chain, check each bead, and if it has the number we want to remove, we'll skip it. If it doesn't, we'll keep it.

### Python Solution:

Here's how you can do it:

```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        # Create a dummy node that points to the head of the list
        dummy = ListNode(next=head)
        current = dummy
        
        # Iterate through the list
        while current.next:
            if current.next.val == val:
                # Skip the node with the target value
                current.next = current.next.next
            else:
                # Move to the next node
                current = current.next
        
        # Return the new head of the list
        return dummy.next
```

### Explanation of the Solution:

1. **Dummy Node:** We use a dummy node that points to the head of the list. This helps in cases where the head itself needs to be removed.
2. **Iterate Through List:** We use a `current` pointer to iterate through the list. 
3. **Check and Remove Nodes:** For each node, if the next node's value is equal to `val`, we skip it by setting `current.next` to `current.next.next`.
4. **Move to Next Node:** If the next node's value is not equal to `val`, we move the `current` pointer to the next node.
5. **Return New Head:** Finally, we return `dummy.next`, which is the new head of the list.

In simpler terms, we go through each bead in our chain, and if it has the number we want to remove, we just skip it and go to the next one. By the end, we have our new chain without the beads with that number.
