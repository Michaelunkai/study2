### 326. Power of Three

**Problem Description:**

Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.

An integer `n` is a power of three if there exists an integer `x` such that \( n = 3^x \).

**Example 1:**
```
Input: n = 27
Output: true
Explanation: 27 = 3^3
```

**Example 2:**
```
Input: n = 0
Output: false
Explanation: There is no x where 3^x = 0.
```

**Example 3:**
```
Input: n = -1
Output: false
Explanation: There is no x where 3^x = (-1).
```

**Constraints:**
- \(-2^{31} \leq n \leq 2^{31} - 1\)

### Explanation (Like I'm 12):

Imagine you have a number and you want to check if it can be made by multiplying 3 by itself some number of times. For example, 27 can be made by multiplying 3 three times (3 * 3 * 3). We want to find out if a given number is like that.

### Solution:

To solve this problem, we can use a mathematical property. For any number \( n \) that is a power of three, we can keep dividing it by 3. If after dividing by 3 multiple times, we get 1, then the number is a power of three.

### Python Code:

```python
class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        if n <= 0:
            return False
        
        while n % 3 == 0:
            n //= 3
        
        return n == 1
```

### Explanation of the Solution:

1. **Check for Non-positive Numbers:**
   - If `n` is less than or equal to 0, return `False` because negative numbers and zero cannot be powers of three.

2. **Divide by 3:**
   - Use a loop to divide `n` by 3 as long as `n` is divisible by 3.

3. **Check Result:**
   - If `n` becomes 1 after dividing by 3 multiple times, then `n` is a power of three, so return `True`.
   - Otherwise, return `False`.

### Example Walkthrough:

Let's take the example `n = 27`:

- Initially, `n = 27`
- `27 % 3 == 0`, so `n = 27 // 3 = 9`
- `9 % 3 == 0`, so `n = 9 // 3 = 3`
- `3 % 3 == 0`, so `n = 3 // 3 = 1`
- Now `n` is 1, so return `True`

For `n = 0`:
- `n` is not greater than 0, so return `False`

For `n = -1`:
- `n` is not greater than 0, so return `False`

This solution efficiently checks if a number is a power of three by repeatedly dividing by 3 and ensuring the number becomes 1.
