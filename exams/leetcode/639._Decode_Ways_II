To solve the problem of decoding a message that includes digits and the '*' character (which can represent any digit from '1' to '9'), we can use dynamic programming. The key is to handle various cases for decoding the characters based on the given rules.

### Steps to Approach the Problem:
1. **Initialization**: Set up a dynamic programming array `dp` where `dp[i]` represents the number of ways to decode the substring `s[0:i]`.
2. **Base Cases**: 
   - `dp[0] = 1` since an empty string has one way to be decoded (doing nothing).
   - `dp[1]` depends on the first character: 
     - If it's '*', there are 9 ways (1-9).
     - If it's '0', there are 0 ways (invalid on its own).
     - Otherwise, there is 1 way.
3. **DP Transition**: For each character from the second to the end of the string, calculate `dp[i]`:
   - **Single Character**: Handle cases for a single character decode.
   - **Two Characters**: Handle cases for decoding two characters together.
4. **Modulo Operation**: Since the answer can be large, take the result modulo \(10^9 + 7\).

Here is the detailed implementation:

```python
class Solution:
    def numDecodings(self, s: str) -> int:
        MOD = 10**9 + 7
        n = len(s)
        
        if n == 0:
            return 0
        
        # dp[i] will hold the number of ways to decode s[:i]
        dp = [0] * (n + 1)
        dp[0] = 1  # Base case: empty string
        
        # Handling the first character
        if s[0] == '*':
            dp[1] = 9
        elif s[0] == '0':
            dp[1] = 0
        else:
            dp[1] = 1
        
        for i in range(2, n + 1):
            if s[i-1] == '*':
                dp[i] += 9 * dp[i-1]  # Single '*'
            elif s[i-1] != '0':
                dp[i] += dp[i-1]  # Single digit

            if s[i-2] == '1':
                if s[i-1] == '*':
                    dp[i] += 9 * dp[i-2]  # '1*' -> '11' to '19'
                else:
                    dp[i] += dp[i-2]  # '1x'
            elif s[i-2] == '2':
                if s[i-1] == '*':
                    dp[i] += 6 * dp[i-2]  # '2*' -> '21' to '26'
                elif s[i-1] <= '6':
                    dp[i] += dp[i-2]  # '2x' where x is '0' to '6'
            elif s[i-2] == '*':
                if s[i-1] == '*':
                    dp[i] += 15 * dp[i-2]  # '**' -> '11' to '19' and '21' to '26'
                elif s[i-1] <= '6':
                    dp[i] += 2 * dp[i-2]  # '*x' -> '1x' and '2x' where x is '0' to '6'
                else:
                    dp[i] += dp[i-2]  # '*x' -> '1x' where x is '7' to '9'
            
            dp[i] %= MOD
        
        return dp[n]

# Example usage:
# solution = Solution()
# print(solution.numDecodings("*"))  # Output: 9
# print(solution.numDecodings("1*"))  # Output: 18
# print(solution.numDecodings("2*"))  # Output: 15
```

### Explanation of the Code:
- **Initialization**: `dp` array is initialized to handle base cases.
- **First Character Handling**: Special case handling for the first character to set up the initial condition for `dp[1]`.
- **DP Transition**: For each character in the string from the second onwards, check single and double character decoding possibilities and update the `dp` array accordingly.
- **Modulo Operation**: Each update to `dp[i]` is taken modulo \(10^9 + 7\) to keep the result within the bounds of integer arithmetic.

This solution efficiently computes the number of ways to decode the string, taking into account the complexity introduced by the '*' character.
