### 342. Power of Four

**Problem Description:**

Given an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.

An integer `n` is a power of four if there exists an integer `x` such that \( n = 4^x \).

**Example 1:**
```
Input: n = 16
Output: true
```

**Example 2:**
```
Input: n = 5
Output: false
```

**Example 3:**
```
Input: n = 1
Output: true
```

**Constraints:**
- \(-2^{31} \leq n \leq 2^{31} - 1\)

**Follow up:** Could you solve it without loops/recursion?

### Explanation (Like I'm 12):

Imagine you have a number and you want to check if it can be made by multiplying 4 by itself some number of times. For example, 16 can be made by multiplying 4 twice (4 * 4). We want to find out if a given number is like that.

### Solution:

To solve this problem without using loops or recursion, we can use mathematical properties and bit manipulation.

### Python Code:

```python
class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        if n <= 0:
            return False
        # Check if n is a power of 2 and only set at the correct position
        return (n & (n - 1)) == 0 and (n & 0x55555555) != 0
```

### Explanation of the Solution:

1. **Check if `n` is Positive:**
   - If `n` is less than or equal to 0, return `False` because negative numbers and zero cannot be powers of four.

2. **Power of Two Check:**
   - Use the condition `(n & (n - 1)) == 0` to check if `n` is a power of two. This works because powers of two in binary representation have exactly one bit set to 1 (e.g., `1`, `10`, `100`, etc.).

3. **Power of Four Check:**
   - Use the bitmask `0x55555555` to check if the set bit is in the correct position for a power of four. The binary representation of `0x55555555` is `01010101010101010101010101010101`, which helps ensure that the bit is in an odd position, corresponding to powers of four.

### Example Walkthrough:

Let's take the example `n = 16`:

- `16` in binary is `10000`.
- `16 & (16 - 1)` is `16 & 15`, which is `10000 & 01111 = 0`. This confirms it is a power of two.
- `16 & 0x55555555` is `10000 & 01010101010101010101010101010101 = 01010101010101010101010101010101`. This confirms it is in the correct position for a power of four.
- Therefore, the function returns `True`.

For `n = 5`:
- `5` in binary is `101`.
- `5 & (5 - 1)` is `5 & 4`, which is `101 & 100 = 100`. This is not equal to 0, so it is not a power of two.
- Therefore, the function returns `False`.

This approach efficiently checks if a number is a power of four without using loops or recursion.
