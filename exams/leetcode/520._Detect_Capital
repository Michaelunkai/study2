To determine if the usage of capitals in a word is correct based on the given rules, we can check for three cases:
1. All letters in the word are uppercase.
2. All letters in the word are lowercase.
3. Only the first letter in the word is uppercase and the rest are lowercase.

Here's the Python code to implement this logic:

```python
class Solution:
    def detectCapitalUse(self, word: str) -> bool:
        # Case 1: All letters are uppercase
        if word.isupper():
            return True
        
        # Case 2: All letters are lowercase
        if word.islower():
            return True
        
        # Case 3: Only the first letter is uppercase and the rest are lowercase
        if word[0].isupper() and word[1:].islower():
            return True
        
        # If none of the cases match, return False
        return False

# Example usage:
solution = Solution()
print(solution.detectCapitalUse("USA"))    # Output: True
print(solution.detectCapitalUse("leetcode"))  # Output: True
print(solution.detectCapitalUse("Google"))  # Output: True
print(solution.detectCapitalUse("FlaG"))    # Output: False
```

### Explanation:

1. **Check if All Letters are Uppercase**:
   - `word.isupper()` returns `True` if all characters in the word are uppercase.

2. **Check if All Letters are Lowercase**:
   - `word.islower()` returns `True` if all characters in the word are lowercase.

3. **Check if Only the First Letter is Uppercase and the Rest are Lowercase**:
   - `word[0].isupper()` checks if the first character is uppercase.
   - `word[1:].islower()` checks if the substring from the second character to the end is all lowercase.

4. **Return False**:
   - If none of the above conditions are met, return `False`.

This solution ensures that the function runs efficiently with a time complexity of O(n), where n is the length of the input string, because each of the string methods (`isupper`, `islower`) runs in linear time.
