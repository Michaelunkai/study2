### Problem: 485. Max Consecutive Ones

Given a binary array `nums`, we need to find the maximum number of consecutive 1's in the array.

### Approach

This problem can be solved using a simple linear scan of the array while maintaining a count of the current sequence of 1's and updating the maximum count whenever a 0 is encountered.

### Steps

1. Initialize two variables: `max_count` to store the maximum number of consecutive 1's found and `current_count` to store the count of the current sequence of 1's.
2. Iterate through the array:
   - If the current element is 1, increment the `current_count`.
   - If the current element is 0, update `max_count` with the maximum of `max_count` and `current_count`, then reset `current_count` to 0.
3. After the loop, perform a final update to `max_count` in case the array ends with a sequence of 1's.
4. Return `max_count`.

### Code Implementation

```python
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_count = 0
        current_count = 0
        
        for num in nums:
            if num == 1:
                current_count += 1
            else:
                max_count = max(max_count, current_count)
                current_count = 0
        
        # Final update in case the array ends with a sequence of 1's
        max_count = max(max_count, current_count)
        
        return max_count

# Example usage:
solution = Solution()
print(solution.findMaxConsecutiveOnes([1,1,0,1,1,1]))  # Output: 3
print(solution.findMaxConsecutiveOnes([1,0,1,1,0,1]))  # Output: 2
```

### Explanation

1. **Initialization**:
   - `max_count` is initialized to 0 to keep track of the maximum number of consecutive 1's found so far.
   - `current_count` is initialized to 0 to keep track of the current streak of consecutive 1's.

2. **Iterating through the array**:
   - For each element in `nums`:
     - If the element is 1, increment the `current_count`.
     - If the element is 0, update `max_count` with the maximum of `max_count` and `current_count`, and then reset `current_count` to 0.

3. **Final Update**:
   - After the loop, update `max_count` one last time to handle the case where the array ends with a sequence of 1's.

4. **Return the result**:
   - Return the value of `max_count` which now holds the maximum number of consecutive 1's in the array.

This solution ensures that we efficiently find the longest sequence of consecutive 1's in a single pass through the array.
