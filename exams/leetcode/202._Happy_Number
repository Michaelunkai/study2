### 202. Happy Number

**Problem Description:**

Write an algorithm to determine if a number `n` is happy.

A happy number is a number defined by the following process:
1. Starting with any positive integer, replace the number by the sum of the squares of its digits.
2. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
3. Those numbers for which this process ends in 1 are happy numbers.

Return `true` if `n` is a happy number, and `false` if not.

**Example 1:**
```
Input: n = 19
Output: true
Explanation:
1² + 9² = 82
8² + 2² = 68
6² + 8² = 100
1² + 0² + 0² = 1
```

**Example 2:**
```
Input: n = 2
Output: false
```

**Constraints:**
- 1 <= n <= 2³¹ - 1

### Explanation (Like I'm 12):

Imagine you have a special game where you take any number, split it into its digits, and replace the number with the sum of the squares of those digits. You keep doing this until you either get the number 1, which means you win, or you start repeating the same numbers over and over, which means you lose.

So, if you start with the number 19, you do this:
1. \(1^2 + 9^2 = 82\)
2. \(8^2 + 2^2 = 68\)
3. \(6^2 + 8^2 = 100\)
4. \(1^2 + 0^2 + 0^2 = 1\)

Since you got to 1, 19 is a happy number. But if you start with 2, you will never get to 1, and you'll just keep cycling through the same numbers, so 2 is not a happy number.

### Python Solution:

Here's how you can do it:

```python
class Solution:
    def isHappy(self, n: int) -> bool:
        def get_next(number):
            total_sum = 0
            while number > 0:
                digit = number % 10
                number = number // 10
                total_sum += digit * digit
            return total_sum

        seen = set()
        while n != 1 and n not in seen:
            seen.add(n)
            n = get_next(n)

        return n == 1
```

### Explanation of the Solution:

1. **Helper Function:** We define a helper function `get_next` that takes a number and returns the sum of the squares of its digits.
2. **Seen Set:** We use a set called `seen` to keep track of numbers we've already seen to detect cycles.
3. **Loop Until 1 or Cycle Detected:** We loop until `n` becomes 1 (happy) or we detect a cycle (not happy). 
4. **Return Result:** If `n` becomes 1, we return `true`, otherwise we return `false`.

In simpler terms, we keep replacing the number with the sum of the squares of its digits. If we ever see a number we've seen before, it means we're in a cycle and the number is not happy. If we get to 1, it means the number is happy.
