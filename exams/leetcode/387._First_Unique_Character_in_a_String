### 387. First Unique Character in a String

**Solution:**

```python
from collections import Counter

class Solution:
    def firstUniqChar(self, s: str) -> int:
        # Count the frequency of each character in the string
        char_count = Counter(s)
        
        # Iterate over the string and find the first character with a count of 1
        for index, char in enumerate(s):
            if char_count[char] == 1:
                return index
        
        # If no unique character is found, return -1
        return -1
```

### Explanation:

1. **Count the Frequency of Characters:**
   - Use the `Counter` from the `collections` module to count the frequency of each character in the string `s`.
   - `char_count` will be a dictionary where the keys are characters and the values are their respective counts.

2. **Find the First Unique Character:**
   - Iterate over the string `s` using `enumerate` to get both the index and the character.
   - For each character, check if its count in `char_count` is 1.
   - If a character with a count of 1 is found, return its index.

3. **Return -1 if No Unique Character Exists:**
   - If the loop completes without finding a unique character, return `-1`.

### Example Walkthrough:

1. **Example 1:**
   - Input: `s = "leetcode"`
   - `char_count = {'l': 1, 'e': 3, 't': 1, 'c': 1, 'o': 1, 'd': 1}`
   - The first character with a count of 1 is 'l' at index 0.
   - Output: `0`

2. **Example 2:**
   - Input: `s = "loveleetcode"`
   - `char_count = {'l': 2, 'o': 2, 'v': 1, 'e': 4, 't': 1, 'c': 1, 'd': 1}`
   - The first character with a count of 1 is 'v' at index 2.
   - Output: `2`

3. **Example 3:**
   - Input: `s = "aabb"`
   - `char_count = {'a': 2, 'b': 2}`
   - No character with a count of 1 exists.
   - Output: `-1`

This approach efficiently counts character frequencies and finds the first unique character in the string.
