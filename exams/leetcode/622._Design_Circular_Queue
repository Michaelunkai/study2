To implement a circular queue in Python, we need to ensure that we handle the circular nature of the queue. Here is a detailed implementation of the `MyCircularQueue` class:

```python
class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize the circular queue with a fixed size of k.
        """
        self.queue = [0] * k
        self.max_size = k
        self.front = -1
        self.rear = -1

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if self.isFull():
            return False
        if self.isEmpty():
            self.front = 0
        self.rear = (self.rear + 1) % self.max_size
        self.queue[self.rear] = value
        return True

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            return False
        if self.front == self.rear:
            self.front = -1
            self.rear = -1
        else:
            self.front = (self.front + 1) % self.max_size
        return True

    def Front(self) -> int:
        """
        Get the front item from the queue. If the queue is empty, return -1.
        """
        if self.isEmpty():
            return -1
        return self.queue[self.front]

    def Rear(self) -> int:
        """
        Get the last item from the queue. If the queue is empty, return -1.
        """
        if self.isEmpty():
            return -1
        return self.queue[self.rear]

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        return self.front == -1

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        return (self.rear + 1) % self.max_size == self.front


# Example usage:
# Initialize a queue with size 3
myCircularQueue = MyCircularQueue(3)

print(myCircularQueue.enQueue(1))  # return True
print(myCircularQueue.enQueue(2))  # return True
print(myCircularQueue.enQueue(3))  # return True
print(myCircularQueue.enQueue(4))  # return False
print(myCircularQueue.Rear())      # return 3
print(myCircularQueue.isFull())    # return True
print(myCircularQueue.deQueue())   # return True
print(myCircularQueue.enQueue(4))  # return True
print(myCircularQueue.Rear())      # return 4
```

### Explanation
1. **Initialization (`__init__`)**: The constructor initializes the circular queue with a fixed size `k`. The queue is represented as a list of size `k`, initialized with zeros. The `front` and `rear` pointers are initialized to -1, indicating an empty queue.

2. **Insert an element (`enQueue`)**: This method adds an element to the queue if it's not full. If the queue is empty, the `front` pointer is set to 0. The `rear` pointer is updated to the next position in a circular manner using modulo operation.

3. **Delete an element (`deQueue`)**: This method removes an element from the queue if it's not empty. If the queue becomes empty after the deletion, both `front` and `rear` pointers are reset to -1. Otherwise, the `front` pointer is updated to the next position in a circular manner.

4. **Get front item (`Front`)**: This method returns the front element of the queue. If the queue is empty, it returns -1.

5. **Get rear item (`Rear`)**: This method returns the last element of the queue. If the queue is empty, it returns -1.

6. **Check if the queue is empty (`isEmpty`)**: This method checks if the queue is empty by verifying if the `front` pointer is -1.

7. **Check if the queue is full (`isFull`)**: This method checks if the queue is full by comparing if the next position of `rear` (calculated in a circular manner) is equal to the `front` pointer.
