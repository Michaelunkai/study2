Problem Statement:
Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf is a node with no children.

Explanation:
Imagine you have a tree where each node can have up to two children. Your task is to find the shortest distance from the top (the root) of the tree to the nearest leaf node (a node with no children).

Think of it as finding the quickest way to reach a node that doesn't have any children.

Here's how to do it:

Start from the root (the top node).
If the current node has no children, youâ€™ve found a leaf, so note the depth.
Otherwise, move to the children of the current node and repeat the process.
Keep track of the smallest depth you encounter.
Python Solution:
python
Copy code
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val  # value of the node
        self.left = left  # left child
        self.right = right  # right child

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0  # if the tree is empty, depth is 0
        
        if not root.left and not root.right:
            return 1  # if the root is a leaf, depth is 1
        
        if not root.left:
            return self.minDepth(root.right) + 1  # if no left child, recurse on right
        
        if not root.right:
            return self.minDepth(root.left) + 1  # if no right child, recurse on left
        
        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1  # if both children exist, find the min depth between them and add 1 for the current node
Explanation of the Code:
TreeNode Class:

python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val  # value of the node
        self.left = left  # left child
        self.right = right  # right child
This defines a node in the binary tree with a value, a left child, and a right child.
Solution Class and Method:

python
Copy code
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0  # if the tree is empty, depth is 0
        if not root.left and not root.right:
            return 1  # if the root is a leaf, depth is 1
        if not root.left:
            return self.minDepth(root.right) + 1  # if no left child, recurse on right
        if not root.right:
            return self.minDepth(root.left) + 1  # if no right child, recurse on left
        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1  # if both children exist, find the min depth between them and add 1 for the current node
minDepth method finds the minimum depth of the binary tree.
if not root: Checks if the tree is empty. If it is, the depth is 0.
if not root.left and not root.right: Checks if the node is a leaf (no children). If it is, the depth is 1.
if not root.left: If there is no left child, recursively find the minimum depth of the right child and add 1.
if not root.right: If there is no right child, recursively find the minimum depth of the left child and add 1.
return min(self.minDepth(root.left), self.minDepth(root.right)) + 1: If both children exist, find the minimum depth of both subtrees, and add 1 for the current node.





