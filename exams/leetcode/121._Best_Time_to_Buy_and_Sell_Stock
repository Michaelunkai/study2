You have a list of prices where each price is the price of a stock on a given day. You want to maximize your profit by choosing a single day to buy the stock and a different day in the future to sell the stock. Your task is to find the maximum profit you can achieve. If you can't make any profit, return 0.

For example, if the prices are [7, 1, 5, 3, 6, 4], you can buy on day 2 (price = 1) and sell on day 5 (price = 6) to make a profit of 5.

Python Solution:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        
        min_price = float('inf')
        max_profit = 0
        
        for price in prices:
            if price < min_price:
                min_price = price
            elif price - min_price > max_profit:
                max_profit = price - min_price
        
        return max_profit
Explanation of the Code:
Function Signature:

def maxProfit(self, prices: List[int]) -> int:
Initial Check:

if not prices:
    return 0
If the list of prices is empty, return 0 because no transactions can be made.
Initialize Variables:

min_price = float('inf')
max_profit = 0
min_price is initialized to infinity to ensure any price will be lower.
max_profit is initialized to 0 since we haven't made any transactions yet.
Iterate Over Prices:

for price in prices:
    if price < min_price:
        min_price = price
    elif price - min_price > max_profit:
        max_profit = price - min_price
Loop through each price in the list.
If the current price is lower than min_price, update min_price.
If the difference between the current price and min_price is greater than max_profit, update max_profit.
Return the Result:

return max_profit
After iterating through all the prices, return the maximum profit found.
Summary:
Check if the list of prices is empty.
Initialize min_price to infinity and max_profit to 0.
Loop through each price in the list:
Update min_price if the current price is lower.
Update max_profit if the difference between the current price and min_price is greater.
Return the maximum profit found.
