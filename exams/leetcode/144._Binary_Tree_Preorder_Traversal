### Problem Statement (Explained Like You're 12):

You have a binary tree, which is like a family tree but each parent can have at most two children. Your job is to visit all the nodes of this tree in a specific order called "preorder traversal". In preorder traversal, you visit the root node first, then the left subtree, and finally the right subtree.

For example:
- If the tree looks like this:
  ```
      1
       \
        2
       /
      3
  ```
  The preorder traversal would be: [1, 2, 3].

### Python Solution (Iterative):

```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        
        stack, output = [root], []
        
        while stack:
            node = stack.pop()
            if node:
                output.append(node.val)
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left)
        
        return output
```

### Explanation of the Code:

1. **TreeNode Class**:
    ```python
    class TreeNode:
        def __init__(self, val=0, left=None, right=None):
            self.val = val
            self.left = left
            self.right = right
    ```

    - This defines a node in the binary tree with a value `val`, a left child `left`, and a right child `right`.

2. **Solution Class and Method**:
    ```python
    class Solution:
        def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
    ```

    - Define the `preorderTraversal` method which takes the root of the binary tree as input and returns a list of integers representing the preorder traversal.

3. **Initial Check**:
    ```python
    if not root:
        return []
    ```

    - If the tree is empty (root is `None`), return an empty list.

4. **Initialize Stack and Output List**:
    ```python
    stack, output = [root], []
    ```

    - Initialize a stack with the root node.
    - Initialize an empty list `output` to store the preorder traversal.

5. **Iterate Over the Stack**:
    ```python
    while stack:
        node = stack.pop()
        if node:
            output.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
    ```

    - While the stack is not empty, pop a node from the stack.
    - If the node is not `None`, append its value to the output list.
    - Push the right child to the stack (if it exists).
    - Push the left child to the stack (if it exists).

6. **Return the Result**:
    ```python
    return output
    ```

    - After iterating through all the nodes, return the output list which contains the preorder traversal.

### Summary:

1. Check if the tree is empty. If yes, return an empty list.
2. Initialize a stack with the root node and an empty list for the output.
3. While the stack is not empty, pop nodes from the stack and add their values to the output list. Push the right child first and then the left child to the stack.
4. Return the output list containing the preorder traversal.
