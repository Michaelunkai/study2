### 191. Number of 1 Bits

**Problem Description:**

Write a function that takes the binary representation of a positive integer and returns the number of '1' bits it has (also known as the Hamming weight).

**Example 1:**
```
Input: n = 11
Output: 3
Explanation: The input binary string 1011 has a total of three '1' bits.
```

**Example 2:**
```
Input: n = 128
Output: 1
Explanation: The input binary string 10000000 has a total of one '1' bit.
```

**Example 3:**
```
Input: n = 2147483645
Output: 30
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty '1' bits.
```

**Constraints:**
- The input must be a binary string of length 32.

**Follow up:** If this function is called many times, how would you optimize it?

### Explanation (Like I'm 12):

Imagine you have a string of 32 lights, where each light can be either on (1) or off (0). Your job is to count how many lights are on.

So if the string of lights is like this: `1011`

You count and find that three lights are on.

### Python Solution:

Here's a simple way to do it:

```python
class Solution:
    def hammingWeight(self, n: int) -> int:
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count
```

### Explanation of the Solution:

1. **Initialize Count:** We start with a count of 0.
2. **Loop Until n is Zero:** We loop while `n` is not zero.
3. **Check Least Significant Bit:** Each time, we check the least significant bit (rightmost bit) of `n` using `n & 1`.
4. **Add to Count:** If the least significant bit is 1, we add 1 to our count.
5. **Shift n Right:** We shift `n` to the right by 1 position to move the next bit to the rightmost position.
6. **Return Count:** After the loop, we have counted all the 1 bits in `n`.

In simpler terms, we're checking each bit in the number one by one, starting from the right. Each time we find a bit that's on (1), we add to our count. We keep shifting the number to the right until there are no more bits to check.
