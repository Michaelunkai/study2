## 172. Factorial Trailing Zeroes

### Problem Statement (Explained Like You're 12):

When you multiply a bunch of numbers together to get a really big number (like the factorial of a number), sometimes the result has zeros at the end. For example, 5! (which is 5 * 4 * 3 * 2 * 1) is 120, and it has one zero at the end. Your job is to figure out how many zeros are at the end of the result when you calculate the factorial of a number.

### Python Solution:

```python
class Solution:
    def trailingZeroes(self, n: int) -> int:
        count = 0
        while n > 0:
            n //= 5
            count += n
        return count
```

### Explanation of the Code:

1. **Function Signature**:
    ```python
    def trailingZeroes(self, n: int) -> int:
    ```

2. **Initialize Count**:
    ```python
    count = 0
    ```

    - Initialize a variable `count` to keep track of the number of trailing zeroes.

3. **Loop Until n is Greater Than 0**:
    ```python
    while n > 0:
    ```

    - Loop while `n` is greater than 0.

4. **Divide n by 5 and Add to Count**:
    ```python
    n //= 5
    count += n
    ```

    - Divide `n` by 5 (using integer division) and add the result to `count`.
    - This step counts how many multiples of 5, 25, 125, etc., are in `n`, since each contributes to a trailing zero.

5. **Return the Count**:
    ```python
    return count
    ```

    - Return the final count of trailing zeroes.

### Summary:

1. Initialize a variable `count` to 0 to keep track of the trailing zeroes.
2. Loop while `n` is greater than 0.
3. In each iteration, divide `n` by 5 and add the result to `count`.
4. Return the final count of trailing zeroes.

This method ensures that you correctly count all the factors of 5 in the factorial, which contribute to the trailing zeroes.
