To solve the problem of calculating the total number of seconds that Ashe is poisoned, you need to consider each attack's effect duration and ensure that overlapping durations are not double-counted. Here is the approach to solve this:

1. Initialize a variable to keep track of the total poisoned time.
2. Iterate through the list of attack times.
3. For each attack, calculate the interval it affects.
4. Check if this interval overlaps with the previous one. If it does, only count the non-overlapping part.
5. Update the end time of the current poison interval.
6. Return the total poisoned time.

Here's the implementation of this approach in Python:

```python
class Solution:
    def findPoisonedDuration(self, timeSeries: [int], duration: int) -> int:
        if not timeSeries:
            return 0
        
        total_time = 0
        end_time = 0
        
        for t in timeSeries:
            if t >= end_time:
                total_time += duration
            else:
                total_time += t + duration - end_time
            end_time = t + duration
        
        return total_time

# Example usage:
solution = Solution()
print(solution.findPoisonedDuration([1, 4], 2))  # Output: 4
print(solution.findPoisonedDuration([1, 2], 2))  # Output: 3
```

### Explanation:

- **Initialization**: `total_time` is used to accumulate the total time Ashe is poisoned. `end_time` keeps track of the end of the poison duration from the last attack.
- **Iteration**: For each attack time `t`:
  - If `t` is greater than or equal to `end_time`, it means the previous poison effect has ended, so add the full duration to `total_time`.
  - If `t` is less than `end_time`, it means the previous poison effect is still active, so add only the non-overlapping part (from `t` to `t + duration`).
  - Update `end_time` to `t + duration` for the next iteration.
  
This ensures that overlapping periods are not double-counted, resulting in the correct total duration of poison time.
