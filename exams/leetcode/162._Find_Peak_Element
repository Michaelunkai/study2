### Problem Statement (Explained Like You're 12):

You have a list of numbers, and you need to find a "peak" element. A peak element is one that is greater than its neighbors. If there are multiple peaks, you can return the index of any peak.

For example:
- In the list `[1, 2, 3, 1]`, the peak is `3`, so you return its index `2`.
- In the list `[1, 2, 1, 3, 5, 6, 4]`, there are two peaks `2` and `6`. You can return the index of either peak, which are `1` or `5`.

You need to find a solution that works in O(log n) time, which means you should use a binary search approach.

### Python Solution:

```python
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        
        while left < right:
            mid = (left + right) // 2
            if nums[mid] > nums[mid + 1]:
                right = mid
            else:
                left = mid + 1
        
        return left
```

### Explanation of the Code:

1. **Function Signature**:
    ```python
    def findPeakElement(self, nums: List[int]) -> int:
    ```

2. **Initialize Variables**:
    ```python
    left, right = 0, len(nums) - 1
    ```

    - Initialize `left` to 0 and `right` to the last index of the list.

3. **Binary Search Loop**:
    ```python
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1
    ```

    - While `left` is less than `right`, do the following:
        - Calculate `mid` as the average of `left` and `right`.
        - If the middle element `nums[mid]` is greater than `nums[mid + 1]`, it means the peak is on the left side, including `mid`. So, set `right` to `mid`.
        - Otherwise, the peak is on the right side, so set `left` to `mid + 1`.

4. **Return the Result**:
    ```python
    return left
    ```

    - When `left` equals `right`, it means we have found the peak element. Return `left` as the index of the peak element.

### Summary:

1. Initialize `left` and `right` pointers to the start and end of the list.
2. Use binary search to find the peak element:
    - Calculate the middle index.
    - If the middle element is greater than the next element, move the `right` pointer to the middle.
    - Otherwise, move the `left` pointer to `mid + 1`.
3. Return the index of the peak element when `left` equals `right`.
