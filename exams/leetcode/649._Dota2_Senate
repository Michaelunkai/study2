To solve the "Dota2 Senate" problem, we need to simulate the voting process. Each senator can either ban the voting rights of a senator from the opposing party or, if all remaining senators belong to the same party, announce victory for their party. 

### Approach:
1. **Use Queues**: We'll use two queues to keep track of the indices of Radiant ('R') and Dire ('D') senators.
2. **Simulate the Voting Process**:
   - At each step, compare the indices of the first senators in both queues.
   - The senator with the smaller index will ban the senator with the larger index and stay in the queue to vote again in the next round, while the other senator gets removed.
   - Increment the index of the senator who gets to vote again by `n` (the length of the string) to simulate the circular nature of the senate sessions.
3. **End Condition**: The process continues until one of the queues is empty. If the Radiant queue is empty, Dire wins and vice versa.

Here's the implementation:

```python
from collections import deque

class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        n = len(senate)
        radiant = deque()
        dire = deque()
        
        # Fill the queues with the indices of the respective parties
        for i in range(n):
            if senate[i] == 'R':
                radiant.append(i)
            else:
                dire.append(i)
        
        # Simulate the voting process
        while radiant and dire:
            r_index = radiant.popleft()
            d_index = dire.popleft()
            
            if r_index < d_index:
                # Radiant votes out Dire
                radiant.append(r_index + n)
            else:
                # Dire votes out Radiant
                dire.append(d_index + n)
        
        # Determine the winner
        return "Radiant" if radiant else "Dire"

# Example usage:
solution = Solution()
print(solution.predictPartyVictory("RD"))    # Output: "Radiant"
print(solution.predictPartyVictory("RDD"))   # Output: "Dire"
```

### Explanation:
- **Initialization**: We initialize two deques (`radiant` and `dire`) to store the indices of the Radiant and Dire senators.
- **Filling the Queues**: We iterate through the `senate` string and populate the queues based on the party of each senator.
- **Voting Simulation**:
  - We continuously compare the front elements of both queues.
  - The senator with the smaller index bans the other and re-enters the queue with an incremented index to represent their next turn.
  - This process continues until one of the queues is empty.
- **Determining the Winner**: The party with remaining senators in their queue is declared the winner.

This approach ensures an efficient simulation of the voting process with a time complexity of \(O(n)\), where \(n\) is the length of the `senate` string, due to the linear pass and deque operations.
