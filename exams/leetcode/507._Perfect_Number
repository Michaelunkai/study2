To determine if a given number `n` is a perfect number, we need to find the sum of its positive divisors (excluding `n` itself) and check if the sum equals `n`. 

A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. For example, 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28.

Here is the plan for solving the problem:

1. **Edge Case**: If `n` is less than or equal to 1, return `false` because 1 is not a perfect number and there are no positive divisors other than itself.
2. **Finding Divisors**: Iterate from 1 to the square root of `n` to find all divisors. For each divisor `i`, if `i` divides `n` evenly, then both `i` and `n/i` are divisors.
3. **Summing Divisors**: Sum these divisors, ensuring that we do not include `n` itself in the sum.
4. **Comparison**: Check if the sum of the divisors equals `n`.

Here's the Python code implementing the above logic:

```python
class Solution:
    def checkPerfectNumber(self, num: int) -> bool:
        if num <= 1:
            return False
        
        sum_divisors = 1  # Start with 1 since 1 is a divisor for all positive integers
        sqrt_num = int(num**0.5)
        
        for i in range(2, sqrt_num + 1):
            if num % i == 0:
                sum_divisors += i
                if i != num // i:
                    sum_divisors += num // i
        
        return sum_divisors == num

# Example usage:
solution = Solution()
print(solution.checkPerfectNumber(28))  # Output: True
print(solution.checkPerfectNumber(7))   # Output: False
```

### Explanation:

1. **Edge Case Check**:
   - If `num <= 1`, return `False` because numbers less than or equal to 1 cannot be perfect numbers.

2. **Initialize Sum of Divisors**:
   - Start `sum_divisors` with 1 because 1 is a divisor for all positive integers.

3. **Finding Divisors**:
   - Iterate from 2 to the integer square root of `num` (inclusive). For each `i`:
     - If `i` is a divisor (`num % i == 0`), add `i` to `sum_divisors`.
     - Also, add the corresponding divisor `num // i` to `sum_divisors` if it is different from `i` (to avoid adding the square root twice).

4. **Compare Sum of Divisors**:
   - After iterating through all possible divisors, check if the sum of the divisors is equal to `num`.

This approach ensures an efficient check for perfect numbers by leveraging the properties of divisors and the square root optimization.
