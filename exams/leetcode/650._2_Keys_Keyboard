To solve the problem of getting exactly `n` characters 'A' on the screen with the minimum number of operations, we can use a dynamic programming approach. The idea is to use the properties of factors, since the optimal way to build up to `n` 'A's is to use the largest possible groupings (factors) to minimize the number of operations.

### Approach:
1. **Dynamic Programming Table**: We'll use a DP array where `dp[i]` represents the minimum number of operations needed to get exactly `i` 'A's on the screen.
2. **Factors**: For each `i`, we need to consider the factors of `i`. If `j` is a factor of `i`, then we can build up `i` from `j` by copying all `j` 'A's and pasting `(i/j - 1)` times. Hence, `dp[i] = dp[j] + (i/j)`.
3. **Initialization**: Initialize `dp[1]` to 0 because if `n` is 1, no operations are needed since we start with 1 'A' already on the screen.

Here's the implementation:

```python
class Solution:
    def minSteps(self, n: int) -> int:
        if n == 1:
            return 0

        dp = [float('inf')] * (n + 1)
        dp[1] = 0

        for i in range(2, n + 1):
            for j in range(1, i // 2 + 1):
                if i % j == 0:
                    dp[i] = min(dp[i], dp[j] + (i // j))

        return dp[n]

# Example usage:
solution = Solution()
print(solution.minSteps(3))  # Output: 3
print(solution.minSteps(1))  # Output: 0
print(solution.minSteps(4))  # Output: 4 (1 copy and 3 pastes)
```

### Explanation:
1. **Initialization**:
   - `dp[1] = 0` because we already have one 'A' on the screen and no operations are needed.
   - For all other `i`, initialize `dp[i]` to infinity (`float('inf')`), indicating that we need to find the minimum number of operations.
2. **Dynamic Programming Loop**:
   - For each `i` from 2 to `n`, iterate through all possible factors `j` of `i`.
   - If `j` is a factor of `i`, then update `dp[i]` with the minimum value between the current `dp[i]` and `dp[j] + (i // j)`.
   - The term `dp[j] + (i // j)` represents the number of operations needed to get `j` 'A's (which is `dp[j]`), plus the number of paste operations needed to reach `i` 'A's from `j` 'A's.
3. **Return the Result**:
   - Finally, return `dp[n]`, which contains the minimum number of operations needed to get exactly `n` 'A's on the screen.

This approach ensures that we find the minimum number of operations efficiently using the properties of factors and dynamic programming. The time complexity is \(O(n \log n)\) because for each number up to `n`, we are iterating through its factors, which is optimized by considering only up to `i // 2 + 1`.
