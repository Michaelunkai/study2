Problem Statement:
Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one.

Explanation:
Imagine you have a tree where each node can have up to two children. This tree can be unbalanced, meaning one side is much taller than the other. Your task is to check if the tree is balanced, meaning no part of the tree is too tall compared to the other parts. Specifically, for every node in the tree, the height difference between its left and right subtrees should be no more than one.

To do this:

You will start at the root of the tree.
For each node, you will calculate the height of its left and right subtrees.
If the height difference is more than one for any node, the tree is not balanced.
If you successfully check all nodes without finding any large differences, the tree is balanced.
Python Solution:
 
 
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val  # node value
        self.left = left  # left child
        self.right = right  # right child

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        # Helper function to check balance and calculate height
        def check_balance(node):
            if not node:
                return 0  # base case: empty node has height 0
            
            left_height = check_balance(node.left)  # height of left subtree
            if left_height == -1:
                return -1  # left subtree is unbalanced
            
            right_height = check_balance(node.right)  # height of right subtree
            if right_height == -1:
                return -1  # right subtree is unbalanced
            
            if abs(left_height - right_height) > 1:
                return -1  # current node is unbalanced
            
            return max(left_height, right_height) + 1  # height of the node
        
        return check_balance(root) != -1  # check if root is balanced
Explanation of the Code:
TreeNode Class:

 
 
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val  # node value
        self.left = left  # left child
        self.right = right  # right child
Defines a node of the binary tree with a value, left child, and right child.
Solution Class and Method:

 
 
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        # Helper function to check balance and calculate height
        def check_balance(node):
            if not node:
                return 0  # base case: empty node has height 0
            
            left_height = check_balance(node.left)  # height of left subtree
            if left_height == -1:
                return -1  # left subtree is unbalanced
            
            right_height = check_balance(node.right)  # height of right subtree
            if right_height == -1:
                return -1  # right subtree is unbalanced
            
            if abs(left_height - right_height) > 1:
                return -1  # current node is unbalanced
            
            return max(left_height, right_height) + 1  # height of the node
        
        return check_balance(root) != -1  # check if root is balanced
isBalanced method checks if the binary tree is balanced.
check_balance is a helper function that:
Returns 0 for an empty node (base case).
Recursively calculates the height of the left and right subtrees.
Checks if any subtree is unbalanced (returns -1 if unbalanced).
Returns the height of the current node if balanced.
check_balance(root) != -1 ensures the tree is balanced starting from the root.
