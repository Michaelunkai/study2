### 292. Nim Game

**Problem Description:**

You are playing the following Nim Game with your friend:

- Initially, there is a heap of stones on the table.
- You and your friend will alternate taking turns, and you go first.
- On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
- The one who removes the last stone is the winner.

Given `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.

**Example 1:**
```
Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
In all outcomes, your friend wins.
```

**Example 2:**
```
Input: n = 1
Output: true
```

**Example 3:**
```
Input: n = 2
Output: true
```

**Constraints:**

- `1 <= n <= 2^31 - 1`

### Explanation (Like I'm 12):

Imagine you and your friend are playing a game where you take turns to pick up 1 to 3 stones from a pile. You want to make sure that you are the one to pick up the last stone to win. The trick is to know that if there are 4 stones left when it's your turn, no matter what you do, your friend will always win because they will be able to pick up the last stone.

So, if the number of stones is a multiple of 4, you will always lose if both you and your friend play the best moves. If itâ€™s not a multiple of 4, you can always adjust your moves to ensure you win.

### Solution:

If `n` is a multiple of 4, return `false` because you will lose if both play optimally. Otherwise, return `true`.

### Python Code:

```python
class Solution:
    def canWinNim(self, n: int) -> bool:
        return n % 4 != 0
```

### Explanation of the Solution:

1. **Modulo Operation:**
   - Use the modulo operation to check if `n` is a multiple of 4.
   - If `n % 4 == 0`, then it's a multiple of 4 and you will lose, so return `false`.
   - Otherwise, return `true` because you can always win by making sure that you leave a multiple of 4 for your friend.

### Example Walkthrough:

- **Example 1:**
  - `n = 4`
  - `4 % 4 == 0` so return `false`.

- **Example 2:**
  - `n = 1`
  - `1 % 4 != 0` so return `true`.

- **Example 3:**
  - `n = 2`
  - `2 % 4 != 0` so return `true`.

This solution ensures you determine the winner correctly based on the number of stones left in the pile.
