### 389. Find the Difference

**Solution:**

```python
from collections import Counter

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        # Count the frequency of each character in both strings
        count_s = Counter(s)
        count_t = Counter(t)
        
        # Find the character with a frequency difference
        for char in count_t:
            if count_t[char] != count_s[char]:
                return char
```

### Explanation:

1. **Count the Frequency of Characters:**
   - Use the `Counter` from the `collections` module to count the frequency of each character in both strings `s` and `t`.

2. **Compare Frequencies:**
   - Iterate over the characters in `count_t`.
   - For each character, check if its frequency in `count_t` differs from its frequency in `count_s`.
   - The character with a frequency difference is the one that was added to `t`.

### Example Walkthrough:

1. **Example 1:**
   - Input: `s = "abcd"`, `t = "abcde"`
   - `count_s = {'a': 1, 'b': 1, 'c': 1, 'd': 1}`
   - `count_t = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}`
   - The character 'e' has a frequency of 1 in `count_t` but 0 in `count_s`.
   - Output: `"e"`

2. **Example 2:**
   - Input: `s = ""`, `t = "y"`
   - `count_s = {}`
   - `count_t = {'y': 1}`
   - The character 'y' has a frequency of 1 in `count_t` but 0 in `count_s`.
   - Output: `"y"`

### Alternative Solution with XOR:

Another approach is to use the XOR operation. The idea is that XORing all the characters in both strings will cancel out all the characters that appear an even number of times, leaving only the added character.

```python
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        result = 0
        for char in s + t:
            result ^= ord(char)
        return chr(result)
```

### Explanation of the XOR Solution:

1. **Initialize Result:**
   - Initialize a variable `result` to 0.

2. **XOR All Characters:**
   - Concatenate `s` and `t` and iterate over the combined string.
   - XOR the ASCII value of each character with `result`.

3. **Return the Result:**
   - The `result` will hold the ASCII value of the added character. Convert it back to a character using `chr(result)`.

### Example Walkthrough for XOR:

1. **Example 1:**
   - Input: `s = "abcd"`, `t = "abcde"`
   - `result = 0 ^ ord('a') ^ ord('b') ^ ord('c') ^ ord('d') ^ ord('a') ^ ord('b') ^ ord('c') ^ ord('d') ^ ord('e')`
   - All characters except 'e' cancel out, so `result = ord('e')`.
   - Output: `"e"`

2. **Example 2:**
   - Input: `s = ""`, `t = "y"`
   - `result = 0 ^ ord('y')`
   - Output: `"y"`

Both solutions are efficient and solve the problem correctly. The XOR solution is particularly elegant and runs in constant space.
