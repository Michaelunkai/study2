To solve the problem of finding the diameter of a binary tree, we need to calculate the longest path between any two nodes in the tree. This path can go through the root or might be confined to one of the subtrees.

Here's the plan:

1. Use a recursive function to compute the height of each subtree.
2. During the recursive calls, keep track of the longest path found.
3. The diameter of the tree is the maximum value of the path found during the recursion.

The height of a node is defined as the number of edges on the longest path from the node to a leaf. The diameter can be found by considering the sum of the heights of the left and right subtrees for each node.

Here is the Python code implementing this approach:

```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.diameter = 0
        
        def height(node):
            if not node:
                return 0
            left_height = height(node.left)
            right_height = height(node.right)
            
            # The path through the current node is the sum of the heights of left and right subtrees
            self.diameter = max(self.diameter, left_height + right_height)
            
            # Return the height of the tree rooted at the current node
            return 1 + max(left_height, right_height)
        
        height(root)
        return self.diameter

# Example usage:
# Constructing the binary tree [1,2,3,4,5]
#         1
#        / \
#       2   3
#      / \
#     4   5
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

solution = Solution()
print(solution.diameterOfBinaryTree(root))  # Output: 3
```

### Explanation:

1. **Class Definition**: A `TreeNode` class defines the structure of each node in the tree.
2. **Solution Class**: The `Solution` class contains the `diameterOfBinaryTree` method.
3. **Height Function**: The `height` function is a helper that computes the height of the tree rooted at the given node and updates the diameter.
    - It recursively calculates the height of the left and right subtrees.
    - It updates the diameter with the maximum value of the current diameter and the sum of the heights of the left and right subtrees.
4. **Return Diameter**: Finally, the method returns the diameter found.

This approach ensures that we traverse each node once, resulting in a time complexity of O(N), where N is the number of nodes in the tree. The space complexity is O(H) due to the recursion stack, where H is the height of the tree.
