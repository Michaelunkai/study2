### 225. Implement Stack using Queues

**Problem Description:**

Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `pop`, `top`, and `empty`).

Implement the `MyStack` class:

- `void push(int x)` Pushes element x to the top of the stack.
- `int pop()` Removes the element on the top of the stack and returns it.
- `int top()` Returns the element on the top of the stack.
- `boolean empty()` Returns true if the stack is empty, false otherwise.

**Notes:**

- You must use only standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.
- Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.

**Example:**
```
Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return false
```

**Constraints:**

- 1 <= x <= 9
- At most 100 calls will be made to `push`, `pop`, `top`, and `empty`.
- All the calls to `pop` and `top` are valid.

**Follow-up:** Can you implement the stack using only one queue?

### Explanation (Like I'm 12):

Imagine you have a basket (queue) and you want to use it like a stack. A stack is like a pile of plates where you add and remove plates from the top. To do this with a basket, we need to do a little trick because normally we can only add items to the back and take items from the front of the basket.

### Python Solution:

Here's how you can do it with two queues:

```python
from collections import deque

class MyStack:

    def __init__(self):
        self.q1 = deque()
        self.q2 = deque()

    def push(self, x: int) -> None:
        self.q1.append(x)

    def pop(self) -> int:
        while len(self.q1) > 1:
            self.q2.append(self.q1.popleft())
        top_element = self.q1.popleft()
        self.q1, self.q2 = self.q2, self.q1
        return top_element

    def top(self) -> int:
        while len(self.q1) > 1:
            self.q2.append(self.q1.popleft())
        top_element = self.q1.popleft()
        self.q2.append(top_element)
        self.q1, self.q2 = self.q2, self.q1
        return top_element

    def empty(self) -> bool:
        return not self.q1

# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
```

### Explanation of the Solution:

1. **Initialization:**
    - We use two queues `q1` and `q2`. Initially, both are empty.

2. **Push Operation:**
    - When we push an element `x`, we simply add it to `q1`.

3. **Pop Operation:**
    - To pop an element, we move all elements except the last one from `q1` to `q2`.
    - The last element in `q1` is the top of the stack, so we remove and return it.
    - We then swap `q1` and `q2` to prepare for the next operation.

4. **Top Operation:**
    - To get the top element, we do the same as `pop`, but after getting the last element, we put it back into `q2` to keep the stack unchanged.
    - We then swap `q1` and `q2`.

5. **Empty Operation:**
    - To check if the stack is empty, we simply check if `q1` is empty.

In simpler terms, we use two baskets (queues) to simulate the behavior of a stack. When we need to get the top element or remove it, we move elements between the two baskets until we get to the one we want. This way, we can make sure the last added element is always on top, just like a stack.
