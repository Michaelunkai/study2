To solve the problem of counting palindromic substrings in a given string `s`, we can use a technique called "Expand Around Center". This technique involves checking each possible center of a palindrome and expanding around it to count all palindromic substrings.

Here's the step-by-step approach:

1. **Consider Each Character and Each Pair of Adjacent Characters as Centers**: This is because palindromes can have either a single center (odd-length palindromes) or a pair of centers (even-length palindromes).
2. **Expand Around Each Center**: For each center, expand outwards while the characters on both sides are equal, and count each valid palindrome.

Here's the implementation in Python:

```python
class Solution:
    def countSubstrings(self, s: str) -> int:
        def expand_around_center(left: int, right: int) -> int:
            count = 0
            while left >= 0 and right < len(s) and s[left] == s[right]:
                count += 1
                left -= 1
                right += 1
            return count
        
        count_palindromes = 0
        for i in range(len(s)):
            # Odd-length palindromes (single character center)
            count_palindromes += expand_around_center(i, i)
            # Even-length palindromes (pair of characters center)
            count_palindromes += expand_around_center(i, i + 1)
        
        return count_palindromes

# Example usage:
solution = Solution()
print(solution.countSubstrings("abc"))  # Output: 3
print(solution.countSubstrings("aaa"))  # Output: 6
```

### Explanation:
1. **Helper Function `expand_around_center`**: This function takes two indices (`left` and `right`) and expands outwards to count the number of palindromic substrings with the given center.
2. **Counting Palindromes**: We iterate through each character in the string and treat it as the center of an odd-length palindrome. We also treat each pair of adjacent characters as the center of an even-length palindrome.
3. **Return the Total Count**: The total count of palindromic substrings is returned.

### Examples:
- For the input `"abc"`, the palindromic substrings are `"a"`, `"b"`, and `"c"`, so the output is `3`.
- For the input `"aaa"`, the palindromic substrings are `"a"`, `"a"`, `"a"`, `"aa"`, `"aa"`, and `"aaa"`, so the output is `6`.

This approach ensures that we consider all possible palindromic substrings and count them efficiently with a time complexity of \(O(n^2)\), which is acceptable given the constraints.
