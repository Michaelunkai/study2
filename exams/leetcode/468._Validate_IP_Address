### Solution for LeetCode Problem: 468. Validate IP Address

```python
class Solution:
    def validIPAddress(self, queryIP: str) -> str:
        def isIPv4(s):
            parts = s.split('.')
            if len(parts) != 4:
                return False
            for part in parts:
                if not part.isdigit() or not 0 <= int(part) <= 255 or (part[0] == '0' and len(part) > 1):
                    return False
            return True
        
        def isIPv6(s):
            parts = s.split(':')
            if len(parts) != 8:
                return False
            hexdigits = '0123456789abcdefABCDEF'
            for part in parts:
                if len(part) == 0 or len(part) > 4 or any(c not in hexdigits for c in part):
                    return False
            return True
        
        if isIPv4(queryIP):
            return "IPv4"
        elif isIPv6(queryIP):
            return "IPv6"
        else:
            return "Neither"
```

### Explanation:

1. **Helper Function for IPv4**:
   - `isIPv4(s)`: This function checks if a given string `s` is a valid IPv4 address.
     - Split the string by periods (`.`). If the resulting list doesn't have exactly 4 parts, it's not a valid IPv4.
     - For each part, check if:
       - It is a digit.
       - It is within the range 0 to 255.
       - It does not have leading zeros unless it's exactly '0'.
     - If all checks pass, return True. Otherwise, return False.

2. **Helper Function for IPv6**:
   - `isIPv6(s)`: This function checks if a given string `s` is a valid IPv6 address.
     - Split the string by colons (`:`). If the resulting list doesn't have exactly 8 parts, it's not a valid IPv6.
     - For each part, check if:
       - Its length is between 1 and 4.
       - It consists only of valid hexadecimal digits (0-9, a-f, A-F).
     - If all checks pass, return True. Otherwise, return False.

3. **Main Function**:
   - Call the helper function `isIPv4` with the input `queryIP`.
     - If it returns True, return "IPv4".
   - Otherwise, call the helper function `isIPv6` with the input `queryIP`.
     - If it returns True, return "IPv6".
   - If neither helper function returns True, return "Neither".

### Examples:

- **Example 1**:
  ```plaintext
  Input: queryIP = "172.16.254.1"
  Output: "IPv4"
  Explanation: This is a valid IPv4 address, return "IPv4".
  ```

- **Example 2**:
  ```plaintext
  Input: queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
  Output: "IPv6"
  Explanation: This is a valid IPv6 address, return "IPv6".
  ```

- **Example 3**:
  ```plaintext
  Input: queryIP = "256.256.256.256"
  Output: "Neither"
  Explanation: This is neither a IPv4 address nor a IPv6 address.
  ```
