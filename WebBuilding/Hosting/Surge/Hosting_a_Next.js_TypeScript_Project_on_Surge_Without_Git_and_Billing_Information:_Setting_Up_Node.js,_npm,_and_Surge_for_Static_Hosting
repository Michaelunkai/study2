### **Complete Step-by-Step Guide to Hosting a Next.js TypeScript Project on Surge Without Git and Billing Information: Setting Up Node.js, npm, and Surge for Static Hosting**

---

In this detailed guide, you will learn how to set up a **Next.js TypeScript** project and deploy it as a **static website** using **Surge**, a free static site hosting platform. We'll walk through every step, from ensuring Node.js and npm are installed to exporting and deploying your Next.js app using Surge without requiring Git or billing information.

---

### **Step 1: Install Node.js and npm on Ubuntu**

Ensure you have **Node.js** and **npm** installed on your Ubuntu system. Run the following commands to install them if theyâ€™re missing:

  
sudo apt update
sudo apt install nodejs npm -y

To verify that Node.js and npm are installed, check their versions:

  
node -v
npm -v

These commands should output the versions of Node.js and npm if they are installed correctly.

---

### **Step 2: Install Surge CLI Globally for Static Site Hosting**

Surge is a free CLI tool that allows you to deploy static websites quickly and easily. Install Surge globally using npm:

  
sudo npm install --global surge

After installation, check the version of Surge to confirm it's installed:

  
surge --version

---

### **Step 3: Navigate to Your Next.js TypeScript Project Directory**

Change the working directory to the folder where your Next.js TypeScript project is located. Use the following command:

  
cd /mnt/c/study/programming/frontend/javascript/typescript/projects/notebook/2

This is the root directory of your project, containing files like `package.json`, `tsconfig.json`, etc.

---

### **Step 4: Install Project Dependencies Using npm**

Before you can build or export your project, ensure that all the required dependencies are installed. Use npm to install all the dependencies specified in your `package.json` file:

  
npm install

This will install everything your project needs, such as Next.js, React, TailwindCSS, and any other dependencies specified in the `package.json`.

---

### **Step 5: Add the `export` Script to Your `package.json` for Static Export**

In order to export your Next.js app as static files (which is necessary for Surge hosting), you need to add an `export` script to your `package.json`. This script tells Next.js to export the project as static HTML files.

Update your `package.json` by adding the `export` script as shown below:

 json
{
  "name": "2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "export": "next build && next export",  // This line added for exporting the project
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.441.0",
    "next": "14.2.11",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.2",
    "tailwind -animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.11",
    "post ": "^8",
    "tailwind ": "^3.4.1",
    "typescript": "^5"
  }
}

Adding the `export` script allows you to generate static HTML files from your Next.js project that Surge can host.

---

### **Step 6: Build and Export Your Next.js TypeScript Project as Static Files**

Now that the export script is added, you can build and export your project to static HTML files that Surge will be able to serve. Run the following commands:

1. **Build the project**:
     
   npm run build

2. **Export the project as static files**:
     
   npm run export

This will generate an `out` directory in your project, which will contain all the static files (HTML, CSS, JavaScript, etc.).

---

### **Step 7: Deploy the Static Files to Surge**

Now that you have the static files ready in the `out` directory, you can deploy the project to Surge.

Run the following command to deploy your project:

  
npx surge /mnt/c/study/programming/frontend/javascript/typescript/projects/notebook/2/out

- **Note**: Make sure to point Surge to the `out` directory, which contains the exported static files.
- **Authentication**: If this is your first time using Surge, it will ask you to log in or create an account. You can register using your email address and create a password.

Once logged in, Surge will prompt you to choose a domain name. You can use a Surge subdomain (like `michafedronotebook.surge.sh`) or a custom domain if you have one.

---

### **Step 8: Access Your Deployed Static Website**

After the deployment is successful, Surge will provide a URL for your website, such as:

  
https://michafedronotebook.surge.sh

You can visit this URL in your browser to see your project live on the web.

---

### **Step 9: Troubleshooting Common Errors**

If you encounter a "Page not found" error or any other issues, here are a few things to check:

- **Ensure Static Files Are Correct**: Make sure the `next export` command generated the correct static files (such as `index.html`) inside the `out` directory.
- **Correct Directory**: Ensure you are deploying the correct `out` directory containing the exported static files, not the `.next` directory.
- **Build Errors**: If there were any errors during the `build` or `export` process, check the console logs to resolve them.

---

### **Step 10: Redeploy Updates**

If you make changes to your project and want to update your live site, follow these steps:

1. Rebuild and export the project:
     
   npm run build
   npm run export

2. Redeploy the `out` directory to Surge:
     
   npx surge /mnt/c/study/programming/frontend/javascript/typescript/projects/notebook/2/out

This will update your live project with the latest changes.

---

### **Conclusion**

By following this guide, you will successfully deploy your **Next.js TypeScript** project as a **static website** using **Surge**. This method is easy, requires no billing information or Git integration, and provides a fast and effective way to get your project online. If you encounter any issues, the most common problems relate to static file generation or pointing Surge to the wrong directory, which can be fixed by ensuring that the `next export` command runs correctly and generates an `out` directory.

Let me know if you have any questions or run into any issues during the process!
