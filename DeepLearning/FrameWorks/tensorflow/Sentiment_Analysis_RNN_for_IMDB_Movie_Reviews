Sentiment Analysis with Recurrent Neural Networks (Fixed)
Prepare the Dataset:
We'll use the IMDB movie reviews dataset, containing text reviews labeled as positive or negative.

 
 
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load the IMDB movie reviews dataset
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)

# Preprocess the data
max_length = 200
X_train = pad_sequences(X_train, maxlen=max_length)
X_test = pad_sequences(X_test, maxlen=max_length)
Define the Model:
We'll use an RNN with LSTM cells.

 
 
model = Sequential([
    Embedding(input_dim=10000, output_dim=128, input_length=max_length),
    LSTM(128),
    Dense(1, activation='sigmoid')
])
Compile the Model:

 
 
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])
Train the Model:

 
 
model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))
Eva te the Model:

 
 
test_loss, test_accuracy = model.eva te(X_test, y_test)
print(f"Test Accuracy: {test_accuracy}")
Complete code block:

 
 
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load the IMDB movie reviews dataset
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)

# Preprocess the data
max_length = 200
X_train = pad_sequences(X_train, maxlen=max_length)
X_test = pad_sequences(X_test, maxlen=max_length)

# Define the model
model = Sequential([
    Embedding(input_dim=10000, output_dim=128, input_length=max_length),
    LSTM(128),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

# Eva te the model
test_loss, test_accuracy = model.eva te(X_test, y_test)
print(f"Test Accuracy: {test_accuracy}")
