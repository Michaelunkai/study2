# Tutorial: Understanding Convolutional Layers in PyTorch on Ubuntu

## Prerequisites
1. Ubuntu system
2. Python installed (version 3.6 or above)
3. PyTorch installed

## Step 1: Install PyTorch

Open a terminal and run the following command to install PyTorch:

  
pip install torch torchvision

## Step 2: Import Necessary Libraries

Create a new Python file, for example, `conv_layer_example.py`, and start by importing the necessary libraries:

  
import torch
import torch.nn as nn
import torch.nn.functional as F

## Step 3: Define a Convolutional Neural Network (CNN)

Define a simple CNN model with convolutional layers. In this example, we'll create a basic model with one convolutional layer.

  
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        # Define a convolutional layer
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=3, stride=1, padding=1)
    
    def forward(self, x):
        # Apply convolutional layer and ReLU activation
        x = F.relu(self.conv1(x))
        return x

# Instantiate the model
model = SimpleCNN()
print(model)

## Step 4: Create an Input Tensor

Create a dummy input tensor to pass through the network. This tensor should have the shape `[batch_size, channels, height, width]`.

  
# Create a dummy input tensor with shape [1, 1, 28, 28]
input_tensor = torch.randn(1, 1, 28, 28)

# Print the input tensor shape
print("Input  ape:", input_tensor. ape)

## Step 5: Pass the Input Tensor Through the Model

Pass the input tensor through the model and print the output shape to understand how the convolutional layer transforms the input.

  
# Pass the input tensor through the model
output_tensor = model(input_tensor)

# Print the output tensor shape
print("   ape:", output_tensor. ape)

## Step 6: Run the Script

Save the `conv_layer_example.py` file and run it in your terminal:

  
  conv_layer_example.py

## Full Code

Here's the complete code for the example:

  
import torch
import torch.nn as nn
import torch.nn.functional as F

class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        # Define a convolutional layer
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=3, stride=1, padding=1)
    
    def forward(self, x):
        # Apply convolutional layer and ReLU activation
        x = F.relu(self.conv1(x))
        return x

# Instantiate the model
model = SimpleCNN()
print(model)

# Create a dummy input tensor with shape [1, 1, 28, 28]
input_tensor = torch.randn(1, 1, 28, 28)

# Print the input tensor shape
print("Input  ape:", input_tensor. ape)

# Pass the input tensor through the model
output_tensor = model(input_tensor)

# Print the output tensor shape
print("   ape:", output_tensor. ape)

By following this tutorial, you should have a basic understanding of how to define and use convolutional layers in PyTorch on an Ubuntu system.
