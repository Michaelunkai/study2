## Tutorial: Step-by-Step Guide to Set Up and Use LokiJS for In-Memory Database Operations in Ubuntu

### Overview
This tutorial will guide you through setting up LokiJS, an in-memory database, and demonstrate how to use it for basic database operations. LokiJS is a lightweight JavaScript-based database ideal for applications requiring fast data access without a persistent storage layer.

### Prerequisites
- Ubuntu (any version)
- Node.js installed on your system

### Step 1: Install Node.js
If you don't have Node.js installed, you can install it using the following commands:

  
sudo apt update
sudo apt install -y nodejs npm

Verify the installation by checking the version of Node.js:

  
node -v
npm -v

### Step 2: Create a New Project Directory
Create a new directory for your LokiJS project and navigate into it:

  
mkdir lokijs-demo
cd lokijs-demo

### Step 3: Initialize a New Node.js Project
Initialize a new Node.js project by creating a `package.json` file:

  
npm init -y

### Step 4: Install LokiJS
Install LokiJS using npm:

  
npm install lokijs

### Step 5: Create a Basic LokiJS Database Script
Create a new file named `index.js` to write your LokiJS script:

  
nano index.js

In the `index.js` file, add the following code to set up a basic LokiJS database and perform some operations:

 javascript
const loki = require('lokijs');

// Create a new LokiJS database
const db = new loki('example.db');

// Create a collection
const users = db.addCollection('users');

// Insert some documents
users.insert({ name: 'Alice', age: 25 });
users.insert({ name: 'Bob', age: 30 });
users.insert({ name: 'Charlie', age: 35 });

// Find a document by name
const result = users.findOne({ name: 'Alice' });
console.log('Found user:', result);

// Update a document
result.age = 26;
users.update(result);

// Find all users above the age of 30
const olderUsers = users.find({ age: { '$gt': 30 } });
console.log('Users above age 30:', olderUsers);

// Remove a document
users.remove(result);

// Display remaining documents
console.log('Remaining users:', users.find());

### Step 6: Run the LokiJS Script
Save and close the `index.js` file. Now, run the script using Node.js:

  
node index.js

You should see output in the terminal displaying the operations performed on the database, such as inserting, updating, finding, and removing documents.

### Step 7: Understand the Output
The output shows that the script successfully found the user 'Alice,' updated and removed her, and listed users above age 30 ('Charlie'). The 'Remaining users' array confirms the current database state, reflecting the operations performed in the script.

---

This output confirms the accurate execution of each operation in the LokiJS script, verifying that the database functions as expected.

