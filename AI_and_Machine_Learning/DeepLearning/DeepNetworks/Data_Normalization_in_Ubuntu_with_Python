# Comprehensive Guide to Data Normalization in Ubuntu with Python

## Introduction
Data normalization is a technique used to scale numerical data in a dataset to a common range without distorting differences in the ranges of values. This is a crucial step in data preprocessing, especially for machine learning algorithms that use distance measures, such as k-nearest neighbors (KNN) and neural networks.

## Tools and Libraries
For this tutorial, we will use Python along with the `pandas` and `scikit-learn` libraries, which provide powerful tools for data manipulation and normalization.

## Step-by-Step Guide

### Step 1: Install Necessary Libraries
First, ensure you have Python installed on your Ubuntu system. You can install the required libraries using `pip`.

  
sudo apt update
sudo apt install python3-pip -y
pip3 install pandas scikit-learn

### Step 2: Load Your Dataset
Create a sample dataset or load your own. Here, we will create a simple dataset using `pandas`.

  
import pandas as pd

# Sample dataset
data = {
    'A': [1, 2, 3, 4, 5],
    'B': [10, 20, 30, 40, 50],
    'C': [100, 200, 300, 400, 500]
}

df = pd.DataFrame(data)
print("Original Data:")
print(df)

### Step 3: Normalize the Data
We will use the `MinMaxScaler` from `scikit-learn` to normalize the data.

  
from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform the data
normalized_data = scaler.fit_transform(df)

# Convert the normalized data back to a DataFrame
normalized_df = pd.DataFrame(normalized_data, columns=df.columns)
print("Normalized Data:")
print(normalized_df)

### Step 4: Save the Normalized Data
Save the normalized data to a CSV file for further use.

  
normalized_df.to_ ('normalized_data. ', index=False)
print("Normalized data saved to 'normalized_data.csv'")

### Full Python Script
Here is the complete script combining all the steps:

  
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Sample dataset
data = {
    'A': [1, 2, 3, 4, 5],
    'B': [10, 20, 30, 40, 50],
    'C': [100, 200, 300, 400, 500]
}

df = pd.DataFrame(data)
print("Original Data:")
print(df)

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform the data
normalized_data = scaler.fit_transform(df)

# Convert the normalized data back to a DataFrame
normalized_df = pd.DataFrame(normalized_data, columns=df.columns)
print("Normalized Data:")
print(normalized_df)

# Save the normalized data to a CSV file
normalized_df.to_ ('normalized_data. ', index=False)
print("Normalized data saved to 'normalized_data.csv'")

### Running the Script
1. Save the script to a file named `normalize_data.py`.
2. Open a terminal and navigate to the directory containing the script.
3. Run the script using Python:

  
 3 normalize_data.py

This will output the original and normalized data, and save the normalized data to `normalized_data.csv`.

## Conclusion
You have successfully learned how to normalize data in Ubuntu using Python with `pandas` and `scikit-learn`. This process is crucial for many machine learning tasks and ensures your models perform better by having data on a similar scale.
