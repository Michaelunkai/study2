# Tutorial on Setting Up and Running Anomaly Detection in Ubuntu Using Python

## Introduction

This tutorial will guide you through the setup and execution of an Anomaly Detection system using Python on an Ubuntu system. We'll use libraries such as `scikit-learn` and `pandas` for data manipulation and machine learning tasks.

## Step-by-Step Guide

### Step 1: Install Required Packages

First, we need to update our system and install Python along with pip (Python's package installer). Open your terminal and run the following commands:

  
sudo apt update
sudo apt install -y python3 python3-pip

### Step 2: Create a Virtual Environment

Creating a virtual environment helps in managing dependencies and versions for your Python project. Install the `virtualenv` package and create a new environment:

  
sudo pip3 install virtualenv
virtualenv anomaly_detection_env
source anomaly_detection_env/bin/activate

### Step 3: Install Python Libraries

With the virtual environment activated, install the necessary Python libraries for our anomaly detection project:

  
pip install pandas scikit-learn matplotlib

### Step 4: Create Your Anomaly Detection Script

Create a new directory for your project and navigate into it:

  
mkdir ~/anomaly_detection_project
cd ~/anomaly_detection_project

Create a Python script named `anomaly_detection.py`:

  
nano anomaly_detection.py

Copy and paste the following code into the `anomaly_detection.py` file:

  
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest

# Generate random data for the example
np.random.seed(42)
data = pd.DataFrame({
    'feature1': np.random.normal(0, 1, 1000),
    'feature2': np.random.normal(0, 1, 1000)
})

# Introduce some outliers
data.iloc[::10] = data.iloc[::10] + np.random.normal(5, 1, 2)

# Plot the data
plt.scatter(data['feature1'], data['feature2'], s=5)
plt.title("Data with Outliers")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt. ow()

# Initialize the Isolation Forest model
model = IsolationForest(contamination=0.1)

# Fit the model
model.fit(data)

# Predict anomalies
data['anomaly'] = model.predict(data)

# Plot the anomalies
fig, ax = plt.subplots()
colors = {1: 'blue', -1: 'red'}
ax.scatter(data['feature1'], data['feature2'], c=data['anomaly'].apply(lambda x: colors[x]), s=5)
plt.title("Anomaly Detection")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt. ow()

### Step 5: Run Your Anomaly Detection Script

Make sure you are in the project directory and your virtual environment is activated. Run the script using Python:

  
  anomaly_detection.py

### Step 6: Deactivate the Virtual Environment

Once you are done, you can deactivate the virtual environment using:

  
deactivate

## Conclusion

You have successfully set up and run an anomaly detection script in Ubuntu using Python. This basic example uses `IsolationForest` from `scikit-learn` to identify anomalies in a synthetic dataset. You can expand upon this script by applying it to your specific datasets and tweaking the parameters as needed.
