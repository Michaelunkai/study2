Here’s a revised version of your recap:

---

### **Your Recent Learnings in SQL**

Five days ago, you were working on **Outer Joins, Cross Joins, and Self Joins** in Chapter 2 of the course *Joining Data in SQL*. Here’s a summary of the key takeaways from your last lesson:

#### **Exploring SQL Joins**
You delved into the mechanics of SQL joins, focusing on **LEFT JOIN** and **RIGHT JOIN**, their differences, and practical applications:

- **LEFT JOIN (or LEFT OUTER JOIN)**  
  - Returns all records from the left table and matches from the right table.  
  - If no match is found, the result includes `NULL` for columns from the right table.  
  - **Example**: Joining a table of countries with a table of capitals using a LEFT JOIN ensures all countries are listed, even those without a corresponding capital.

- **RIGHT JOIN (or RIGHT OUTER JOIN)**  
  - Similar to LEFT JOIN, but it works in the opposite direction.  
  - Returns all records from the right table and matches from the left table, with `NULL` for non-matching rows from the left table.  
  - While less commonly used, RIGHT JOIN can often be rewritten as a LEFT JOIN for improved clarity.

#### **Practical Application**
You practiced using **LEFT JOIN** to include all countries with their prime ministers in your result set. This approach allowed you to account for countries without prime ministers, ensuring no data was excluded from the primary table.

#### **Syntax Insights**
- The syntax for LEFT and RIGHT JOINs is similar, differing only in the join direction.  
- **Converting Joins**: RIGHT JOINs can be rewritten as LEFT JOINs for better readability and consistency.

Here’s an example SQL query you worked with, showing how to use a RIGHT JOIN:

```sql
-- Convert this LEFT JOIN query into a RIGHT JOIN
SELECT countries.name AS country, languages.name AS language, percent
FROM languages
RIGHT JOIN countries
USING (code)
ORDER BY language;
```

#### **What’s Next?**
In the upcoming lesson, you’ll explore **FULL JOINs** in SQL. This will enable you to combine data from multiple tables, even when no matching records exist, and expand your ability to analyze and manipulate data comprehensively.

---

Let me know if you’d like further refinements!
