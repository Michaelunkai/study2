Transcript
1. Subplots
00:00 - 00:05
Let's learn how to create subplots in Plotly with Python.

2. What are subplots?
00:05 - 00:33
Subplots are like mini-plots positioned in a grid arrangement. They are useful for displaying different plot types for the same data, or the same plot type with subsets of your data. For example, you might have 4 plots arranged in a 2 by 2 grid like this. You can have many subplots but beware each addition makes the plots smaller!

3. A reminder of traces
00:33 - 01:04
Before we build our subplots, remember 'traces' from chapter 1? Each set of data plus graph type is a 'trace'. You can build plots with multiple traces using fig dot add_trace, taking a graph_objects argument such as go dot Scatter or Bar. We haven't needed add_trace so far as our plots only had one trace, but we can use it to build subplots.

4. graph_objects (go) vs plotly.express (px)
01:04 - 01:24
Recall that plots can be created with graph objects or express. When using add_trace, we can use px plots, but it is more complex and not best practice, so we will use go plots whenever using add_trace. Remember to check equivalent documentation for more information.

5. Creating a 1x2 subplot
01:24 - 02:28
Let's rebuild our finance histogram and box plot as a 1x2 subplot. We create a figure object using the make_subplots function from Plotly's subplots library, setting the number of rows and columns we want to contain our subplots. We want 2 rows and one column. We use add_trace to add a graph_objects histogram. Most of the code should be familiar, but we need to place it into a subplot square. We'll set row to 1 and col to 1 to place it in the top row and first column. Subplot positioning is 1-indexed, not 0-indexed. We repeat using add_trace for our box plot. We still want the company name in the hover. We position this plot in the second row. Here it is. Histogram on top, box plot below with interactivity and hover. Nice!

6. Customizing subplots
02:28 - 02:50
Our subplot looked ok but there is some styling to be done to make it presentation-worthy. For example The overall plot doesn't have a title. The subplots don't have titles. The legend has 'trace 1' and 'trace 2' We may want to use our other customization skills to make this visualization awesome.

7. Subplot titles
02:50 - 03:29
Let's fix the main and subplot titles. make_subplots has a handy argument, subplot_titles, which is a list of strings to specify subplot titles. The adding of traces is the same, omitted here for space. We can then format our main title using the familiar update_layout function, setting the title argument. Recall title has a text argument and x-y arguments for positioning. Nice work - that looks much better. As usual, check the documentation for even more customization options.

8. Subplot legends
03:29 - 03:43
We can also easily fix the legend names. All we need to do is set the 'name' argument when creating the traces. Nice, our legend (and hover) is more relevant.

9. Stacked subplots
03:43 - 04:29
Let's redo our penguins scatterplot with subplots, stacking one subplot per species on top of each other. We use make_subplots, with 3 rows and 1 column. Here, we loop through the species and subset the DataFrame to add the traces. You could do 3 separate add_traces if you prefer. The trace we add is a scatter, note the use of mode as 'marker' as graph_objects scatter can be also used for a line graph. Finally we position the graph on each row incrementally as we loop through the species. Hmmm. The different x-axis ranges make analysis difficult.

10. Subplots with shared axes
04:29 - 04:47
We can improve the plot by making the x-axis shared between plots. We simply adjust the code using shared_xaxis. We omit the rest of the construction code for brevity. That's better, we can clearly see the difference in species now.

11. Let's practice!
04:47 - 04:54
Let's practice creating subplots with Plotly in Python!
