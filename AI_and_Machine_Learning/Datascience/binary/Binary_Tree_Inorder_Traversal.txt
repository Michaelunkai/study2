### Step 1: Rewrite the Entire Question
Given the root of a binary tree, return the inorder traversal of its nodes' values.
### Examples:
#### Example 1:
- Input: `root = [1, null, 2, 3]`
- Output: `[1, 3, 2]`
Explanation:
- The binary tree is:
  ```
      1
       \
        2
       /
      3
  ```
- Inorder traversal is: visit left subtree, root, and then right subtree. So, it will be `[1, 3, 2]`.
#### Example 2:
- Input: `root = []`
- Output: `[]`
Explanation:
- The binary tree is empty, so the output is an empty list.
#### Example 3:
- Input: `root = [1]`
- Output: `[1]`
Explanation:
- The binary tree is:
  ```
    1
  ```
- Inorder traversal of a single node tree is just the node itself, so the output is `[1]`.
### Constraints:
- The number of nodes in the tree is in the range `[0, 100]`.
- `-100 <= Node.val <= 100`.
### Follow-up:
- Can you solve it iteratively?
### Step 2: Explain the Entire Question Step by Step
1. **Understand the Problem**:
   - You have a binary tree.
   - Each node in the binary tree has a value.
   - You need to traverse the tree in a specific order called "inorder traversal".
2. **Inorder Traversal**:
   - Inorder traversal means:
     1. First, visit all the nodes in the left subtree.
     2. Then, visit the root node.
     3. Finally, visit all the nodes in the right subtree.
3. **Output**:
   - You need to return a list of the node values following the inorder traversal order.
4. **Constraints**:
   - There can be up to 100 nodes in the tree.
   - The values of the nodes range from -100 to 100.
### Step 3: Full Answer Code without Comments
class Solution:
    def inorderTraversal(self, root):
        result = []
        stack = []
        current = root
        while current or stack:
            while current:
                stack.append(current)
                current = current.left
            current = stack.pop()
            result.append(current.val)
            current = current.right
        return result
### Step 4: Full Code with Comments for Each Line
class Solution:
    def inorderTraversal(self, root):
        result = []  # List to store the inorder traversal
        stack = []  # Stack to keep track of nodes
        current = root  # Start with the root node
        while current or stack:
            while current:  # Traverse to the leftmost node
                stack.append(current)  # Add current node to stack
                current = current.left  # Move to left child
            current = stack.pop()  # Retrieve the last visited node
            result.append(current.val)  # Add node value to result
            current = current.right  # Move to right child
        return result  # Return the inorder traversal
