### 206. Reverse Linked List

**Problem Description:**

Given the head of a singly linked list, reverse the list, and return the reversed list.

**Example 1:**
```
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
```

**Example 2:**
```
Input: head = [1,2]
Output: [2,1]
```

**Example 3:**
```
Input: head = []
Output: []
```

**Constraints:**
- The number of nodes in the list is in the range `[0, 5000]`.
- `-5000 <= Node.val <= 5000`

**Follow-up:** A linked list can be reversed either iteratively or recursively. Could you implement both?

### Explanation (Like I'm 12):

Imagine you have a line of toy cars connected by strings. You want to reverse the order of the cars without losing any connections. So, the car at the end of the line should come to the front, and the car at the front should go to the end, keeping all the strings connected.

### Iterative Python Solution:

Here's how you can do it step by step:

```python
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev = None
        current = head
        
        while current:
            next_node = current.next  # Remember next node
            current.next = prev  # Reverse the link
            prev = current  # Move prev to current
            current = next_node  # Move to next node
            
        return prev
```

### Explanation of the Iterative Solution:

1. **Initialize Pointers:** 
    - `prev` is set to `None` (this will be the new head of the reversed list).
    - `current` is set to the head of the list.

2. **Iterate Through the List:** 
    - While there are still nodes to process (`current` is not `None`), repeat the following steps:
    
3. **Reverse the Links:**
    - Save the next node (`next_node = current.next`) so you don't lose the rest of the list.
    - Reverse the current node's link (`current.next = prev`).
    
4. **Move Pointers Forward:**
    - Move the `prev` pointer to the current node (`prev = current`).
    - Move the `current` pointer to the next node (`current = next_node`).

5. **Return New Head:**
    - Once all nodes are processed, `prev` will be the new head of the reversed list.

In simpler terms, imagine you are flipping the direction each car points while you walk through the line, making sure you don't lose track of the rest of the line by holding onto the next car before making the flip.

### Recursive Python Solution:

Alternatively, you can solve it using recursion:

```python
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        
        p = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        
        return p
```

### Explanation of the Recursive Solution:

1. **Base Case:**
    - If the list is empty or has only one node, return the head as it is.

2. **Recursive Case:**
    - Recursively reverse the rest of the list starting from the second node.
    - Once the rest is reversed, the next node of the head should point back to the head.
    - Set the head's next pointer to `None` to avoid a cycle.

In simpler terms, imagine you are breaking the line of cars at each step, reversing the rest of the line, and then reconnecting the current car to the reversed line in the opposite direction.

Both methods achieve the same result: the linked list is reversed, but they approach the problem differentlyâ€”one step by step (iteratively) and the other by breaking it down into smaller sub-problems (recursively).
