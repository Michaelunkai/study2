### 344. Reverse String

**Problem Description:**

Write a function that reverses a string. The input string is given as an array of characters `s`.

You must do this by modifying the input array in-place with `O(1)` extra memory.

**Example 1:**
```
Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
```

**Example 2:**
```
Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
```

**Constraints:**
- `1 <= s.length <= 10^5`
- `s[i]` is a printable ASCII character.

### Explanation (Like I'm 12):

Imagine you have a line of people, and you want to turn the line around so that the first person is now the last, and the last person is now the first, and so on. You can do this by swapping the first and last person, then the second and second-last person, and so on, until you reach the middle.

### Solution:

We can use a two-pointer approach to solve this problem. One pointer starts at the beginning of the array, and the other starts at the end. We swap the elements at these two pointers and then move the pointers towards each other until they meet.

### Python Code:

```python
class Solution:
    def reverseString(self, s: List[str]) -> None:
        left, right = 0, len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
```

### Explanation of the Solution:

1. **Initialize Pointers:**
   - `left` is initialized to the start of the array (`0`).
   - `right` is initialized to the end of the array (`len(s) - 1`).

2. **Swap Elements:**
   - Swap the elements at the `left` and `right` pointers.
   - Move the `left` pointer one step to the right (`left += 1`).
   - Move the `right` pointer one step to the left (`right -= 1`).

3. **Repeat Until Pointers Meet:**
   - Continue the process until the `left` pointer is no longer less than the `right` pointer.

### Example Walkthrough:

Let's take the example `s = ["h","e","l","l","o"]`:

- Initial array: `["h","e","l","l","o"]`
- `left = 0`, `right = 4`
  - Swap `s[0]` and `s[4]`: `["o","e","l","l","h"]`
  - Move `left` to 1 and `right` to 3
- `left = 1`, `right = 3`
  - Swap `s[1]` and `s[3]`: `["o","l","l","e","h"]`
  - Move `left` to 2 and `right` to 2
- `left = 2`, `right = 2`
  - Since `left` is not less than `right`, stop.

Final array: `["o","l","l","e","h"]`

This approach efficiently reverses the array in-place using only `O(1)` extra space.
