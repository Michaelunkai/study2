Create Database and Table:
Let's begin by creating a new database named "company" and defining a table named "employees":
 
 
CREATE DATABASE IF NOT EXISTS company;
USE company;

CREATE TABLE IF NOT EXISTS employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    salary DECIMAL(10, 2),
    manager_id INT
);

INSERT INTO employees (employee_id, employee_name, salary, manager_id)
VALUES
    (1, 'John', 50000, NULL),
    (2, 'Alice', 60000, 1),
    (3, 'Bob', 55000, 1),
    (4, 'Carol', 52000, 2),
    (5, 'David', 48000, 2),
    (6, 'Emma', 53000, 3);
Subqueries:
Subqueries allow you to nest one query inside another query.
Example: Find all employees whose salary is higher than the average salary.
 
 
SELECT *
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
Window Functions:
Window functions perform calculations across a set of rows related to the current row.
Example: Calculate the total sales and average sales for each product, along with the difference between each product's sales and the average sales.
 
 
SELECT employee_id,
       employee_name,
       salary,
       AVG(salary) OVER () AS avg_salary,
       salary - AVG(salary) OVER () AS salary_diff
FROM employees;
Common Table Expressions (CTEs):
CTEs provide a way to define temporary result sets that can be referenced within a larger query.
Example: Find the total number of orders for each customer using a CTE.
 
 
WITH employee_hierarchy AS (
    SELECT employee_id, employee_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.employee_name, e.manager_id
    FROM employees e
    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)
SELECT * FROM employee_hierarchy;
Recursive Queries:
Recursive queries are used to query hierarchical data such as organizational charts or bill of materials.
Example: Find all employees and their managers in a hierarchical structure.
 
 
WITH RECURSIVE employee_hierarchy AS (
    SELECT employee_id, employee_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.employee_name, e.manager_id
    FROM employees e
    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)
SELECT * FROM employee_hierarchy;
These examples provide step-by-step guidance on using advanced SQL querying techniques, starting with the creation of a database and table. Feel free to experiment with them and adapt them to your specific needs
