### Comprehensive Tutorial: Setting Up a Smart City Transportation System on Ubuntu (Without API Keys)

#### Introduction
This tutorial will guide you through setting up a smart city transportation system on Ubuntu, leveraging various tools and technologies. We will use Python, Django for the backend, PostgreSQL for the database, and Leaflet.js for map visualization. This tutorial assumes you have a basic understanding of Python and web development.

#### Prerequisites
- Ubuntu 20.04 or later
- Python 3.8 or later
- PostgreSQL
- Node.js and npm

#### Step 1: Update and Upgrade the System
  
sudo apt update && sudo apt upgrade -y

#### Step 2: Install Python and Pip
  
sudo apt install python3 python3-pip -y

#### Step 3: Install PostgreSQL
  
sudo apt install postgresql postgresql-contrib -y

#### Step 4: Setup PostgreSQL Database
1. Switch to the PostgreSQL user:
      
    sudo -i -u postgres

2. Create a new database user:
      
    createuser --interactive

3. Create a new database:
      
    createdb smart_city_db

4. Exit PostgreSQL user:
      
    exit

5. Set a password for the PostgreSQL user:
      
    sudo -u postgres psql
    ALTER USER your_username WITH PASSWORD 'your_password';
    \q

#### Step 5: Install and Setup Django
1. Install Django:
      
    pip3 install django

2. Create a new Django project:
      
    django-admin startproject smart_city_transportation
    cd smart_city_transportation

3. Configure PostgreSQL in Django `settings.py`:
      
    nano smart_city_transportation/settings.py
    Replace the database configuration in `settings.py` with the following:
      
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgre _psycopg2',
            'NAME': 'smart_city_db',
            'USER': 'your_username',
            'PASSWORD': 'your_password',
            'HOST': 'localhost',
            'PORT': '',
        }
    }

    Here is the full content of `smart_city_transportation/settings.py`:

      
    """
    Django settings for smart_city_transportation project.

    Generated by 'django-admin startproject' using Django 5.0.8.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.0/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.0/ref/settings/
    """

    from pathlib import Path

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-9vj&wud#-@e^q#7i7rsa1^4(ns4htj5-h+wu65extyv^kv9$cg'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'smart_city_transportation.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'smart_city_transportation.wsgi.application'

    # Database
    # https://docs.djangoproject.com/en/5.0/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgre _psycopg2',
            'NAME': 'smart_city_db',
            'USER': 'your_username',
            'PASSWORD': 'your_password',
            'HOST': 'localhost',
            'PORT': '',
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/5.0/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.0/howto/static-files/

    STATIC_URL = 'static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#### Step 6: Install and Setup Leaflet.js
1. Add Leaflet.js CSS and JS to your Django template (e.g., `index.html`):
      
    nano templates/index.html
    Add the following content:
     html
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8" />
        <title>Smart City Transportation</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <style>
            #map {
                height: 600px;
                width: 100%;
            }
        </style>
    </head>
    <body>
        <div id='map'></div>
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script>
            const map = L.map('map').setView([51.505, -0.09], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            const marker = L.marker([51.5, -0.09]).addTo(map)
                .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
                .openPopup();
        </script>
    </body>
    </html>

#### Step 7: Create Django Models for Transportation Data
1. Open `models.py` in your Django app and add the following models:
      
    nano your_app/models.py
    Add the following content:
      
    from django.db import models

    class Vehicle(models.Model):
        vehicle_id = models.CharField(max_length=50)
        type = models.CharField(max_length=50)
        capacity = models.IntegerField()

    class Route(models.Model):
        route_id = models.CharField(max_length=50)
        start_location = models.CharField(max_length=100)
        end_location = models.CharField(max_length=100)
        vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE)

2. Run migrations to create the database tables:
      
     3 manage.py makemigrations
     3 manage.py migrate

#### Step 8: Create Views and Templates
1. Create a view to display the transportation data:
      
    nano your_app/views.py
