Setting up and using DynamoDB with the AWS CLI involves several steps, including configuring your AWS CLI, creating a DynamoDB table, and performing basic operations. Here's a step-by-step guide:

### 1. **Install and Configure AWS CLI**

If you haven't installed the AWS CLI yet, follow these steps:

#### **Install AWS CLI:**
1. **On Windows:**
   - Download the AWS CLI MSI installer from [AWS CLI MSI installer for Windows](https://aws.amazon.com/cli/).
   - Run the installer and follow the on-screen instructions.

2. **On macOS:**
     
   brew install awscli

3. **On Linux:**
     
   sudo apt-get update
   sudo apt-get install awscli

#### **Configure AWS CLI:**
After installation, configure the AWS CLI with your credentials.

  
aws configure

You'll be prompted to enter your AWS Access Key ID, Secret Access Key, region, and output format. These details can be obtained from the AWS Management Console under "My Security Credentials."

### 2. **Create a DynamoDB Table**

Once the AWS CLI is configured, you can create a DynamoDB table. Here's an example of how to create a table named `ExampleTable` with a primary key `Id`.

  
aws dynamodb create-table \
    --table-name ExampleTable \
    --attribute-definitions \
        AttributeName=Id,AttributeType=S \
    --key-schema \
        AttributeName=Id,KeyType=HASH \
    --provisioned-throughput \
        ReadCapacityUnits=5,WriteCapacityUnits=5

This command specifies:
- The table name (`ExampleTable`).
- The primary key attribute (`Id`) of type String (`S`).
- Provisioned throughput settings (5 read and 5 write capacity units).

### 3. **List DynamoDB Tables**

To verify that your table has been created, list all DynamoDB tables.

  
aws dynamodb list-tables

### 4. **Insert Data into the DynamoDB Table**

To insert an item into the table, use the `put-item` command. For example, to insert an item with `Id` = "1" and `Name` = "John Doe":

  
aws dynamodb put-item \
    --table-name ExampleTable \
    --item \
        '{"Id": {"S": "1"}, "Name": {"S": "John Doe"}}'

### 5. **Query Data from the DynamoDB Table**

To retrieve an item from the table, use the `get-item` command. For example, to get the item with `Id` = "1":

  
aws dynamodb get-item \
    --table-name ExampleTable \
    --key \
        '{"Id": {"S": "1"}}'

### 6. **Update an Item in the DynamoDB Table**

To update an existing item, use the `update-item` command. For example, to update the `Name` attribute of the item with `Id` = "1":

  
aws dynamodb update-item \
    --table-name ExampleTable \
    --key \
        '{"Id": {"S": "1"}}' \
    --update-expression "set #name = :newName" \
    --expression-attribute-names '{"#name": "Name"}' \
    --expression-attribute-values '{":newName": {"S": "Jane Doe"}}'

### 7. **Delete an Item from the DynamoDB Table**

To delete an item from the table, use the `delete-item` command. For example, to delete the item with `Id` = "1":

  
aws dynamodb delete-item \
    --table-name ExampleTable \
    --key \
        '{"Id": {"S": "1"}}'

### 8. **Delete the DynamoDB Table**

When you're done with the table and want to delete it, use the `delete-table` command:

  
aws dynamodb delete-table \
    --table-name ExampleTable

### Additional Tips

- **Provisioned Throughput**: DynamoDB uses provisioned throughput capacity, which means you need to specify the number of read and write operations per second you expect to perform. Monitor your table’s usage and adjust these settings as needed.
- **Global Tables**: For multi-region deployments, consider using DynamoDB global tables.
- **Backup and Restore**: Utilize DynamoDB’s built-in backup and restore features to safeguard your data.

By following these steps, you can set up and use DynamoDB with the AWS CLI effectively. If you need more advanced usage or specific scenarios, refer to the [AWS DynamoDB CLI Command Reference](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/index.html).
