### Step-by-Step Guide to Setting Up Keyless Authentication to an AWS EC2 Instance Using AWS CLI and Session Manager Plugin

Assume your EC2 instance ID is `i-048795ad498e320fa`.

#### Step 1: Create an IAM Role for EC2 Instance

1. **Create a Trust Policy File (`trust-policy.json`):**
     
   echo '{
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Allow",
         "Principal": {
           "Service": "ec2.amazonaws.com"
         },
         "Action": "sts:AssumeRole"
       }
     ]
   }' > trust-policy.json

2. **Create the IAM Role:**
     
   aws iam create-role --role-name EC2AccessRole --assume-role-policy-document file://trust-policy.json

3. **Attach the AmazonSSMManagedInstanceCore Policy to the Role:**
     
   aws iam attach-role-policy --role-name EC2AccessRole --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

4. **Create the Instance Profile:**
     
   aws iam create-instance-profile --instance-profile-name EC2AccessProfile

5. **Add the Role to the Instance Profile:**
     
   aws iam add-role-to-instance-profile --instance-profile-name EC2AccessProfile --role-name EC2AccessRole

#### Step 2: Attach IAM Role to EC2 Instance

1. **Disassociate any existing IAM instance profiles from the EC2 instance:**
     
   ASSOCIATION_ID=$(aws ec2 describe-iam-instance-profile-associations --filters Name=instance-id,Values=i-048795ad498e320fa --query "IamInstanceProfileAssociations[0].AssociationId" --output text)
   if [ "$ASSOCIATION_ID" != "None" ]; then
     aws ec2 disassociate-iam-instance-profile --association-id $ASSOCIATION_ID
   fi

2. **Associate the IAM Instance Profile with the EC2 Instance:**
     
   aws ec2 associate-iam-instance-profile --instance-id i-048795ad498e320fa --iam-instance-profile Name=EC2AccessProfile

#### Step 3: Install and Start the SSM Agent on the EC2 Instance (Ubuntu)

1. **Connect to the EC2 Instance using SSH:**
     
   ssh -i /path/to/your-key.pem ubuntu@<EC2_INSTANCE_PUBLIC_IP>

2. **Update the Package List and Install the SSM Agent:**
     
   sudo apt-get update
   sudo snap install amazon-ssm-agent --classic

3. **Start and Enable the SSM Agent:**
     
   sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
   sudo systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service

4. **Verify the SSM Agent is Running:**
     
   sudo systemctl status snap.amazon-ssm-agent.amazon-ssm-agent.service

#### Step 4: Install Session Manager Plugin on Your Local Machine

1. **Download and install the Session Manager Plugin:**
     
   curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb" && sudo dpkg -i session-manager-plugin.deb && session-manager-plugin --version

#### Step 5: Start an SSM Session

1. **Start an SSM Session Using AWS CLI:**
     
   aws ssm start-session --target i-048795ad498e320fa

2. **Navigate to the Desired Directory:**
   After starting the session, you can navigate to the `/home/ubuntu` directory:
     
   cd /home/ubuntu
   ls

### Full Command Sequence

To simplify, here's the full command sequence from start to finish:

  
# Create trust-policy.json
echo '{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}' > trust-policy.json

# Create the IAM Role
aws iam create-role --role-name EC2AccessRole --assume-role-policy-document file://trust-policy.json

# Attach the policy
aws iam attach-role-policy --role-name EC2AccessRole --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

# Create the Instance Profile
aws iam create-instance-profile --instance-profile-name EC2AccessProfile

# Add the Role to the Instance Profile
aws iam add-role-to-instance-profile --instance-profile-name EC2AccessProfile --role-name EC2AccessRole

# Disassociate any existing IAM instance profiles from the EC2 instance
ASSOCIATION_ID=$(aws ec2 describe-iam-instance-profile-associations --filters Name=instance-id,Values=i-048795ad498e320fa --query "IamInstanceProfileAssociations[0].AssociationId" --output text)
if [ "$ASSOCIATION_ID" != "None" ]; then
  aws ec2 disassociate-iam-instance-profile --association-id $ASSOCIATION_ID
fi

# Associate the IAM Instance Profile with the EC2 instance
aws ec2 associate-iam-instance-profile --instance-id i-048795ad498e320fa --iam-instance-profile Name=EC2AccessProfile

# Install and start the SSM agent on the EC2 instance (Ubuntu)
ssh -i /path/to/your-key.pem ubuntu@<EC2_INSTANCE_PUBLIC_IP> << EOF
sudo apt-get update
sudo snap install amazon-ssm-agent --classic
sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
sudo systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
sudo systemctl status snap.amazon-ssm-agent.amazon-ssm-agent.service
EOF

# Download and install the Session Manager Plugin on your local machine
curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb" && sudo dpkg -i session-manager-plugin.deb && session-manager-plugin --version

# Start an SSM session using AWS CLI
aws ssm start-session --target i-048795ad498e320fa

### Additional Steps for Using the AWS Systems Manager Console

1. **Navigate to the AWS Systems Manager Console:**
   - Go to AWS Management Console.
   - Select "Systems Manager" from the Services menu.

2. **Start a Session from the Systems Manager Console:**
   - On the left menu, select **Session Manager**.
   - Click **Start session**.
   - Select the target EC2 instance and click **Start session**.

### Frequently Asked Questions for AWS EC2 Connection without SSH Key

1. **Is keyless authentication more secure than traditional SSH key methods?**
   - Keyless authentication enhances security by eliminating the vulnerabilities associated with traditional SSH keys.

2. **What challenges might organizations face when transitioning to keyless authentication?**
   - Organizations may encounter initial configuration challenges and the need for user training during the transition.

3. **Can keyless authentication be used for all types of AWS instances?**
   - Yes, keyless authentication is applicable to all AWS EC2 instances, providing a versatile and secure solution.

4. **Are there any additional costs associated with keyless authentication on AWS?**
   - Keyless authentication on AWS does not incur additional costs beyond standard AWS service fees.

### Conclusion
In conclusion, this guide has illuminated a path to connecting to an AWS EC2 instance without the need for SSH keys. By embracing a keyless approach, you not only simplify your workflow but also elevate the security of your cloud environment. Follow the steps outlined here, and unlock a new era of accessibility and efficiency in your AWS endeavors.
