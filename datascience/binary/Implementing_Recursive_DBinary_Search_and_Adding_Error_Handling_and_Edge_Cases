Implementing Recursive Binary Search
Recursion is another way to implement binary search. This approach uses the same logic but leverages function calls to perform the search.

Modify the Python Script: Open the binary_search.py file again.

 
 
nano binary_search.py
Add the Recursive Implementation: Replace or add the following code to include a recursive version.

 
 
def binary_search_recursive(arr, target, left, right):
    if left > right:
        return -1
    
    mid = (left + right) // 2
    
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right)
    else:
        return binary_search_recursive(arr, target, left, mid - 1)

# Example usage
if __name__ == "__main__":
    arr = [2, 3, 4, 10, 40]
    target = 10
    
    # Iterative binary search
    result_iter = binary_search(arr, target)
    if result_iter != -1:
        print("Element found at index (iterative):", str(result_iter))
    else:
        print("Element not found (iterative)")

    # Recursive binary search
    result_recur = binary_search_recursive(arr, target, 0, len(arr) - 1)
    if result_recur != -1:
        print("Element found at index (recursive):", str(result_recur))
    else:
        print("Element not found (recursive)")
Save and Close the File: In nano, you can save and exit by pressing Ctrl + X, then Y to confirm, and Enter to save.

Step 6: Running the Script with Recursive Binary Search
Run the Python Script:
 
 
 3 binary_search.py
You should see the output:

java
 
Element found at index (iterative): 3
Element found at index (recursive): 3
This confirms that both the iterative and recursive binary search implementations are working correctly.

Step 7: Adding Error Handling and Edge Cases
Let's make our code more robust by handling some potential errors and edge cases, such as an empty array or non-integer elements.

Modify the Python Script: Open the binary_search.py file again.

 
 
nano binary_search.py
Add Error Handling: Add code to handle these cases.

 
 
def binary_search(arr, target):
    if not arr:
        return -1

    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1

def binary_search_recursive(arr, target, left, right):
    if not arr or left > right:
        return -1
    
    mid = (left + right) // 2
    
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right)
    else:
        return binary_search_recursive(arr, target, left, mid - 1)

# Example usage
if __name__ == "__main__":
    arr = [2, 3, 4, 10, 40]
    target = 10
    
    # Iterative binary search
    result_iter = binary_search(arr, target)
    if result_iter != -1:
        print("Element found at index (iterative):", str(result_iter))
    else:
        print("Element not found (iterative)")

    # Recursive binary search
    result_recur = binary_search_recursive(arr, target, 0, len(arr) - 1)
    if result_recur != -1:
        print("Element found at index (recursive):", str(result_recur))
    else:
        print("Element not found (recursive)")

    # Test with an empty array
    empty_arr = []
    print("Test with empty array:", binary_search(empty_arr, 10))  # Should return -1
    print("Test with empty array (recursive):", binary_search_recursive(empty_arr, 10, 0, len(empty_arr) - 1))  # Should return -1

    # Test with an array of non-integer elements
    str_arr = ["a", "b", "c", "d", "e"]
    print("Test with string array:", binary_search(str_arr, "c"))  # Should return 2
    print("Test with string array (recursive):", binary_search_recursive(str_arr, "c", 0, len(str_arr) - 1))  # Should return 2
Save and Close the File: In nano, you can save and exit by pressing Ctrl + X, then Y to confirm, and Enter to save.

Step 8: Running the Script with Error Handling
Run the Python Script:
 
 
 3 binary_search.py
You should see the output:

 
 
Element found at index (iterative): 3
Element found at index (recursive): 3
Test with empty array: -1
Test with empty array (recursive): -1
Test with string array: 2
Test with string array (recursive): 2
This confirms that our binary search handles various edge cases correctly.
