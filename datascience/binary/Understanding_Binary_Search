Understanding Binary Search
What is Binary Search?
Imagine you have a huge book collection sorted alphabetically, and you want to find out if a specific book is in your collection. Instead of going through each book one by one, you can use a clever method called binary search.

How Does Binary Search Work?

Look at the Middle Book: Start by looking at the book in the middle of your collection.
Compare Titles:
If the middle book is the one you're looking for, you're done!
If your book comes before the middle book alphabetically, you only need to search the first half of the collection.
If your book comes after the middle book alphabetically, you only need to search the second half of the collection.
Repeat: Keep doing this until you either find the book or run out of books to look at.
Step 2: Setting Up the Environment
Opening the Terminal:

How to Open: You can press Ctrl + Alt + T on your keyboard or find "Terminal" in your computer's applications menu.
Creating a Project Directory:

Why? It's like making a special folder to keep all your binary search code together.
Commands:
 
 
mkdir binary_search_project
cd binary_search_project
Step 3: Writing Your First Binary Search in Python
Creating a Python File:

Why? We need a place to write and save our code.
Command to create a file using nano (a simple text editor):
 
 
nano binary_search.py
Writing the Binary Search Code:

Here's the code explained:
 
 
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2  # Find the middle index
        
        if arr[mid] == target:
            return mid  # Target found, return its index
        elif arr[mid] < target:
            left = mid + 1  # Ignore the left half
        else:
            right = mid - 1  # Ignore the right half
    
    return -1  # Target not found

# Example usage
if __name__ == "__main__":
    arr = [2, 3, 4, 10, 40]
    target = 10
    
    result = binary_search(arr, target)
    
    if result != -1:
        print("Element is present at index", str(result))
    else:
        print("Element is not present in array")
Save and Close in nano:
Press Ctrl + X, then Y to confirm saving, and hit Enter.
Step 4: Running the Script
Run the Python Script:

Command:
 
 
 3 binary_search.py
Expected  :

If everything is correct, you should see:
 
 
Element is present at index 3
This means the number 10 was found at index 3 in the list [2, 3, 4, 10, 40].
Follow-Up Questions
How can we modify the binary search to handle an unsorted array?
Can we implement the binary search algorithm using recursion instead of a loop?
What's the difference between a binary search and a linear search?
