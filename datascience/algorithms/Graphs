Graphs
Step 1: Definition
A graph is a collection of nodes connected by edges. Graphs can be directed or undirected.

# Create a graph using a dictionary
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
Step 2: Breadth-First Search (BFS)
BFS is an algorithm for traversing or searching tree or graph data structures. It starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores all the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.

from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])

    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            print(vertex, end=" ")
            visited.add(vertex)
            queue.extend(set(graph[vertex]) - visited)

# Example usage
bfs(graph, 'A')  # Output: A B C D E F


Step 3: Depth-First Search (DFS)
DFS is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking.

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start, end=" ")

    for next in set(graph[start]) - visited:
        dfs(graph, next, visited)

# Example usage
dfs(graph, 'A')  # Output: A B D E F C
