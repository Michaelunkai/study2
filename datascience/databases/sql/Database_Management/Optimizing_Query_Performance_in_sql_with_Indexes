Creating a Database:
If you haven't already created a database, you can create one using the following command:
 
 
MariaDB [(none)]> CREATE DATABASE your_database_name;
Selecting the Database:
After creating the database, switch to it using the USE command:
 
 
MariaDB [(none)]> USE your_database_name;
Creating a Table:
Let's create a table where we'll apply our indexes. For this example, let's create a simple table with columns id and name:
 
 
MariaDB [your_database_name]> CREATE TABLE my_table (
    id INT PRIMARY KEY,
    name VARCHAR(50)
);
Inserting Data into the Table:
Now, let's insert some sample data into our table:
 
 
MariaDB [your_database_name]> INSERT INTO my_table (id, name) VALUES
    (1, 'John'),
    (2, 'Alice'),
    (3, 'Bob'),
    (4, 'Emma');
Creating Indexes:
B-tree Index:
 
 
MariaDB [your_database_name]> CREATE INDEX index_name ON my_table (id);
Hash Index: (MariaDB does not directly support hash indexes)
Bitmap Index: (MariaDB does not support bitmap indexes directly)
Using Indexes in Queries:
Now that we have created an index, let's use it in a query to optimize data retrieval. For example, let's retrieve all rows from the table where the id is 2:
 
 
MariaDB [your_database_name]> SELECT * FROM my_table WHERE id = 2;
Monitoring Index Usage:
You can monitor index usage by examining the query execution plan. In MariaDB, you can do this using the EXPLAIN command before your query:
 
 
MariaDB [your_database_name]> EXPLAIN SELECT * FROM my_table WHERE id = 2;
Updating Indexes:
Indexes might need to be updated or dropped based on changes in data access patterns or schema modifications. You can alter or drop indexes using SQL commands such as ALTER INDEX or DROP INDEX:
 
 
MariaDB [your_database_name]> DROP INDEX index_name ON my_table;
Optimizing Queries:
To optimize queries, you may need to rewrite them or add hints to encourage the use of indexes. For example, you can use the USE INDEX or FORCE INDEX hints to specify which index to use:
 
 
MariaDB [your_database_name]> SELECT * FROM my_table USE INDEX (index_name) WHERE id = 2;
Regular Maintenance:
For regular maintenance tasks such as index rebuilding or reorganization, you can use the ALTER TABLE statement with the ALGORITHM option to rebuild indexes:
 
 
MariaDB [your_database_name]> ALTER TABLE my_table ALGORITHM=INPLACE;
Analyzing Query Performance:
After optimizing your queries and indexes, it's essential to analyze their performance to ensure they're providing the expected benefits. You can use MariaDB's ANALYZE statement to update statistics about the distribution of key values in indexes:
 
 
MariaDB [your_database_name]> ANALYZE TABLE my_table;

Reviewing Query Execution Plans:
You can review query execution plans to understand how queries are being processed by the database engine and whether indexes are being effectively utilized. Use the EXPLAIN statement to examine the execution plan for a specific query:
 
 
MariaDB [your_database_name]> EXPLAIN SELECT * FROM my_table WHERE id = 2;
