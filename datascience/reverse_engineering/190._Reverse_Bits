### 190. Reverse Bits

**Problem Description:**

Reverse bits of a given 32 bits unsigned integer.

**Example 1:**
```
Input: 00000010100101000001111010011100
Output: 00111001011110000010100101000000
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
```

**Example 2:**
```
Input: 11111111111111111111111111111101
Output: 10111111111111111111111111111111
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
```

**Constraint:**
- The input must be a binary string of length 32.

**Follow up:** If this function is called many times, how would you optimize it?

### Explanation (Like I'm 12):

Imagine you have a string of 32 lights, where each light can be either on (1) or off (0). These lights represent a number. What we need to do is flip the string of lights from end to end.

So if the string of lights is like this: `00000010100101000001111010011100`

After flipping, it should look like this: `00111001011110000010100101000000`

### Python Solution:

Here's a simple way to do it:

```python
class Solution:
    def reverseBits(self, n: int) -> int:
        result = 0
        for i in range(32):
            result = (result << 1) | (n & 1)
            n >>= 1
        return result
```

### Explanation of the Solution:

1. **Initialize Result:** We start with a result of 0.
2. **Loop 32 Times:** We need to look at each of the 32 bits in the input number.
3. **Shift Result Left:** Each time, we shift the bits in the result to the left by 1 position. This makes space for the next bit.
4. **Add Current Bit of n:** We then take the least significant bit (rightmost bit) of `n` using `n & 1` and add it to the result.
5. **Shift n Right:** We shift `n` to the right by 1 position to move the next bit to the rightmost position.
6. **Return Result:** After the loop, we have the reversed bits in the result.

In simpler terms, we're building the reversed number bit by bit from the right end to the left end, shifting our result to make space for each new bit, and shifting the original number to bring each bit into the right position to be added.
