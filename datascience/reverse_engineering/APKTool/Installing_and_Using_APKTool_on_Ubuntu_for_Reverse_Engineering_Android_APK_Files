# Comprehensive Step-by-Step Tutorial: Installing and Using APKTool on Ubuntu for Reverse Engineering Android APK Files

Unlock the power of **APKTool** on your Ubuntu system to decompile, analyze, and modify Android APK files. This detailed guide will walk you through each step, ensuring you set up APKTool correctly and avoid common pitfalls. Whether you're a security researcher, developer, or enthusiast, this tutorial provides the necessary instructions to get you started with reverse engineering Android applications using APKTool on Ubuntu.

---

## **Table of Contents**

1. [Prerequisites](#prerequisites)
2. [Step 1: Install Required Dependencies](#step-1-install-required-dependencies)
3. [Step 2: Create Necessary Directories](#step-2-create-necessary-directories)
4. [Step 3: Download APKTool Script and JAR File](#step-3-download-apktool-script-and-jar-file)
5. [Step 4: Configure APKTool for Global Access](#step-4-configure-apktool-for-global-access)
6. [Step 5: Verify APKTool Installation](#step-5-verify-apktool-installation)
7. [Step 6: Prepare Your APK File](#step-6-prepare-your-apk-file)
8. [Step 7: Decompile the APK](#step-7-decompile-the-apk)
9. [Step 8: Modify the Decompiled APK (Optional)](#step-8-modify-the-decompiled-apk-optional)
10. [Step 9: Recompile the APK](#step-9-recompile-the-apk)
11. [Step 10: Sign the Recompiled APK](#step-10-sign-the-recompiled-apk)
12. [Step 11: Install the Recompiled APK on Your Android Device](#step-11-install-the-recompiled-apk-on-your-android-device)
13. [Summary of Commands](#summary-of-commands)
14. [Common Issues & Solutions](#common-issues--solutions)
15. [Final Tips](#final-tips)

---

## **Prerequisites**

Before diving into APKTool, ensure your system meets the following requirements:

1. **Ubuntu Operating System**: This guide is tailored for Ubuntu. Ensure you're running a compatible version.

2. **Java Installation**: APKTool requires Java to function. We'll install OpenJDK 11 in this guide.

3. **Basic Terminal Knowledge**: Familiarity with navigating directories and executing commands in the terminal will be beneficial.

---

## **Step 1: Install Required Dependencies**

Begin by updating your package lists and installing essential tools like `wget` and `unzip`.

  
sudo apt update
sudo apt install -y wget unzip

---

## **Step 2: Create Necessary Directories**

Organize your workspace by creating dedicated directories for APKTool, APK files, decompiled outputs, and recompiled APKs.

  
# Navigate to your home directory
cd ~

# Create directories
mkdir -p apktool
mkdir -p apkfiles
mkdir -p decompiled_apk
mkdir -p recompiled_apk

- `~/apktool`: Stores APKTool scripts and JAR files.
- `~/apkfiles`: Place your original APK files here.
- `~/decompiled_apk`: Decompiled APK contents will reside here.
- `~/recompiled_apk`: Recompiled and signed APKs will be saved here.

---

## **Step 3: Download APKTool Script and JAR File**

1. **Navigate to the APKTool Directory**

     
   cd ~/apktool

2. **Download the Latest APKTool Script**

     
   wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool

3. **Download the Latest APKTool JAR**

   As of this writing, the latest stable version is **2.8.1**. It's advisable to check the [APKTool Releases](https://github.com/iBotPeaches/Apktool/releases) page for updates.

     
   wget https://github.com/iBotPeaches/Apktool/releases/download/v2.8.1/apktool_2.8.1.jar -O apktool.jar

   > **Note**: Replace `v2.8.1` with the latest version number if a newer release is available.

---

## **Step 4: Configure APKTool for Global Access**

To use `apktool` from any directory in the terminal, move the script and JAR file to a directory that's in your system's `PATH`, such as `/usr/local/bin`.

1. **Make the APKTool Script Executable**

     
   chmod +x apktool

2. **Move APKTool Script and JAR to `/usr/local/bin`**

     
   sudo mv apktool /usr/local/bin/
   sudo mv apktool.jar /usr/local/bin/

3. **Create a Symlink for the JAR File**

   This step ensures that the `apktool` command correctly references the JAR file.

     
   sudo ln -s /usr/local/bin/apktool.jar /usr/local/bin/apktool.jar

   > **Explanation**: The symlink allows the `apktool` script to locate the `apktool.jar` file when executing commands.

---

## **Step 5: Verify APKTool Installation**

Ensure that APKTool is installed correctly by checking its version.

  
apktool -version

**Expected  :**

I: Using Apktool 2.8.1

If you encounter an error stating that `apktool` is not found, ensure that `/usr/local/bin` is in your `PATH` and that you've correctly moved the script and JAR file.

---

## **Step 6: Prepare Your APK File**

1. **Place Your APK in the APK Files Directory**

   Move or copy the APK you wish to reverse engineer into the `~/apkfiles` directory.

     
   cp /path/to/your_app.apk ~/apkfiles/

   > **Example**: If your APK is in the `Downloads` folder:
   >
   >   
   > cp ~/Downloads/your_app.apk ~/apkfiles/
   >  

2. **Navigate to the APK Files Directory**

     
   cd ~/apkfiles

3. **List Files to Confirm**

     
   ls

   You should see `your_app.apk` listed.

---

## **Step 7: Decompile the APK**

Use APKTool to decompile the APK, extracting its resources and smali code.

  
apktool d your_app.apk -o ~/decompiled_apk/your_app

- `d`: Decompile
- `your_app.apk`: Replace with your actual APK filename
- `-o`: Output directory

**Example:**

  
apktool d example_app.apk -o ~/decompiled_apk/example_app

### **Verifying Decompilation**

1. **Navigate to the Decompiled Directory**

     
   cd ~/decompiled_apk/your_app

2. **List Contents**

     
   ls

   You should see directories like `res`, `smali`, and files like `AndroidManifest.xml`.

---

## **Step 8: Modify the Decompiled APK (Optional)**

Now that you've decompiled the APK, you can make various modifications:

- **Resources**: Edit XML layouts, images, and other assets in the `res` directory.
- **Smali Code**: Modify the application's code in the `smali` directory.
- **Manifest**: Adjust permissions or other configurations in `AndroidManifest.xml`.

> **Caution**: Modifying APK files can lead to app instability or security vulnerabilities. Ensure you understand the changes you're making and test thoroughly.

---

## **Step 9: Recompile the APK**

After making your desired modifications, recompile the APK.

1. **Navigate Back to APKTool Directory**

     
   cd ~/apktool

2. **Run APKTool to Recompile**

     
   apktool b ~/decompiled_apk/your_app -o ~/recompiled_apk/recompiled_app.apk

   - `b`: Build (recompile)
   - `~/decompiled_apk/your_app`: Path to the decompiled APK directory
   - `-o`: Output APK file path

3. **Verify Recompilation**

   Navigate to the recompiled directory:

     
   cd ~/recompiled_apk
   ls

   You should see `recompiled_app.apk`.

---

## **Step 10: Sign the Recompiled APK**

Android requires APKs to be signed before installation. We'll use `jarsigner`, which comes with Java, to sign the APK.

### **1. Generate a Keystore (If You Don't Have One)**

If you don't already have a keystore, generate one using `keytool`.

  
keytool -genkey -v -keystore ~/apktool/my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias myalias

- **Parameters Explained**:
  - `-keystore`: Path to the keystore file
  - `-keyalg`: Key algorithm (RSA is recommended)
  - `-keysize`: Size of the key (2048 bits is standard)
  - `-validity`: Validity period in days
  - `-alias`: Alias for your key

**Example:**

  
keytool -genkey -v -keystore ~/apktool/my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias examplealias

You'll be prompted to enter details like password, name, organizational unit, etc. **Remember your keystore password and alias**, as you'll need them to sign the APK.

### **2. Sign the APK Using `jarsigner`**

  
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/apktool/my-release-key.jks ~/recompiled_apk/recompiled_app.apk examplealias

- **Parameters Explained**:
  - `-verbose`: Enables verbose output
  - `-sigalg`: Signature algorithm
  - `-digestalg`: Digest algorithm
  - `-keystore`: Path to your keystore
  - `~/recompiled_apk/recompiled_app.apk`: Path to your recompiled APK
  - `examplealias`: Your keystore alias

**Example:**

  
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/apktool/my-release-key.jks ~/recompiled_apk/recompiled_app.apk examplealias

You'll be prompted to enter your keystore password.

### **3. Verify the APK Signature**

Ensure that the APK is signed correctly.

  
jarsigner -verify ~/recompiled_apk/recompiled_app.apk

**Expected  :**

jar verified.

### **4. (Optional) Align the APK Using `zipalign`**

For optimal APK performance, align it using `zipalign`, a tool provided by the Android SDK Build-Tools.

1. **Install `zipalign`**

   If `zipalign` isn't available via `apt`, you can install it as part of the Android SDK.

     
   sudo apt install -y zipalign

   > **Note**: If `zipalign` isn't found, consider installing the Android SDK from the [official website](https://developer.android.com/studio#downloads) and add `zipalign` to your `PATH`.

2. **Run `zipalign`**

     
   zipalign -v 4 ~/recompiled_apk/recompiled_app.apk ~/recompiled_apk/recompiled_app_aligned.apk

   - `-v`: Verbose output
   - `4`: Byte alignment (standard for Android)
   - `~/recompiled_apk/recompiled_app.apk`: Input APK
   - `~/recompiled_apk/recompiled_app_aligned.apk`: Output aligned APK

---

## **Step 11: Install the Recompiled APK on Your Android Device**

1. **Transfer the APK to Your Device**

   Copy `recompiled_app_aligned.apk` (or `recompiled_app.apk` if you skipped alignment) to your Android device via USB, Bluetooth, or any other preferred method.

2. **Enable Installation from Unknown Sources**

   On your Android device, navigate to **Settings > Security** and enable **"Install from Unknown Sources"** or **"Install unknown apps"** for the source (e.g., File Manager) you're using to install the APK.

3. **Install the APK**

   Using a file manager on your device, locate the APK file and tap to install.

   > **Troubleshooting Installation Issues**:
   >
   > - **Signature Mismatch**: If the original APK was signed with a different key, you might encounter installation issues. Consider uninstalling the original app before installing the recompiled one.
   > - **Version Code**: Ensure that the version code is updated if you're installing over an existing app to prevent conflicts.

---

## **Summary of Commands**

For quick reference, here's a consolidated list of all commands used in this tutorial:

  
# Step 1: Update and install dependencies
sudo apt update
sudo apt install -y wget unzip

# Step 2: Create necessary directories
cd ~
mkdir -p apktool
mkdir -p apkfiles
mkdir -p decompiled_apk
mkdir -p recompiled_apk

# Step 3: Download APKTool script and JAR
cd ~/apktool
wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
wget https://github.com/iBotPeaches/Apktool/releases/download/v2.8.1/apktool_2.8.1.jar -O apktool.jar

# Step 4: Configure APKTool for global access
chmod +x apktool
sudo mv apktool /usr/local/bin/
sudo mv apktool.jar /usr/local/bin/
sudo ln -s /usr/local/bin/apktool.jar /usr/local/bin/apktool.jar

# Step 5: Verify APKTool installation
apktool -version

# Step 6: Prepare your APK file
cp ~/Downloads/your_app.apk ~/apkfiles/
cd ~/apkfiles
ls

# Step 7: Decompile the APK
apktool d your_app.apk -o ~/decompiled_apk/your_app

# Step 8: Modify the Decompiled APK (Optional)
# (Make your changes within ~/decompiled_apk/your_app)

# Step 9: Recompile the APK
cd ~/apktool
apktool b ~/decompiled_apk/your_app -o ~/recompiled_apk/recompiled_app.apk

# Step 10: Sign the Recompiled APK
# Generate a keystore (if needed)
keytool -genkey -v -keystore ~/apktool/my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias myalias

# Sign the APK
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ~/apktool/my-release-key.jks ~/recompiled_apk/recompiled_app.apk myalias

# Verify the APK signature
jarsigner -verify ~/recompiled_apk/recompiled_app.apk

# (Optional) Align the APK using zipalign
zipalign -v 4 ~/recompiled_apk/recompiled_app.apk ~/recompiled_apk/recompiled_app_aligned.apk

# Step 11: Install the Recompiled APK on Your Android Device
# (Transfer and install the APK as described above)

---

## **Common Issues & Solutions**

1. **Directory Not Found Errors**

   - **Error**: `cd: /mnt/c/users/micha/downloads/apkfiles/: No such file or directory`
   - **Solution**: Ensure that the directory exists. Create it using:
       
     mkdir -p /mnt/c/users/micha/downloads/apkfiles/
     > **Recommendation**: For simplicity and to avoid permission issues, consider using directories within the WSL home directory (`~/apkfiles`) instead of Windows paths.

2. **APK File Not Found**

   - **Error**: `Input file (/root/apktool/your_app.apk) was not found or was not readable.`
   - **Solution**: Ensure that the APK file exists in the specified directory (`~/apkfiles/`). Verify using:
       
     ls ~/apkfiles/
     If not present, copy the APK into the directory.

3. **Decompiled Directory Must Be a Directory**

   - **Error**: `brut.directory.DirectoryException: file must be a directory: /mnt/c/users/micha/downloads/decompiled_apk`
   - **Solution**: Ensure that the output path is a directory. Use:
       
     mkdir -p ~/decompiled_apk/your_app
     before decompiling, or let APKTool create it by specifying a new directory name.

4. **Permissions Issues**

   - **Error**: Permission denied when moving files to `/usr/local/bin/`
   - **Solution**: Ensure you're using `sudo` to execute commands that require administrative privileges.

5. **APKTool Not Recognized**

   - **Error**: `command not found: apktool`
   - **Solution**: Ensure that `/usr/local/bin` is in your `PATH` and that you've correctly moved the `apktool` script and `apktool.jar`. You can check your `PATH` using:
       
     echo $PATH
     If `/usr/local/bin` is missing, add it by editing your `~/.bashrc` or `~/.profile` file.

6. **Signing Errors**

   - **Error**: Issues during the `jarsigner` process
   - **Solution**: Ensure that you're using the correct keystore path, alias, and password. Re-generate the keystore if necessary.

---

## **Final Tips**

- **Stay Organized**: Keeping all your APKTool files and APKs within your home directory (e.g., `~/apktool`, `~/apkfiles`) helps prevent permission issues and simplifies file management.

- **Backup Original APKs**: Always keep a copy of the original APK before making any modifications. This ensures you can revert changes if something goes wrong.

- **Stay Updated**: APKTool updates may bring improvements or bug fixes. Regularly check the [official APKTool repository](https://github.com/iBotPeaches/Apktool) for updates and refer to their [documentation](https://ibotpeaches.github.io/Apktool/documentation/) for advanced usage.

- **Understand the Risks**: Reverse engineering APKs can violate terms of service or copyright laws. Ensure you have the right to modify the APKs you're working with.

- **Use a Non-Root User**: Operating as `root` can pose security risks. It's advisable to perform these operations using a standard user account and utilize `sudo` when necessary.

- **Learn Smali**: Understanding Smali (the assembly language for Android) can significantly enhance your ability to modify APKs effectively.

By meticulously following this guide and adhering to best practices, you should be able to install and use APKTool on Ubuntu seamlessly, empowering you to reverse engineer Android APK files with confidence.
