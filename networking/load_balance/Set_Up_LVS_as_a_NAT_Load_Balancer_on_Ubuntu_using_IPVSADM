### How to Set Up LVS as a NAT Load Balancer on Ubuntu using IPVSADM

This tutorial will guide you through setting up Linux Virtual Server (LVS) as a NAT (Network Address Translation) load balancer on Ubuntu, using tools like `ipvsadm`. By the end of this guide, you'll have a scalable and highly available network service.

#### Prerequisites

- An Ubuntu server to act as the LVS load balancer.
- Two or more backend servers (real servers) to receive the load-balanced traffic.
- Root or sudo access on the load balancer and backend servers.

### Step 1: Install Necessary Packages

First, install the required packages on your load balancer server.

  
sudo apt update
sudo apt install ipvsadm

### Step 2: Configure the LVS Load Balancer

#### Enable IP Forwarding

Enable IP forwarding on the load balancer to allow it to forward packets between the clients and the backend servers.

  
sudo sysctl -w net.ipv4.ip_forward=1

To make this change permanent, edit `/etc/sysctl.conf` and add or uncomment the following line:

  
net.ipv4.ip_forward=1

#### Configure IPVSADM Rules

Use `ipvsadm` to set up the load balancing rules. Assume your load balancer's IP address is `192.168.1.1`, and the backend servers are `192.168.1.2` and `192.168.1.3`.

  
sudo ipvsadm -A -t 192.168.1.1:80 -s rr
sudo ipvsadm -a -t 192.168.1.1:80 -r 192.168.1.2:80 -m
sudo ipvsadm -a -t 192.168.1.1:80 -r 192.168.1.3:80 -m

Here, `-A` adds a new virtual service, `-t` specifies TCP protocol, `-s rr` sets the scheduling method to round-robin, and `-a` adds real servers with the `-m` flag indicating NAT mode.

### Step 3: Configure Backend Servers

Each backend server must be configured to route its traffic through the LVS load balancer. On each backend server, add a route to the load balancer.

  
sudo route add default gw 192.168.1.1

### Step 4: Verify Configuration

Check the status of your LVS setup using `ipvsadm`:

  
sudo ipvsadm -L -n

You should see output similar to this:

IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -> RemoteAddress:Port Forward Weight ActiveConn InActConn
TCP  192.168.1.1:80 rr
  -> 192.168.1.2:80           Masq    1      0          0
  -> 192.168.1.3:80           Masq    1      0          0

### Step 5: Persist Configuration

To ensure the IPVS rules persist across reboots, you can save them to a file and restore them at boot time.

#### Save Rules

  
sudo ipvsadm-save > /etc/ipvsadm.rules

#### Restore Rules on Boot

Create a systemd service to restore the rules on boot.

  
sudo nano /etc/systemd/system/ipvsadm.service

Add the following content:

 ini
[Unit]
Description=IPVSADM Service
After=network.target

[Service]
ExecStart=/sbin/ipvsadm-restore < /etc/ipvsadm.rules

[Install]
WantedBy=multi-user.target

Enable the service:

  
sudo systemctl enable ipvsadm
sudo systemctl start ipvsadm

### Step 6: Testing

Test the configuration by sending traffic to the load balancer's IP address (`192.168.1.1`). Ensure the traffic is distributed to the backend servers (`192.168.1.2` and `192.168.1.3`) as expected.

---

