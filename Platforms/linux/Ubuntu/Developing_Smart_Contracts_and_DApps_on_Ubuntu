Tutorial: Developing Smart Contracts and DApps on Ubuntu
Step 1: Update Ubuntu
Ensure your Ubuntu system is up-to-date:

 
 
sudo apt update && sudo apt upgrade -y
Step 2: Install Node.js and npm
Node.js is required for the development of DApps. Install it using the following commands:

 
 
sudo apt install -y nodejs npm
Verify the installation:

 
 
node -v
npm -v
Step 3: Install Truffle
Truffle is a popular framework for developing Ethereum smart contracts. Install it globally using npm:

 
 
sudo npm install -g truffle
Verify the installation:

 
 
truffle version
Step 4: Install Ganache
Ganache is a personal blockchain for Ethereum development that you can use to deploy contracts, develop applications, and run tests. Install Ganache CLI globally using npm:

 
 
sudo npm install -g ganache-cli
Alternatively, you can download the Ganache GUI from the official website and follow the installation instructions.

Step 5: Set Up a New Truffle Project
Create a new directory for your project and navigate into it:

 
 
mkdir MyDApp
cd MyDApp
Initialize a new Truffle project:

 
 
truffle init
Step 6: Create a Simple Smart Contract
Navigate to the contracts directory and create a new file named SimpleStorage.sol:

 
 
cd contracts
nano SimpleStorage.sol
Paste the following Solidity code into SimpleStorage.sol:

solidity
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 storedData;

    function set(uint256 x) public {
        storedData = x;
    }

    function get() public view returns (uint256) {
        return storedData;
    }
}
Save and exit the file (Ctrl+O, Enter, Ctrl+X).

Step 7: Compile the Smart Contract
Navigate back to the root of your project and compile the contract:

 
 
truffle compile
Step 8: Deploy the Smart Contract
Create a deployment script in the migrations directory. Create a file named 2_deploy_contracts.js:

 
 
cd migrations
nano 2_deploy_contracts.js
Paste the following JavaScript code into 2_deploy_contracts.js:

javascript
 
const SimpleStorage = artifacts.require("SimpleStorage");

module.exports = function (deployer) {
  deployer.deploy(SimpleStorage);
};
Save and exit the file (Ctrl+O, Enter, Ctrl+X).

Step 9: Run Ganache
In a new terminal window, start Ganache CLI:

 
 
ganache-cli
Step 10: Deploy to Ganache
With Ganache running, deploy your contract to the local blockchain:

 
 
truffle migrate
Step 11: Interact with the Smart Contract
You can interact with your deployed smart contract using Truffle Console. Open the Truffle Console:

 
 
truffle console
Within the Truffle Console, you can interact with your smart contract. For example:

javascript
 
let instance = await SimpleStorage.deployed();
await instance.set(42);
let value = await instance.get();
console.log(value.toNumber());
This should log 42 to the console.

Step 12: Develop a Frontend for Your DApp
To develop a frontend for your DApp, you can use frameworks like React.js. First, install create-react-app globally:

 
 
sudo npm install -g create-react-app
Create a new React application:

 
 
npx create-react-app frontend
cd frontend
Install Web3.js, a library to interact with the Ethereum blockchain:

 
 
npm install web3
Step 13: Integrate the Smart Contract with the Frontend
In your React application, you can integrate the smart contract using Web3.js. Create a new file named SimpleStorage.js inside the src directory and add the following code to interact with the smart contract:

javascript
 
import Web3 from 'web3';
import SimpleStorage from './contracts/SimpleStorage.json';

const getWeb3 = () => {
  return new Promise((resolve, reject) => {
    window.addEventListener('load', () => {
      let web3 = window.web3;
      if (typeof web3 !== 'undefined') {
        web3 = new Web3(web3.currentProvider);
        resolve(web3);
      } else {
        reject('No web3 provider found');
      }
    });
  });
};

const getContract = async (web3) => {
  const networkId = await web3.eth.net.getId();
  const deployedNetwork = SimpleStorage.networks[networkId];
  return new web3.eth.Contract(
    SimpleStorage.abi,
    deployedNetwork && deployedNetwork.address
  );
};

export { getWeb3, getContract };
Use this code in your React components to interact with the smart contract. For example, in App.js:

javascript
 
import React, { useState, useEffect } from 'react';
import { getWeb3, getContract } from './SimpleStorage';

const App = () => {
  const [web3, setWeb3] = useState(null);
  const [contract, setContract] = useState(null);
  const [value, setValue] = useState(0);
  const [newValue, setNewValue] = useState(0);

  useEffect(() => {
    const init = async () => {
      const web3Instance = await getWeb3();
      const contractInstance = await getContract(web3Instance);
      setWeb3(web3Instance);
      setContract(contractInstance);
      const storedValue = await contractInstance.methods.get().call();
      setValue(storedValue);
    };
    init();
  }, []);

  const updateValue = async () => {
    const accounts = await web3.eth.getAccounts();
    await contract.methods.set(newValue).send({ from: accounts[0] });
    const updatedValue = await contract.methods.get().call();
    setValue(updatedValue);
  };

  return (
    <div>
      <h1>Simple Storage</h1>
      <p>Stored Value: {value}</p>
      <input
        type="number"
        value={newValue}
        onChange={(e) => setNewValue(e.target.value)}
      />
      <button onClick={updateValue}>Update Value</button>
    </div>
  );
};

export default App;
This example demonstrates a simple frontend that interacts with the smart contract. You can expand on this by adding more features and improving the UI.

Conclusion
You now have a basic setup for developing smart contracts and DApps on Ubuntu. You can further explore Ethereum development, learn more about Solidity, and build more complex decentralized applications.
