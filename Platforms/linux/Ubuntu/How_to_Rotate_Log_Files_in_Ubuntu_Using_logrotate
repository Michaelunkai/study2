## How to Rotate Log Files in Ubuntu Using logrotate

To manage and rotate log files in Ubuntu, you can use the `logrotate` utility. `logrotate` helps in rotating, compressing, and removing old log files to prevent them from using too much disk space. Here’s how you can set it up:

### Step 1: Install logrotate

`logrotate` is usually installed by default on Ubuntu. You can check if it's installed by running:

  
logrotate --version

If it’s not installed, you can install it using:

  
sudo apt-get update
sudo apt-get install logrotate

### Step 2: Configuration Files

`logrotate` has a main configuration file `/etc/logrotate.conf` and additional configuration files in the `/etc/logrotate.d/` directory.

### Step 3: Basic Configuration

Here’s a basic example of how to configure `logrotate` for a specific log file:

1. **Create a Configuration File:**

   Create a configuration file for your log in `/etc/logrotate.d/`. For example, if you have a log file at `/var/log/myapp.log`, create a file named `/etc/logrotate.d/myapp`:

     
   sudo nano /etc/logrotate.d/myapp

2. **Add the Following Configuration:**

    plaintext
   /var/log/myapp.log {
       daily
       missingok
       rotate 7
       compress
       delaycompress
       notifempty
       create 0640 root root
       postrotate
           systemctl reload myapp
       endscript
   }

### Explanation of Configuration Directives

- `/var/log/myapp.log`: Specifies the log file to rotate.
- `daily`: Rotate the log file daily. Other options include `weekly`, `monthly`, etc.
- `missingok`: If the log file is missing, go on to the next one without issuing an error message.
- `rotate 7`: Keep seven rotated logs before deleting old ones.
- `compress`: Compress the rotated log files.
- `delaycompress`: Delay compression of the previous log file until the next rotation.
- `notifempty`: Do not rotate the log if it is empty.
- `create 0640 root root`: Create a new log file with specified permissions and ownership after rotation.
- `postrotate`: The commands inside this block will be executed after the log file is rotated. You can reload the service if necessary.

### Step 4: Test Your Configuration

Before applying your configuration, it’s good practice to test it:

  
sudo logrotate -d /etc/logrotate.d/myapp

This command will simulate the log rotation and show what would happen, but it will not actually rotate the logs.

### Step 5: Force Log Rotation

If you want to force log rotation to see it in action:

  
sudo logrotate -f /etc/logrotate.d/myapp

### Step 6: Schedule Logrotate

`logrotate` is typically run by a cron job configured in `/etc/cron.daily/logrotate`. You can check or modify this file if necessary.

### Example of a logrotate.d Configuration

Here’s a full example for rotating nginx logs, which you can adapt for your application:

 plaintext
/var/log/nginx/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 0640 www-data www-data
     aredscripts
    postrotate
        [ -f /var/run/nginx.pid ] && kill -USR1 `cat /var/run/nginx.pid`
    endscript
}

This example will rotate all `.log` files in `/var/log/nginx/` daily, keep 14 days of logs, compress them, and signal nginx to reopen its log files after rotation.

By configuring `logrotate` properly, you can efficiently manage your log files and ensure that they don’t consume too much disk space while keeping necessary logs available for troubleshooting.
