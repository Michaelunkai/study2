## How to Use Convolutional and Pooling Layers in a Neural Network with Ubuntu

### Prerequisites
1. **Ubuntu** with **Python 3.7+**.
2. **pip** and **virtual environment tool** installed:
   ```bash
   sudo apt install python3-pip python3-venv
   ```

### Step 1: Set Up the Environment
1. Create and navigate to the project directory:
   ```bash
   mkdir ~/cnn_project
   cd ~/cnn_project
   ```

2. Create and activate a virtual environment:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

3. Install necessary libraries:
   ```bash
   pip install tensorflow keras numpy matplotlib
   ```

### Step 2: Create the CNN Script
1. Create a Python script:
   ```bash
   nano cnn_example.py
   ```

2. Add the following code:

   ```python
   import tensorflow as tf
   from tensorflow.keras import datasets, layers, models
   import matplotlib.pyplot as plt

   (train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
   train_images, test_images = train_images / 255.0, test_images / 255.0

   model = models.Sequential()
   model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
   model.add(layers.MaxPooling2D((2, 2)))
   model.add(layers.Conv2D(64, (3, 3), activation='relu'))
   model.add(layers.MaxPooling2D((2, 2)))
   model.add(layers.Conv2D(64, (3, 3), activation='relu'))

   model.add(layers.Flatten())
   model.add(layers.Dense(64, activation='relu'))
   model.add(layers.Dense(10))

   model.summary()

   model.compile(optimizer='adam',
                 loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                 metrics=['accuracy'])

   history = model.fit(train_images, train_labels, epochs=10, 
                       validation_data=(test_images, test_labels))

   plt.plot(history.history['accuracy'], label='accuracy')
   plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
   plt.xlabel('Epoch')
   plt.ylabel('Accuracy')
   plt.ylim([0, 1])
   plt.legend(loc='lower right')
   plt.show()

   test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
   print(f"Test accuracy: {test_acc}")
   ```

### Step 3: Run the Script
1. Run the script:
   ```bash
   python cnn_example.py
   ```

### Output Explanation (50 words)
The code trains a Convolutional Neural Network (CNN) on the CIFAR-10 dataset. It extracts features through convolutional layers, reduces dimensionality with pooling layers, and classifies images using dense layers. The script outputs model accuracy, showing how well the CNN performs on unseen test data.
