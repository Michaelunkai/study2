### Multithreading for Beginners with Step-by-Step Setup and Commands on Ubuntu

**Introduction**  
Multithreading is a vital concept in computer science that allows concurrent execution of multiple threads, improving performance and resource optimization. It is especially useful in applications requiring high computational power or multitasking. In this tutorial, we will explore multithreading in Java, covering its basic to advanced concepts.

#### Why Learn Multithreading?
- Essential for high-performance applications.
- Vital for modern multi-core processors.
- Enhances performance in tasks like data processing, simulations, and UI responsiveness.
- Key for career opportunities in game development, big data, and finance.

---

### Step-by-Step Tutorial for Setting Up and Running Multithreading in Java on Ubuntu

#### Step 1: Install Java Development Kit (JDK)
First, we need to install JDK to write and run Java programs.

  
sudo apt update
sudo apt install default-jdk -y
java -version

#### Step 2: Create a Java Project Directory
Create a directory for the Java project and navigate to it.

  
mkdir ~/multithreading-demo
cd ~/multithreading-demo

#### Step 3: Create a Java Program for Multithreading
Using the `nano` editor, create a file `MultithreadingDemo.java`.

  
nano MultithreadingDemo.java

Add the following Java code:

 java
class MultithreadingDemo extends Thread {
    public void run() {
        try {
            // Displaying the thread that is running
            System.out.println("Thread " + Thread.currentThread().getId() + " is running");
        } catch (Exception e) {
            // Catching any exceptions
            System.out.println("Exception is caught");
        }
    }

    public static void main(String[] args) {
        int numberOfThreads = 5; // Number of threads to run

        for (int i = 0; i < numberOfThreads; i++) {
            MultithreadingDemo thread = new MultithreadingDemo();
            thread.start();
        }
    }
}

#### Step 4: Compile the Java Program
To compile the Java program, use the `javac` command.

  
javac MultithreadingDemo.java

#### Step 5: Run the Java Program
Run the compiled Java program with the following command:

  
java MultithreadingDemo

You should see the output with thread IDs indicating multiple threads running concurrently.

---

### Step-by-Step Advanced Multithreading Concepts in Java

#### Example 1: Using Runnable Interface
Edit the program to use the `Runnable` interface.

  
nano RunnableDemo.java

Add the following code:

 java
class RunnableDemo implements Runnable {
    public void run() {
        try {
            System.out.println("Thread " + Thread.currentThread().getId() + " is running");
        } catch (Exception e) {
            System.out.println("Exception is caught");
        }
    }

    public static void main(String[] args) {
        int numberOfThreads = 5;

        for (int i = 0; i < numberOfThreads; i++) {
            Thread thread = new Thread(new RunnableDemo());
            thread.start();
        }
    }
}

Compile and run the program:

  
javac RunnableDemo.java
java RunnableDemo

---

#### Example 2: Synchronized Blocks and Methods
To manage shared resources between threads, synchronized blocks and methods are essential. Create a new file `SynchronizedDemo.java`.

  
nano SynchronizedDemo.java

Add the following code:

 java
class SynchronizedCounter {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

class SynchronizedDemo extends Thread {
    private final SynchronizedCounter counter;

    public SynchronizedDemo(SynchronizedCounter counter) {
        this.counter = counter;
    }

    public void run() {
        for (int i = 0; i < 1000; i++) {
            counter.increment();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        SynchronizedCounter counter = new SynchronizedCounter();
        SynchronizedDemo thread1 = new SynchronizedDemo(counter);
        SynchronizedDemo thread2 = new SynchronizedDemo(counter);

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        System.out.println("Final count: " + counter.getCount());
    }
}

Compile and run the program:

  
javac SynchronizedDemo.java
java SynchronizedDemo

---

### Step 6: ExecutorService for Thread Pool Management
Javaâ€™s `ExecutorService` allows you to manage a pool of threads efficiently.

  
nano ExecutorServiceDemo.java

Add the following code:

 java
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class ExecutorServiceDemo implements Runnable {
    public void run() {
        System.out.println("Thread " + Thread.currentThread().getId() + " is running");
    }

    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(3);
        for (int i = 0; i < 5; i++) {
            executor.execute(new ExecutorServiceDemo());
        }
        executor.shutdown();
    }
}

Compile and run:

  
javac ExecutorServiceDemo.java
java ExecutorServiceDemo

---

### Conclusion
In this tutorial, we covered the basics of multithreading in Java, including creating threads with `Thread` and `Runnable`, using synchronized methods for resource management, and managing thread pools with `ExecutorService`. These examples are just a starting point, and there is much more to explore in advanced multithreading topics like deadlocks, atomic variables, and concurrency utilities.

### Further Reading
- Explore Java concurrency utilities like `CountDownLatch`, `BlockingQueue`, `ConcurrentMap`, and `CyclicBarrier`.
- Learn about advanced frameworks like `ForkJoinPool` for parallel execution.

