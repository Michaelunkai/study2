Creating a REST API with Flask, SQLAlchemy, and Basic Authentication on Ubuntu
In this tutorial, we will guide you through creating a robust REST API using Flask, SQLAlchemy, and Basic Authentication on an Ubuntu system. We'll cover everything from setting up your environment to deploying your application.

Step 1: Install Python and Pip
First, ensure you have Python and pip installed.

 
 
sudo apt update
sudo apt install  3  3-pip -y
Step 2: Install Flask and Extensions
Install Flask, SQLAlchemy, and Flask-HTTPAuth using pip.

 
 
pip3 install Flask Flask-SQLAlchemy Flask-HTTPAuth
Step 3: Create a Project Directory
Create a directory for your project and navigate into it.

 
 
mkdir my_rest_api
cd my_rest_api
Step 4: Create the Flask App
Create a file named app.py and open it in a text editor.

 
 
nano app.py
Step 5: Write the Flask Code
Add the following code to app.py:

 
 
from flask import Flask, request, jsonify
from flask_ alchemy import SQLAlchemy
from flask_httpauth import HTTPBasicAuth

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = ' ite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
auth = HTTPBasicAuth()

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)

# Create the database
db.create_all()

# Basic auth credentials
users = {
    "admin": "secret"
}

@auth.verify_password
def verify_password(username, password):
    if username in users and users[username] == password:
        return username

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({"message": "Resource not found"}), 404

@app.errorhandler(400)
def bad_request(error):
    return jsonify({"message": "Bad request"}), 400

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"message": "Internal server error"}), 500

# Routes
@app.route('/users', methods=['GET'])
@auth.login_required
def get_users():
    users = User.query.all()
    return jsonify([{"id": user.id, "name": user.name} for user in users])

@app.route('/users/<int:user_id>', methods=['GET'])
@auth.login_required
def get_user(user_id):
    user = User.query.get_or_404(user_id)
    return jsonify({"id": user.id, "name": user.name})

@app.route('/users', methods=['POST'])
@auth.login_required
def add_user():
    new_user_data = request.get_json()
    if not new_user_data or not 'name' in new_user_data:
        return jsonify({"message": "Bad request"}), 400
    new_user = User(name=new_user_data['name'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"id": new_user.id, "name": new_user.name}), 201

@app.route('/users/<int:user_id>', methods=['PUT'])
@auth.login_required
def update_user(user_id):
    user = User.query.get_or_404(user_id)
    updates = request.get_json()
    if not updates or not 'name' in updates:
        return jsonify({"message": "Bad request"}), 400
    user.name = updates.get('name', user.name)
    db.session.commit()
    return jsonify({"id": user.id, "name": user.name})

@app.route('/users/<int:user_id>', methods=['DELETE'])
@auth.login_required
def delete_user(user_id):
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    return '', 204

if __name__ == '__main__':
    app.run(debug=True)
Step 6: Run the Flask App
Save the file and run the Flask app.

 
 
 3 app.py
By default, Flask runs on port 5000. You can access the API at http://127.0.0.1:5000.

Step 7: Test the API
You can use curl to test the API or any API testing tool like Postman.

Get all users
 
 
curl -u admin:secret -X GET http://127.0.0.1:5000/users
Get a single user
 
 
curl -u admin:secret -X GET http://127.0.0.1:5000/users/1
Add a new user
 
 
curl -u admin:secret -X POST -H "Content-Type: application/json" -d '{"name": "New User"}' http://127.0.0.1:5000/users
Update a user
 
 
curl -u admin:secret -X PUT -H "Content-Type: application/json" -d '{"name": "Updated User"}' http://127.0.0.1:5000/users/1
Delete a user
 
 
curl -u admin:secret -X DELETE http://127.0.0.1:5000/users/1
Step 8: Deploying the Application
Install Gunicorn
Install Gunicorn for production deployment.

 
 
pip3 install gunicorn
Create a Gunicorn Service
Create a Gunicorn service file.

 
 
sudo nano /etc/systemd/system/my_rest_api.service
Add the following content:

ini
 
[Unit]
Description=Gunicorn instance to serve my_rest_api
After=network.target

[Service]
User=your_username
Group=www-data
WorkingDirectory=/path/to/my_rest_api
ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:my_rest_api.sock -m 007 wsgi:app

[Install]
WantedBy=multi-user.target
Create wsgi.py
Create a wsgi.py file in your project directory.

 
 
from app import app

if __name__ == "__main__":
    app.run()
Start and Enable the Gunicorn Service
Reload and start the Gunicorn service.

 
 
sudo systemctl daemon-reload
sudo systemctl start my_rest_api
sudo systemctl enable my_rest_api
Step 9: Configure Nginx
Install Nginx
Install Nginx if not already installed.

 
 
sudo apt install nginx -y
Configure Nginx
Create an Nginx configuration file.

 
 
sudo nano /etc/nginx/sites-available/my_rest_api
Add the following content:

ini
 
server {
    listen 80;
    server_name your_domain_or_IP;

    location / {
        proxy_pass http://unix:/path/to/my_rest_api/my_rest_api.sock;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Enable the configuration and restart Nginx.

 
 
sudo ln -s /etc/nginx/sites-available/my_rest_api /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl restart nginx
Your REST API is now deployed and accessible via your domain or IP address.
