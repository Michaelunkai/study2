Here are 50 of the most useful and commonly used npm (Node Package Manager) commands:

1. **`npm init`**: Initialize a new npm project and create a `package.json` file.
2. **`npm install`**: Install all dependencies listed in `package.json`.
3. **`npm install <package-name>`**: Install a package locally and add it to `dependencies`.
4. **`npm install -g <package-name>`**: Install a package globally.
5. **`npm install --save-dev <package-name>`**: Install a package and add it to `devDependencies`.
6. **`npm update`**: Update all installed packages to the latest version.
7. **`npm update <package-name>`**: Update a specific package to the latest version.
8. **`npm uninstall <package-name>`**: Uninstall a package and remove it from `dependencies`.
9. **`npm uninstall -g <package-name>`**: Uninstall a globally installed package.
10. **`npm prune`**: Remove packages that are not listed in `dependencies`.
11. **`npm list`**: List all installed packages in the current project.
12. **`npm list -g`**: List all globally installed packages.
13. **`npm outdated`**: Check for outdated packages.
14. **`npm view <package-name>`**: View details of a package in the npm registry.
15. **`npm show <package-name>`**: Alias for `npm view`.
16. **`npm search <term>`**: Search for packages in the npm registry.
17. **`npm start`**: Start a project, typically runs a predefined script in `package.json`.
18. **`npm stop`**: Stop a running project, typically runs a predefined script in `package.json`.
19. **`npm test`**: Run tests defined in the `test` script of `package.json`.
20. **`npm run <script>`**: Run a custom script defined in `package.json`.
21. **`npm link`**: Symlink a package folder to the global `node_modules` directory.
22. **`npm unlink`**: Remove a symlinked package.
23. **`npm ci`**: Install dependencies from `package-lock.json` and clean `node_modules`.
24. **`npm cache clean --force`**: Clean the npm cache.
25. **`npm config set <key> <value>`**: Set a configuration variable.
26. **`npm config get <key>`**: Get a configuration variable.
27. **`npm config delete <key>`**: Delete a configuration variable.
28. **`npm config list`**: List all npm configuration variables.
29. **`npm whoami`**: Display the npm username of the currently logged-in user.
30. **`npm login`**: Log in to the npm registry.
31. **`npm logout`**: Log out of the npm registry.
32. **`npm publish`**: Publish a package to the npm registry.
33. **`npm unpublish <package-name>`**: Remove a package from the npm registry.
34. **`npm version <update_type>`**: Bump the package version (major, minor, patch).
35. **`npm pack`**: Create a tarball from a package.
36. **`npm rebuild`**: Rebuild a package.
37. **`npm dedupe`**: Reduce duplication in `node_modules`.
38. **`npm audit`**: Run a security audit on project dependencies.
39. **`npm audit fix`**: Fix vulnerabilities reported by `npm audit`.
40. **`npm doctor`**: Check the current npm installation for potential problems.
41. **`npm fund`**: List funding information for dependencies.
42. **`npm help`**: Display help information about npm commands.
43. **`npm root`**: Display the root folder of the current npm project.
44. **`npm root -g`**: Display the root folder of globally installed packages.
45. **`npm bin`**: Display the npm bin folder.
46. **`npm bin -g`**: Display the npm global bin folder.
47. **`npm completion`**: Enable command-line completion for npm commands.
48. **`npm shrinkwrap`**: Lock down dependency versions (deprecated in favor of `package-lock.json`).
49. **`npm init -y`**: Initialize a new npm project with default settings.
50. **`npm doctor`**: Check your environment for inconsistencies and potential problems.

These commands cover a wide range of npm functionalities, from project initialization and package management to configuration and security auditing.
