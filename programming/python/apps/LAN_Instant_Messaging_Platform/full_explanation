Creating your own LAN instant messaging platform involves several steps, including setting up a server, creating a client application, and ensuring secure communication between them. Here's a step-by-step guide to get you started on Ubuntu:

### Step 1: Set Up the Server

1. **Install Required Packages:**

   Open your terminal and install the necessary packages:

   ``` 
   sudo apt update
   sudo apt install  3  3-pip
   ```

2. **Create a Virtual Environment:**

   Create and activate a virtual environment to manage your project dependencies:

   ``` 
    3 -m venv chat_server_env
   source chat_server_env/bin/activate
   ```

3. **Install Flask and Flask-SocketIO:**

   Flask and Flask-SocketIO will be used to create the server:

   ``` 
   pip install flask flask-socketio
   ```

4. **Create the Server Script:**

   Create a new file `server.py` and add the following code:

   ``` 
   from flask import Flask, render_template
   from flask_socketio import SocketIO, send

   app = Flask(__name__)
   app.config['SECRET_KEY'] = 'secret!'
   socketio = SocketIO(app)

   @app.route('/')
   def index():
       return render_template('index.html')

   @socketio.on('message')
   def handleMessage(msg):
       print('Message: ' + msg)
       send(msg, broadcast=True)

   if __name__ == '__main__':
       socketio.run(app, host='0.0.0.0', port=5000)
   ```

5. **Create the HTML Template:**

   Create a directory named `templates` and within it, create a file `index.html` with the following content:

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>Chat</title>
       <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
       <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
       <style>
           #messages {
               list-style-type: none;
               margin: 0;
               padding: 0;
           }
           #messages li {
               padding: 8px;
               margin-bottom: 2px;
               background-color: #f4f4f4;
           }
       </style>
   </head>
   <body>
       <ul id="messages"></ul>
       <input id="myMessage" autocomplete="off" /><button onclick="sendMessage()">Send</button>

       <script>
           var socket = io();
           $('form').submit(function() {
               socket.emit('message', $('#myMessage').val());
               $('#myMessage').val('');
               return false;
           });

           socket.on('message', function(msg){
               $('#messages').append($('<li>').text(msg));
           });

           function sendMessage() {
               var msg = $('#myMessage').val();
               socket.emit('message', msg);
               $('#myMessage').val('');
           }
       </script>
   </body>
   </html>
   ```

6. **Run the Server:**

   Start the server:

   ``` 
     server.py
   ```

### Step 2: Access the Chat Application

1. **Find the Server IP Address:**

   Find your local IP address using:

   ``` 
   hostname -I
   ```

   Note down the IP address.

2. **Open the Chat Application:**

   Open a web browser on any computer within the LAN and navigate to `http://<server-ip>:5000`.

### Step 3: Securing the Communication (Optional but recommended)

1. **Install SSL Certificates:**

   To secure communication, you can use SSL certificates. One way to obtain free SSL certificates is using [Let's Encrypt](https://letsencrypt.org/).

2. **Modify Server Code for SSL:**

   Update `server.py` to use SSL:

   ``` 
   from flask import Flask, render_template
   from flask_socketio import SocketIO, send
   from OpenSSL import SSL

   app = Flask(__name__)
   app.config['SECRET_KEY'] = 'secret!'
   socketio = SocketIO(app)

   context = SSL.Context(SSL.SSLv23_METHOD)
   context.use_certificate('path/to/cert.pem')
   context.use_privatekey('path/to/key.pem')

   @app.route('/')
   def index():
       return render_template('index.html')

   @socketio.on('message')
   def handleMessage(msg):
       print('Message: ' + msg)
       send(msg, broadcast=True)

   if __name__ == '__main__':
       socketio.run(app, host='0.0.0.0', port=5000, ssl_context=context)
   ```

   Replace `'path/to/cert.pem'` and `'path/to/key.pem'` with the actual paths to your SSL certificate and key files.

3. **Run the Secured Server:**

   Restart the server to apply SSL:

   ``` 
     server.py
   ```

### Step 4: Testing and Finalizing

1. **Test the Chat Application:**

   Ensure the chat application works by sending and receiving messages from multiple devices within the LAN.

2. **Deploying:**

   You can deploy this setup on a dedicated machine within your LAN for a more permanent solution.

### Conclusion

You've successfully created a basic LAN instant messaging platform. This can be further enhanced by adding user authentication, a database for message storage, and more advanced features as needed.
