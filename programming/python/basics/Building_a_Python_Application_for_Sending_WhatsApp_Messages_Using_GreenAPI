### Comprehensive Guide to Building a Python Application for Sending WhatsApp Messages Using GreenAPI: A Step-by-Step Tutorial

#### 1. **Set Up Your Python Environment**

- Ensure you have Python installed on your system. You can download it from the [official Python website](https://www.python.org/downloads/).
- Create a virtual environment to manage dependencies for your project. Run the following commands in your terminal:

    
  python -m venv whatsapp_env
  source whatsapp_env/bin/activate  # On Windows, use whatsapp_env\Scripts\activate

#### 2. **Install Required Packages**

- Install the necessary Python packages using `pip`. You will need `requests` for making HTTP requests and `python-dotenv` to manage environment variables:

    
  pip install requests python-dotenv

#### 3. **Create and Edit the `.env` File**

- In your project directory, create and edit a file named `.env` to store sensitive information like your API key and instance ID:

    
  nano .env

- Add the following content to the `.env` file:

   env
  API_KEY=406c76ceebc0406ca7b3491f714b6390a1d5ef6f4cb740e998
  INSTANCE_ID=7103104210

- Save the file by pressing `CTRL + O`, then press `Enter`, and exit nano by pressing `CTRL + X`.

#### 4. **Create and Edit the Python Application**

- Create and edit a new Python script named `whatsapp.py`:

    
  nano whatsapp.py

- Add the following content to the `whatsapp.py` file:

    
  import requests
  import json
  from dotenv import load_dotenv
  import os

  # Load environment variables
  load_dotenv()

  # Retrieve API key and Instance ID from environment variables
  API_KEY = os.getenv('API_KEY')
  INSTANCE_ID = os.getenv('INSTANCE_ID')
  API_URL = f'https://api.green-api.com/instance{INSTANCE_ID}/sendMessage'

  def send_whatsapp_message(phone_number, message):
      headers = {
          'Authorization': f'Bearer {API_KEY}',
          'Content-Type': 'application/json',
      }
      payload = {
          'chatId': f'{phone_number}@c.us',
          'message': message,
      }

      response = requests.post(API_URL, headers=headers, data=json.dumps(payload))

      if response.status_code == 200:
          print('Message sent successfully!')
      else:
          print(f'Failed to send message. Status code: {response.status_code}')
          try:
              print(response.json())
          except requests.exceptions.JSONDecodeError:
              print('Response content is not in JSON format:')
              print(response.text)

  def main():
      phone_number = input('Enter the recipient phone number (with country code): ')
      message = input('Enter your message: ')
      send_whatsapp_message(phone_number, message)

  if __name__ == '__main__':
      main()

- Save the file by pressing `CTRL + O`, then press `Enter`, and exit nano by pressing `CTRL + X`.

#### 5. **Run the Application**

- Execute your Python script using the following command:

    
    whatsapp.py

- When prompted, enter the recipient's phone number with the country code (e.g., `+972547632418`) and your message.

### Explanation of the Code

- **Environment Variables**: The `.env` file securely stores sensitive information like your API key and instance ID. The `python-dotenv` library loads these variables into your environment, ensuring they are not hard-coded in the script.
- **send_whatsapp_message Function**: This function constructs the API request with the necessary headers and payload. It sends a POST request to the GreenAPI endpoint.
- **main Function**: This function prompts the user for the recipient's phone number and the message. It then calls `send_whatsapp_message` to send the message.

This comprehensive guide will help you set up and execute a Python application for sending WhatsApp messages using the GreenAPI service.
