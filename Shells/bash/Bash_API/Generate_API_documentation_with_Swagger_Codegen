Step 1: Download Swagger Codegen JAR

 
 
wget https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/3.0.0/swagger-codegen-cli-3.0.0.jar -O swagger-codegen-cli.jar
Step 2: Create an Alias (Optional)
You can create an alias for easier usage:

 
 
alias swagger-codegen="java -jar swagger-codegen-cli.jar"
Step 3: Write your Swagger/OpenAPI Specification
Create a file named swagger.yaml and define your API endpoints, parameters, responses, etc.


here's a basic example of a Swagger/OpenAPI Specification file (swagger.yaml) for a simple RESTful API:


openapi: 3.0.0
info:
  title: Sample API
  description: This is a sample API documentation
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
paths:
  /users:
    get:
      summary: Retrieve all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: Created
  /users/{userId}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
    put:
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: OK
    delete:
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content





**install java: 
 apt install openjdk-11-jre-headless




Step 4: Generate HTML Documentation

 
 
swagger-codegen generate -i swagger.yaml -l html -o docs
Step 5: Generate PDF Documentation

 
 
swagger-codegen generate -i swagger.yaml -l pdf -o docs
Step 6: Explore your Documentation
Navigate to the docs directory and open the generated HTML files or PDF to explore your API documentation.

This should help you generate API documentation using Swagger Codegen on Linux.






Swagger Codegen can be used in various scenarios where there's a need to generate API client libraries, server stubs, or API documentation from Swagger/OpenAPI Specifications. Here are some common situations where someone might use Swagger Codegen:

API Development: During the development of RESTful APIs, developers can use Swagger Codegen to generate server stubs based on the API specification. This can speed up the development process by providing a starting point for implementing API endpoints.

API Consumption: Consumers of APIs can use Swagger Codegen to generate client libraries in various programming languages. These client libraries provide an easy way to interact with the API without having to manually write HTTP requests and handle responses.

API Documentation: Swagger Codegen can generate interactive API documentation in HTML, PDF, or other formats from Swagger/OpenAPI Specifications. This documentation helps developers understand how to use the API endpoints, what parameters are required, what responses to expect, etc.

Testing: Testers can use Swagger Codegen to generate mock servers based on the API specification. These mock servers simulate the behavior of the actual API, allowing testers to validate client implementations or conduct integration testing without relying on the real API.

Code Standardization: Using Swagger Codegen ensures that client and server code adheres to a standardized API specification. This helps maintain consistency across different parts of the application and reduces the likelihood of errors or inconsistencies.

Overall, Swagger Codegen is a versatile tool that can streamline various aspects of API development, consumption, and documentation, making it a valuable asset for developers, testers, and API consumers alike.
