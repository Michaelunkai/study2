Microservices Architecture Tutorial on Ubuntu
Microservices architecture involves designing a single application as a suite of small services, each running its own process and communicating with lightweight mechanisms. Here's a step-by-step guide on how to set up and manage microservices on Ubuntu using commands.

1. Install Docker
Docker is widely used for creating and managing microservices.

 
 
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce
sudo usermod -aG docker ${USER}
Log out and log back in to apply the group changes.

2. Install Docker Compose
Docker Compose is a tool for defining and running multi-container Docker applications.

 
 
sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
3. Create a Simple Microservices Architecture
Let's create a simple example with two microservices: a frontend service and a backend service.

Backend Service
Create a directory for the backend service:

 
 
mkdir backend
cd backend
Create a simple Node.js application:

 
 
nano server.js
javascript
 
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello from Backend Service!');
});

app.listen(port, () => {
  console.log(`Backend service listening at http://localhost:${port}`);
});
Create a Dockerfile:

 
 
nano Dockerfile
Dockerfile
 
FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["node", "server.js"]
Create package.json:

 
 
npm init -y
npm install express
Frontend Service
Create a directory for the frontend service:

 
 
mkdir ../frontend
cd ../frontend
Create a simple Node.js application:

 
 
nano server.js
javascript
 
const express = require('express');
const app = express();
const port = 3001;

app.get('/', (req, res) => {
  res.send('Hello from Frontend Service!');
});

app.listen(port, () => {
  console.log(`Frontend service listening at http://localhost:${port}`);
});
Create a Dockerfile:

 
 
nano Dockerfile
Dockerfile
 
FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["node", "server.js"]
Create package.json:

 
 
npm init -y
npm install express
4. Create Docker Compose File
Go to the parent directory:

 
 
cd ..
Create a docker-compose.yml file:

 
 
nano docker-compose.yml
 
 
version: '3'
services:
  backend:
    build: ./backend
    ports:
      - "3000:3000"
  frontend:
    build: ./frontend
    ports:
      - "3001:3001"
5. Run the Microservices
Run Docker Compose:

 
 
docker-compose up --build
You should now have two microservices running. You can access them in your browser:

Backend: http://localhost:3000
Frontend: http://localhost:3001
This is a basic example to get you started with microservices architecture on Ubuntu using Docker and Docker Compose.
