Natural Language Processing (NLP) with BERT
Install Transformers Library:

pip install transformers torch
Create a New Python Script:
Create a script for fine-tuning BERT on a text classification task. Name it bert_text_classification.py.

nano bert_text_classification.py
Write the Following Code in the Script:

import pandas as pd
import torch
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load dataset
data = pd.read_csv('text_classification_dataset.csv')  # Assume the dataset is in CSV format
X = data['text']
y = data['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Load pre-trained BERT tokenizer and model
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)

# Tokenize the text data
train_encodings = tokenizer(X_train.tolist(), truncation=True, padding=True, max_length=512)
test_encodings = tokenizer(X_test.tolist(), truncation=True, padding=True, max_length=512)

# Create torch dataset
class TextDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = TextDataset(train_encodings, y_train.tolist())
test_dataset = TextDataset(test_encodings, y_test.tolist())

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=64,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

# Train the model
trainer.train()

# Evaluate the model
predictions = trainer.predict(test_dataset)
preds = predictions.predictions.argmax(-1)
accuracy = accuracy_score(y_test, preds)
print(f'Accuracy: {accuracy * 100:.2f}%')
Run the Script:

  bert_text_classification.py
Explanation of  :
Accuracy: XX.XX%: This shows the BERT model's prediction accuracy on the test dataset.
Step 13: Building a Recommendation System
Install Required Libraries:

pip install surprise
Create a New Python Script:
Create a script for building a recommendation system using collaborative filtering. Name it recommendation_system.py.

nano recommendation_system.py
Write the Following Code in the Script:

from surprise import Dataset, Reader, SVD
from surprise.model_selection import cross_validate

# Load dataset
data = Dataset.load_builtin('ml-100k')  # Load the built-in MovieLens 100k dataset

# Define a reader
reader = Reader(line_format='user item rating timestamp', sep='\t')

# Load data into a Surprise dataset
data = Dataset.load_from_file('path_to_dataset', reader=reader)

# Use the SVD algorithm for collaborative filtering
algo = SVD()

# Perform cross-validation
results = cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# Train the algorithm on the whole dataset
trainset = data.build_full_trainset()
algo.fit(trainset)

# Test the algorithm on a sample user
uid = str(196)
iid = str(302)
pred = algo.predict(uid, iid, r_ui=4, verbose=True)
Run the Script:

  recommendation_system.py
Explanation of  :
Cross-validation Results: Shows the RMSE and MAE metrics for model evaluation.
Prediction: Provides the predicted rating for a specific user-item pair.
