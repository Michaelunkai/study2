### Comprehensive Tutorial: Setting Up a Smart City Transportation System on Ubuntu

#### Introduction
This tutorial will guide you through setting up a smart city transportation system on Ubuntu, leveraging various tools and technologies. We will use Python, Django for the backend, PostgreSQL for the database, and Mapbox for map visualization. This tutorial assumes you have a basic understanding of Python and web development.

#### Prerequisites
- Ubuntu 20.04 or later
- Python 3.8 or later
- PostgreSQL
- Node.js and npm
- Mapbox API key

#### Step 1: Update and Upgrade the System
  
sudo apt update && sudo apt upgrade -y

#### Step 2: Install Python and Pip
  
sudo apt install python3 python3-pip -y

#### Step 3: Install PostgreSQL
  
sudo apt install postgresql postgresql-contrib -y

#### Step 4: Setup PostgreSQL Database
1. Switch to the PostgreSQL user:
      
    sudo -i -u postgres

2. Create a new database user:
      
    createuser --interactive

3. Create a new database:
      
    createdb smart_city_db

4. Exit PostgreSQL user:
      
    exit

5. Set a password for the PostgreSQL user:
      
    sudo -u postgres psql
    ALTER USER your_username WITH PASSWORD 'your_password';
    \q

#### Step 5: Install and Setup Django
1. Install Django:
      
    pip3 install django

2. Create a new Django project:
      
    django-admin startproject smart_city_transportation
    cd smart_city_transportation

3. Configure PostgreSQL in Django `settings.py`:
      
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgre _psycopg2',
            'NAME': 'smart_city_db',
            'USER': 'your_username',
            'PASSWORD': 'your_password',
            'HOST': 'localhost',
            'PORT': '',
        }
    }

#### Step 6: Install and Setup Mapbox
1. Install Mapbox GL JS:
      
    npm install mapbox-gl

2. Add Mapbox CSS and JS to your Django template (e.g., `index.html`):
     html
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8" />
        <title>Smart City Transportation</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link href='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css' rel='stylesheet' />
        <style>
            #map {
                position: absolute;
                top: 0;
                bottom: 0;
                width: 100%;
            }
        </style>
    </head>
    <body>
        <div id='map'></div>
        <script src='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'></script>
        <script>
            mapboxgl.accessToken = 'your_mapbox_access_token';
            const map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [-74.5, 40],
                zoom: 9
            });
        </script>
    </body>
    </html>

#### Step 7: Create Django Models for Transportation Data
1. Open `models.py` in your Django app and add the following models:
      
    from django.db import models

    class Vehicle(models.Model):
        vehicle_id = models.CharField(max_length=50)
        type = models.CharField(max_length=50)
        capacity = models.IntegerField()

    class Route(models.Model):
        route_id = models.CharField(max_length=50)
        start_location = models.CharField(max_length=100)
        end_location = models.CharField(max_length=100)
        vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE)

2. Run migrations to create the database tables:
      
     3 manage.py makemigrations
     3 manage.py migrate

#### Step 8: Create Views and Templates
1. Create a view to display the transportation data:
      
    from django.shortcuts import render
    from .models import Route

    def index(request):
        routes = Route.objects.all()
        return render(request, 'index.html', {'routes': routes})

2. Update `urls.py` to include the new view:
      
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.index, name='index'),
    ]

3. Modify `index.html` to display routes on the map (in `templates` directory):
     html
    {% extends "base_generic.html" %}
    {% block content %}
    <div id='map'></div>
    <script>
        mapboxgl.accessToken = 'your_mapbox_access_token';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [-74.5, 40],
            zoom: 9
        });

        const routes = {{ routes|safe }};
        routes.forEach(route => {
            new mapboxgl.Marker()
                .setLngLat([route.start_location, route.end_location])
                .addTo(map);
        });
    </script>
    {% endblock %}

#### Step 9: Run the Django Server
  
 3 manage.py runserver

#### Conclusion
You now have a basic smart city transportation system running on Ubuntu using Django and Mapbox. This setup allows you to visualize transportation routes and vehicles on a map. You can expand this project by adding more features such as real-time tracking, user authentication, and integration with other smart city systems.

This comprehensive tutorial covers the essential steps to get you started. Customize and expand the project according to your specific requirements and goals.
