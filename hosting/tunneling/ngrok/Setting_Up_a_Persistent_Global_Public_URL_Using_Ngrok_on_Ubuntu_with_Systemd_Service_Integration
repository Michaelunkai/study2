# Comprehensive Guide to Setting Up a Persistent Global Public URL Using Ngrok on Ubuntu with Systemd Service Integration

This tutorial covers the step-by-step process to create a persistent global public URL using **Ngrok**, **Node.js**, and **Systemd**. We'll ensure the service works for a specific local IP address (192.168.1.196) and runs continuously in the background as a Systemd service. The guide includes installing prerequisites, setting up the environment with **NVM**, configuring **Ngrok**, and retrieving the generated public URL.

---

### Step 1: Install Prerequisites, Node.js, npm, and Ngrok

Run the following one-liner to update your system, install required tools, set up **NVM**, install **Node.js v20.18.1**, **npm**, and the **Ngrok** CLI:

  
apt update && apt upgrade -y && apt install curl -y && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash && export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" && nvm install v20.18.1 && nvm use v20.18.1 && node -v && npm install -g npm@latest && npm -v && nvm -v && npm install -g ngrok && ngrok -v

---

### Step 2: Add Ngrok Authentication Token

To enable Ngrok's full functionality, add your authentication token (replace the token with your own):

  
ngrok config add-authtoken 2qcNPrautgOBIKkgwDb2W6g8oCe_5c2XSNffF6q2y15eTMUcC

---

### Step 3: Create a Systemd Service for Ngrok

Create a Systemd service file to run **Ngrok** as a persistent background service:

  
nano /etc/systemd/system/ngrok.service

Paste the following content into the file:

 ini
[Unit]
Description=Ngrok Tunnel Service for 192.168.1.196
After=network.target

[Service]
ExecStart=/root/.nvm/versions/node/v20.18.1/bin/ngrok http 192.168.1.196:5000 --log=stdout --region=us
Restart=always
User=root
WorkingDirectory=/root

[Install]
WantedBy=multi-user.target

Save and exit the file.

---

### Step 4: Reload Systemd and Enable the Ngrok Service

Run the following commands to reload Systemd, enable the Ngrok service at startup, and start it:

  
systemctl daemon-reload
systemctl enable ngrok.service
systemctl restart ngrok.service

---

### Step 5: Check the Status of the Ngrok Service

Ensure the service is running without issues:

  
systemctl status ngrok.service

The output should show the service in an `active (running)` state.

---

### Step 6: Retrieve the Public URL Created by Ngrok

Run the following command to fetch the public URL generated by Ngrok:

  
curl -s http://127.0.0.1:4040/api/tunnels | grep -Po '"public_url":"\K[^"]*'

The command will output the **public URL**. For example:

  
https://your-subdomain.ngrok.io

---

### Summary

You have now set up **Ngrok** as a persistent Systemd service on your Ubuntu server, configured to work with the local IP address `192.168.1.196`. The generated public URL can be fetched at any time using the provided `curl` command. This setup ensures that Ngrok runs continuously in the background and restarts automatically in case of failure.
